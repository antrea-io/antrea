#!/usr/bin/env bash

# Copyright 2022 Antrea Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source logging
source daemon_status

CONTAINER_NAME="antrea-ovs"
OVS_RUN_DIR="/var/run/openvswitch"
OVS_DB_FILE="/var/run/openvswitch/conf.db"

if ! ip addr show eth0 > /dev/null 2>&1; then
    log_error $CONTAINER_NAME "No eth0 uplink found, exiting"
    exit 1
fi

# Modify ovs-ctl so that the kernel module is no longer loaded since it is not
# needed when using OVS in userspace mode. It also enables running OVS with the
# netdev datapath type on platforms which do not have the OVS kernel module.
# This is easier than starting daemons manually...
function fix_ovs_ctl {
    sed -i 's/\(\w*\)\(insert_mod_if_required || return 1\)/\1# \2/' /usr/share/openvswitch/scripts/ovs-ctl
}

# grep exits 1 if no matches are found. This function catches exit status 1 to
# avoid failing if no matches are found. This still allows grep to return with
# other exit status codes in the case of other failures.
function grep_allow_no_match {
  grep "$@" || test $? = 1;
}

# See http://docs.openvswitch.org/en/latest/howto/userspace-tunneling/
function add_br_phy {
    log_info $CONTAINER_NAME "Creating OVS br-phy bridge for netdev datapath type"
    hwaddr=$(ip link show eth0 | grep link/ether | awk '{print $2}')
    inet=$(ip addr show eth0 | grep "inet " | awk '{ print $2 }')
    inet6=$(ip -6 addr show eth0 | grep_allow_no_match global | awk '{ print $2 }')
    gw=$(ip route | grep default | awk '{ print $3 }')
    gw6=$(ip -6 route | grep_allow_no_match default | awk '{ print $3 }')
    # eth0 may be assigned an IPv6 address even if IPv6 is disabled in the kernel
    # we must ensure IPv6 is enabled before we can add IPv6 addresses
    ipv6enabled=$(sysctl net.ipv6.conf.all.disable_ipv6 --values)
    ovs-vsctl add-br br-phy \
              -- set Bridge br-phy datapath_type=netdev \
              -- br-set-external-id br-phy bridge-id br-phy \
              -- set bridge br-phy fail-mode=standalone \
              other_config:hwaddr="$hwaddr"

    ovs-vsctl --timeout 10 add-port br-phy eth0
    ip addr add "$inet" dev br-phy
    if [[ "$ipv6enabled" -eq 0 ]] && [[ -n "$inet6" ]]; then
      ip addr add "$inet6" dev br-phy
    fi
    ip link set br-phy up
    ip addr flush dev eth0 2>/dev/null
    ip link set eth0 up
    ip route add default via "$gw" dev br-phy
    iptables -t raw -A PREROUTING -i eth0 -j DROP
    # While the below ip6tables rule should prevent duplicate packets, we
    # observed that it caused connectivity to the API server to fail from
    # outside the cluster. More investigation is required.
    # ip6tables -t raw -A PREROUTING -i eth0 -j DROP
    if [[ "$ipv6enabled" -eq 0 ]] && [[ -n "$gw6" ]]; then
      ip -6 route replace default via "$gw6" dev br-phy
    fi
}

function del_br_phy {
    inet=$(ip addr show br-phy | grep "inet " | awk '{ print $2 }')
    inet6=$(ip -6 addr show br-phy | grep_allow_no_match global | awk '{ print $2 }')
    gw=$(ip route | grep default | awk '{ print $3 }')
    gw6=$(ip -6 route | grep_allow_no_match default | awk '{ print $3 }')
    # we must ensure IPv6 is enabled before we can add IPv6 addresses
    ipv6enabled=$(sysctl net.ipv6.conf.all.disable_ipv6 --values)
    log_info $CONTAINER_NAME "Deleting OVS br-phy bridge"
    ovs-vsctl del-port br-phy eth0
    ovs-vsctl del-br br-phy
    ip addr add "$inet" dev eth0
    if [[ "$ipv6enabled" -eq 0 ]] && [[ -n "$inet6" ]]; then
      ip addr add "$inet6" dev eth0
    fi
    ip link set eth0 up
    ip route add default via "$gw" dev eth0
    iptables -t raw -D PREROUTING -i eth0 -j DROP
    if [[ "$ipv6enabled" -eq 0 ]] && [[ -n "$gw6" ]]; then
      ip -6 route replace default via "$gw6" dev eth0
    fi
}

# While working on https://github.com/antrea-io/antrea/pull/2215, we sometimes
# observed a few leftover .ctl files across OVS restarts, causing failures in
# the agent when trying to run ovs-appctl commands. This impacted testing on
# Kind, so we started deleting these files before starting OVS.
function cleanup_ovs_run_files {
    rm -rf ${OVS_RUN_DIR}/ovs*.pid
    rm -rf ${OVS_RUN_DIR}/ovs*.ctl
    rm -rf ${OVS_RUN_DIR}/.conf.db.*~lock~
}

function start_ovs {
    cleanup_ovs_run_files
    log_info $CONTAINER_NAME "Starting OVS"
    # Unlike the start_ovs script, we don't set flow-restore-wait when starting OVS
    # with the netdev datapath. This is because the Node's network relies on the
    # forwarding of OVS so we cannot get Node, Pod, NetworkPolicy data from
    # Kubernetes API to install proper flows before removing flow-restore-wait.
    /usr/share/openvswitch/scripts/ovs-ctl --system-id=random start --db-file=$OVS_DB_FILE
}

function stop_ovs {
    log_info $CONTAINER_NAME "Stopping OVS"
    /usr/share/openvswitch/scripts/ovs-ctl stop
}

SLEEP_PID=

function quit {
    log_info $CONTAINER_NAME "Stopping OVS before quit"
    # delete the bridge and move IP address back to eth0 to restore connectivity
    # when OVS is stopped.
    del_br_phy
    stop_ovs
    # terminate background sleep process
    if [ "$SLEEP_PID" != "" ]; then kill $SLEEP_PID > /dev/null 2>&1 || true; fi
    exit 0
}

set -euo pipefail

# Do not trap EXIT as it would then ignore the "exit 0" statement in quit and
# exit with code 128 + SIGNAL
trap "quit" INT TERM

fix_ovs_ctl
start_ovs

if [[ "$#" -ge 1 ]] && [[ "$1" == "--start-ovs-only" ]]; then
  exit 0
fi
if ip addr show br-phy > /dev/null 2>&1; then
    log_info $CONTAINER_NAME "OVS bridge br-phy already exists, attempting clean-up first"
    del_br_phy || true
fi
add_br_phy

log_info $CONTAINER_NAME "Started the loop that checks OVS status every 30 seconds"
while true; do
    # we run sleep in the background so that we can immediately exit when we
    # receive SIGINT / SIGTERM
    # see https://stackoverflow.com/questions/32041674/linux-how-to-kill-sleep
    sleep 30 &
    SLEEP_PID=$!
    wait $SLEEP_PID

    if ! check_ovs_status > /dev/null; then
        # OVS was stopped in the container.
        log_warning $CONTAINER_NAME "OVS was stopped. Starting it again"

        start_ovs
    fi
done
