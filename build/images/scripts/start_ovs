#!/usr/bin/env bash

source logging
source daemon_status
source /usr/share/openvswitch/scripts/ovs-lib

CONTAINER_NAME="antrea-ovs"
OVS_RUN_DIR="/var/run/openvswitch"
OVS_DB_FILE="${OVS_RUN_DIR}/conf.db"

set -euo pipefail

# We once (issue #870) observed that ovsdb-server failed to restart with error:
# "ovsdb-server: /var/run/openvswitch/ovsdb-server.pid: pidfile check failed
# (No such process), aborting", until we deleted the stale OVS PID files.
# So here we delete stale OVS PID, UDS, and OVSDB lock files before starting the
# OVS daemons to avoid running into the failure.
function cleanup_ovs_run_files {
    rm -rf ${OVS_RUN_DIR}/ovs*.pid
    rm -rf ${OVS_RUN_DIR}/ovs*.ctl
    rm -rf ${OVS_RUN_DIR}/.conf.db.*~lock~
}

# start_ovs takes one parameter: a boolean value which indicates whether OVS
# kernel HW offload should be enabled.
function start_ovs {
    offload=$1
    if daemon_is_running ovsdb-server; then
        log_info $CONTAINER_NAME "ovsdb-server is already running"
    else
        log_info $CONTAINER_NAME "Starting ovsdb-server"
        /usr/share/openvswitch/scripts/ovs-ctl --no-ovs-vswitchd --system-id=random start --db-file=$OVS_DB_FILE
        log_info $CONTAINER_NAME "Started ovsdb-server"
    fi

    if daemon_is_running ovs-vswitchd; then
        log_info $CONTAINER_NAME "ovs-vswitchd is already running"
    else
        log_info $CONTAINER_NAME "Starting ovs-vswitchd"
        # Start ovs-vswitchd with flow-restore-wait set to true so that packets won't be
        # mishandled in its default fashion, the config will be removed after antrea-agent
        # restoring flows.
        ovs-vsctl --no-wait set open_vswitch . other_config:flow-restore-wait="true"
        log_info $CONTAINER_NAME "ovs-vswitchd set hw-offload to $offload"
        ovs-vsctl --no-wait set open_vswitch . other_config:hw-offload="$offload"
        /usr/share/openvswitch/scripts/ovs-ctl --no-ovsdb-server --system-id=random start --db-file=$OVS_DB_FILE
        log_info $CONTAINER_NAME "Started ovs-vswitchd"
    fi
}

function stop_ovs {
    log_info $CONTAINER_NAME "Stopping OVS"
    /usr/share/openvswitch/scripts/ovs-ctl stop
}

SLEEP_PID=

function quit {
    log_info $CONTAINER_NAME "Stopping OVS before quit"
    stop_ovs
    # kill background sleep process
    if [ "$SLEEP_PID" != "" ]; then kill $SLEEP_PID > /dev/null 2>&1 || true; fi
    exit 0
}

# Do not trap EXIT as it would then ignore the "exit 0" statement in quit and
# exit with code 128 + SIGNAL
trap "quit" INT TERM

cleanup_ovs_run_files

offload=false
if [ $# == 1 ] && [ -n "$1" ] && [ "$1" == "--hw-offload" ]; then
    offload=true
fi

start_ovs $offload

log_info $CONTAINER_NAME "Started the loop that checks OVS status every 30 seconds"
while true; do
    # we run sleep in the background so that we can immediately exit when we
    # receive SIGINT / SIGTERM
    # see https://stackoverflow.com/questions/32041674/linux-how-to-kill-sleep
    sleep 30 &
    SLEEP_PID=$!
    wait $SLEEP_PID

    if ! check_ovs_status > /dev/null ; then
        # OVS was stopped in the container.
        log_warning $CONTAINER_NAME "OVS was stopped. Starting it again"

        start_ovs $offload
    fi
done
