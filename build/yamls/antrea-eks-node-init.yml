kind: DaemonSet
apiVersion: apps/v1
metadata:
  labels:
    app: antrea
    component: antrea-node-init
  name: antrea-node-init
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: antrea
      component: antrea-node-init
  template:
    metadata:
      labels:
        app: antrea
        component: antrea-node-init
    spec:
      hostPID: true
      hostNetwork: true
      volumes:
      - hostPath:
          path: /var/run/aws-node
          type: DirectoryOrCreate
        name: host-aws-node-run-dir
      containers:
        - name: node-init
          image: gcr.io/google-containers/startup-script:v2
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          volumeMounts:
          - mountPath: /var/run/aws-node
            name: host-aws-node-run-dir
          env:
          - name: STARTUP_SCRIPT
            value: |
              #! /bin/bash

              set -o errexit
              set -o pipefail
              set -o nounset

              echo "Initializing Node for Antrea"

              cni_conf="/etc/cni/net.d/05-antrea.conflist"
              while true; do
                  if [[ -f $cni_conf ]]; then break; fi
                  echo "Waiting for Antrea CNI conf file"
                  sleep 2s
              done

              echo "Detecting container runtime (docker / containerd) based on whether /var/run/docker.sock exists"
              container_runtime="docker"
              test -e /var/run/docker.sock || container_runtime="containerd"
              echo "Container runtime: $container_runtime"

              # Wait for kubelet to register the file update.
              # Default sync time is 5s so we sleep for 10s.
              # https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/dockershim/network/cni/cni.go#L50
              sleep 10s

              while true; do
                  curl -sS -o /dev/null localhost:61679 && retry=false || retry=true
                  if [ $retry == false ]; then break ; fi
                  sleep 2s
                  echo "Waiting for aws-k8s-agent"
              done

              # Fetch running containers from aws-k8s-agent and kill them
              echo
              for container_id in $(cat /var/run/aws-node/ipam.json | jq -r '.allocations | .[] | .containerID'); do
                  echo "Restarting container with ID: ${container_id}"
                  if [[ "$container_runtime" == "docker" ]]; then
                      docker kill "${container_id}" || true
                  else
                      ctr -n=k8s.io tasks kill "${container_id}" || true
                  fi
              done

              # The script will run again if the contents of the script change.
              # It may also run again in case of worker Node reboot, assuming
              # that the contents of /tmp are deleted.
              # See https://github.com/kubernetes-retired/contrib/blob/master/startup-script/manage-startup-script.sh.
              echo "Node initialization completed"
