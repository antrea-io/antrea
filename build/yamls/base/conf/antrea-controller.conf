# FeatureGates is a map of feature names to bools that enable or disable experimental features.
featureGates:
# Enable traceflow which provides packet tracing feature to diagnose network issue.
#  Traceflow: true

# Enable Antrea ClusterNetworkPolicy feature to complement K8s NetworkPolicy for cluster admins
# to define security policies which apply to the entire cluster, and Antrea NetworkPolicy
# feature that supports priorities, rule actions and externalEntities in the future.
#  AntreaPolicy: false

# Enable collecting and exposing NetworkPolicy statistics.
#  NetworkPolicyStats: false

# Enable controlling SNAT IPs of Pod egress traffic.
#  Egress: false

# The port for the antrea-controller APIServer to serve on.
# Note that if it's set to another value, the `containerPort` of the `api` port of the
# `antrea-controller` container must be set to the same value.
#apiPort: 10349

# Enable metrics exposure via Prometheus. Initializes Prometheus metrics listener.
#enablePrometheusMetrics: true

# Indicates whether to use auto-generated self-signed TLS certificate.
# If false, A Secret named "antrea-controller-tls" must be provided with the following keys:
#   ca.crt: <CA certificate>
#   tls.crt: <TLS certificate>
#   tls.key: <TLS private key>
# And the Secret must be mounted to directory "/var/run/antrea/antrea-controller-tls" of the
# antrea-controller container.
#selfSignedCert: true

# Comma-separated list of Cipher Suites. If omitted, the default Go Cipher Suites will be used.
# https://golang.org/pkg/crypto/tls/#pkg-constants
# Note that TLS1.3 Cipher Suites cannot be added to the list. But the apiserver will always
# prefer TLS1.3 Cipher Suites whenever possible.
#tlsCipherSuites:

# TLS min version from: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.
#tlsMinVersion:

# If Antrea is upgraded from version <= v0.13 and legacy CRDs are used, this option should be
# enabled, otherwise the CRDs created with the legacy API groups will not take any effect and
# work as expected. When the mirroring is enabled, if a legacy CRD is created with legacy API
# groups, mirroring-controller will create a new CRD with the Spec and Labels from the legacy
# CRD. Afterwards, the modification of Spec and Label in legacy CRD will be synchronized to new
# CRD automatically. In addition, the modification of Status in new CRD will also be synchronized
# to legacy CRD automatically. If a legacy CRD is deleted, the corresponding new CRD will be deleted.
# Note that: to decouple a new CRD from the corresponding legacy CRD, the legacy CRD should be
# annotated with "crd.antrea.io/stop-mirror". Afterwards, updates to the legacy CRDs will no
# longer be reflected in the new CRD, and all CRUD operations should be done through the new
# API groups. After adding the annotation, legacy CRDs can be deleted safely without impacting
# new CRDs.
#legacyCRDMirroring: true
