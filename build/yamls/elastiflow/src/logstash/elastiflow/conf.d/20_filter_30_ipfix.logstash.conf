#------------------------------------------------------------------------------
# Copyright (C)2019 Robert Cowart
# 
# The contents of this file and/or repository are subject to the Robert Cowart
# Public License (the "License") and may not be used or distributed except in
# compliance with the License. You may obtain a copy of the License at:
# 
# http://www.koiossian.com/public/robert_cowart_public_license.txt
# 
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
# the specific language governing rights and limitations under the License.
# 
# The Original Source Code was developed by Robert Cowart. Portions created by
# Robert Cowart are Copyright (C)2019 Robert Cowart. All Rights Reserved.
#------------------------------------------------------------------------------

filter {
  if [event][type] == "ipfix" {
    # If flows are sent through a proxy that adds exporterIPv4Address or exporterIPv6Address, then reset node.ipaddr and node.hostname.
      if [ipfix][exporterIPv4Address] or [ipfix][exporterIPv6Address] {
        if [ipfix][exporterIPv4Address] {
          mutate {
            id => "ipfix_set_node_exporter_ipv4"
            replace => {
              "[node][ipaddr]" => "%{[ipfix][exporterIPv4Address]}"
              "[node][hostname]" => "%{[ipfix][exporterIPv4Address]}"
            }
          }
          mutate {
            id => "ipfix_remove_exporterIPv4Address"
            remove_field => [ "[ipfix][exporterIPv4Address]" ]
          }
        } else if [ipfix][exporterIPv6Address] {
          mutate {
            id => "ipfix_set_node_exporter_ipv6"
            replace => {
              "[node][ipaddr]" => "%{[ipfix][exporterIPv6Address]}"
              "[node][hostname]" => "%{[ipfix][exporterIPv6Address]}"
            }
          }
          mutate {
            id => "ipfix_remove_exporterIPv6Address"
            remove_field => [ "[ipfix][exporterIPv6Address]" ]
          }
        }

        if [@metadata][resolve_ip2host] == "true" or [@metadata][resolve_ip2host] == "exporters" {
          dns {
            id => "ipfix_dns_node_name"
            reverse => [ "[node][hostname]" ]
            action => "replace"
            nameserver => "${ELASTIFLOW_NAMESERVER:127.0.0.1}"
            hit_cache_size => "${ELASTIFLOW_DNS_HIT_CACHE_SIZE:25000}"
            hit_cache_ttl => "${ELASTIFLOW_DNS_HIT_CACHE_TTL:900}"
            failed_cache_size => "${ELASTIFLOW_DNS_FAILED_CACHE_SIZE:75000}"
            failed_cache_ttl => "${ELASTIFLOW_DNS_FAILED_CACHE_TTL:3600}"
          }
        }
      }
    
    # Populate normalized ElastiFlow fields with simple mapping from IPFIX flow fields.
      mutate {
        id => "ipfix_simple_mappings"
        rename => {
          "[ipfix][protocolIdentifier]" => "[flow][ip_protocol]"
          "[ipfix][tcpControlBits]" => "[flow][tcp_flags]"
          "[ipfix][samplingFlowInterval]" => "[flow][sampling_interval]"
          "[ipfix][sourceMacAddress]" => "[flow][src_mac]"
          "[ipfix][destinationMacAddress]" => "[flow][dst_mac]"
          "[ipfix][vlanId]" => "[flow][vlan]"
          "[ipfix][bgpValidityState]" => "[flow][bgp_valid_state]"
          "[ipfix][postNAPTSourceTransportPort]" => "[flow][src_port_trans]"
          "[ipfix][postNAPTDestinationTransportPort]" => "[flow][dst_port_trans]"
          "[ipfix][staMacAddress]" => "[flow][wifi_sta_mac]"
          "[ipfix][wlanSSID]" => "[flow][wifi_ssid]"
          "[ipfix][wtpMacAddress]" => "[flow][wifi_wtp_mac]"
        }
      }
      mutate {
        id => "ipfix_simple_mappings_convert"
        convert => {
          "[flow][ip_protocol]" => "integer"
          "[flow][sampling_interval]" => "integer"
          "[flow][tcp_flags]" => "integer"
        }
      }

      if [ipfix][ipVersion] {
        mutate {
          id => "ipfix_simple_mappings_add_ip_version"
          add_field => { "[flow][ip_version]" => "IPv%{[ipfix][ipVersion]}" }
        }
        mutate {
          id => "ipfix_remove_ipVersion"
          remove_field => [ "[ipfix][ipVersion]" ]
        }
      }

    # Populate normalized ElastiFlow fields with IPv4 or IPv6 specific fields.
      if [ipfix][sourceIPv4Address] or [ipfix][destinationIPv4Address] or [ipfix][staIPv4Address] or [flow][ip_version] == "IPv4" {
        # Looks like an IPv4 flow.
        if ![flow][ip_version] {
          mutate {
            id => "ipfix_ipv4_ip_version"
            add_field => { "[flow][ip_version]" => "IPv4" }
          }
        }

        mutate {
          id => "ipfix_ipv4_mappings"
          rename => {
            "[ipfix][sourceIPv4Address]" => "[flow][src_addr]"
            "[ipfix][postNATSourceIPv4Address]" => "[flow][src_addr_trans]"
            "[ipfix][sourceIPv4PrefixLength]" => "[flow][src_mask_len]"
            "[ipfix][destinationIPv4Address]" => "[flow][dst_addr]"
            "[ipfix][postNATDestinationIPv4Address]" => "[flow][dst_addr_trans]"
            "[ipfix][destinationIPv4PrefixLength]" => "[flow][dst_mask_len]"
            "[ipfix][ipNextHopIPv4Address]" => "[flow][next_hop]"
            "[ipfix][bgpNextHopIPv4Address]" => "[flow][bgp_next_hop]"
            "[ipfix][staIPv4Address]" => "[flow][wifi_sta_addr]"
          }
        }
      } else if [ipfix][sourceIPv6Address] or [ipfix][destinationIPv6Address] or [ipfix][staIPv6Address] or [flow][ip_version] == "IPv6" {
        # Looks like an IPv6 flow.
        if ![flow][ip_version] {
          mutate {
            id => "ipfix_ipv6_ip_version"
            add_field => { "[flow][ip_version]" => "IPv6" }
          }
        }

        mutate {
          id => "ipfix_ipv6_mappings"
          rename => {
            "[ipfix][sourceIPv6Address]" => "[flow][src_addr]"
            "[ipfix][postNATSourceIPv6Address]" => "[flow][src_addr_trans]"
            "[ipfix][sourceIPv6PrefixLength]" => "[flow][src_mask_len]"
            "[ipfix][destinationIPv6Address]" => "[flow][dst_addr]"
            "[ipfix][postNATDestinationIPv6Address]" => "[flow][dst_addr_trans]"
            "[ipfix][destinationIPv6PrefixLength]" => "[flow][dst_mask_len]"
            "[ipfix][ipNextHopIPv6Address]" => "[flow][next_hop]"
            "[ipfix][bgpNextHopIPv6Address]" => "[flow][bgp_next_hop]"
            "[ipfix][staIPv6Address]" => "[flow][wifi_sta_addr]"
          }
        }
      } else {
        # Did not recognize IP version.
        mutate {
          id => "ipfix_ip_version_not_recognized"
          add_tag => [ "__ipfix_ip_version_not_recognized" ]
          remove_field => [ "[flow][ip_version]" ]
        }
      }

    # Populate src_addr from wifi_sta_addr if not present
      if ![flow][src_addr] and [flow][wifi_sta_addr] {
        mutate {
          add_field => { "[flow][src_addr]" => "%{[flow][wifi_sta_addr]}" }
        }
      }

    # Populate normalized ElastiFlow fields with source protocol port.
      if [ipfix][sourceTransportPort] {
        mutate {
          id => "ipfix_add_src_port_transport"
          rename => { "[ipfix][sourceTransportPort]" => "[flow][src_port]" }
        }
      } else if [ipfix][tcpSourcePort] {
        mutate {
          id => "ipfix_add_src_port_tcp"
          rename => { "[ipfix][tcpSourcePort]" => "[flow][src_port]" }
        }
      } else if [ipfix][udpSourcePort] {
        mutate {
          id => "ipfix_add_src_port_udp"
          rename => { "[ipfix][udpSourcePort]" => "[flow][src_port]" }
        }
      }
      if [flow][src_port] {
        mutate {
          id => "ipfix_convert_src_port"
          convert => { "[flow][src_port]" => "integer" }
        }
      }

    # Populate normalized ElastiFlow fields with destination protocol port.
      if [ipfix][destinationTransportPort] {
        mutate {
          id => "ipfix_add_dst_port_transport"
          rename => { "[ipfix][destinationTransportPort]" => "[flow][dst_port]" }
        }
      } else if [ipfix][tcpDestinationPort] {
        mutate {
          id => "ipfix_add_dst_port_tcp"
          rename => { "[ipfix][tcpDestinationPort]" => "[flow][dst_port]" }
        }
      } else if [ipfix][udpDestinationPort] {
        mutate {
          id => "ipfix_add_dst_port_udp"
          rename => { "[ipfix][udpDestinationPort]" => "[flow][dst_port]" }
        }
      }
      if [flow][dst_port] {
        mutate {
          id => "ipfix_convert_dst_port"
          convert => { "[flow][dst_port]" => "integer" }
        }
      }

    # Populate normalized ElastiFlow fields with ingress interface index.
      if [ipfix][ingressInterface] {
        mutate {
          id => "ipfix_add_in_if_index"
          rename => { "[ipfix][ingressInterface]" => "[flow][input_snmp]" }
        }
      } else if [ipfix][ingressPhysicalInterface] {
        mutate {
          id => "ipfix_add_in_if_index_phy"
          rename => { "[ipfix][ingressPhysicalInterface]" => "[flow][input_snmp]" }
        }
      }

    # Populate normalized ElastiFlow fields with egress interface index.
      if [ipfix][egressInterface] {
        mutate {
          id => "ipfix_add_out_if_index"
          rename => { "[ipfix][egressInterface]" => "[flow][output_snmp]" }
        }
      } else if [ipfix][egressPhysicalInterface] {
        mutate {
          id => "ipfix_add_out_if_index_phy"
          rename => { "[ipfix][egressPhysicalInterface]" => "[flow][output_snmp]" }
        }
      }

    # Populate normalized ElastiFlow fields with TOS value if available.
      if [ipfix][ipDiffServCodePoint] {
        mutate {
          id => "ipfix_add_tos_ip_dscp"
          rename => { "[ipfix][ipDiffServCodePoint]" => "[flow][tos]" }
        }
      } else if [ipfix][ipPrecedence] {
        mutate {
          id => "ipfix_add_tos_ip_prec"
          rename => { "[ipfix][ipPrecedence]" => "[flow][tos]" }
        }
      } else if [ipfix][ipClassOfService] {
        mutate {
          id => "ipfix_add_tos_ip_cos"
          rename => { "[ipfix][ipClassOfService]" => "[flow][tos]" }
        }
      }

    # Populate normalized ElastiFlow fields with flow directiom (ingress/egress).
      if [ipfix][flowDirection] {
        if [ipfix][flowDirection] == 0 {
          mutate {
            id => "ipfix_add_direction_ingress"
            add_field => {
              "[flow][direction]" => "ingress"
            }
          }
        } else if [ipfix][flowDirection] == 1 {
          mutate {
            id => "ipfix_add_direction_egress"
            add_field => {
              "[flow][direction]" => "egress"
            }
          }
        } else {
          mutate {
            id => "ipfix_direction_not_recognized"
            add_field => { "[flow][direction]" => "undetermined" }
          }
        }
        mutate {
          id => "ipfix_remove_direction"
          remove_field => [ "[ipfix][flowDirection]" ]
        }
      } else if [ipfix][ziften_inbound] {
        if [ipfix][ziften_inbound] == 1 {
          mutate {
            id => "ipfix_add_direction_ingress_zflow"
            add_field => {
              "[flow][direction]" => "ingress"
            }
          }
        } else if [ipfix][ziften_inbound] == 0 {
          mutate {
            id => "ipfix_add_direction_egress_zflow"
            add_field => {
              "[flow][direction]" => "egress"
            }
          }
        } else {
          mutate {
            id => "ipfix_direction_not_recognized_zflow"
            add_field => { "[flow][direction]" => "undetermined" }
          }
        }
        mutate {
          id => "ipfix_remove_direction_zflow"
          remove_field => [ "[ipfix][ziften_inbound]" ]
        }
      } else {
        mutate {
          id => "ipfix_direction_not_specified"
          add_field => { "[flow][direction]" => "unspecified" }
        }
      }

    # Populate normalized ElastiFlow fields with bytes if available.
      if [ipfix][octetDeltaCount] {
        if [ipfix][reverseOctetDeltaCount] {
          ruby {
            id => "ipfix_normalize_bytes_from_octetDeltaCount_reverseOctetDeltaCount"
            code => "
              event.set( '[flow][bytes]', event.get('[ipfix][octetDeltaCount]').to_i + event.get('[ipfix][reverseOctetDeltaCount]').to_i )
            "
          }
        } else {
          mutate {
            id => "ipfix_add_octetDeltaCount"
            replace => { "[flow][bytes]" => "%{[ipfix][octetDeltaCount]}" }
          }
        }
      } else if [ipfix][reverseOctetDeltaCount] {
        mutate {
          id => "ipfix_add_reverseOctetDeltaCount"
          replace => { "[flow][bytes]" => "%{[ipfix][reverseOctetDeltaCount]}" }
        }
      } else if [ipfix][initiatorOctets] {
        if [ipfix][responderOctets] {
          ruby {
            id => "ipfix_normalize_bytes_from_initiatorOctets_responderOctets"
            code => "
              event.set( '[flow][bytes]', event.get('[ipfix][initiatorOctets]').to_i + event.get('[ipfix][responderOctets]').to_i )
            "
          }
        } else {
          mutate {
            id => "ipfix_add_initiatorOctets"
            replace => { "[flow][bytes]" => "%{[ipfix][initiatorOctets]}" }
          }
        }
      } else if [ipfix][responderOctets] {
        mutate {
          id => "ipfix_add_responderOctets"
          replace => { "[flow][bytes]" => "%{[ipfix][responderOctets]}" }
        }
      }
      if [flow][bytes] {
        mutate {
          id => "ipfix_convert_bytes"
          convert => { "[flow][bytes]" => "integer" }
        }
      }

    # Populate normalized ElastiFlow fields with packets if available.
      if [ipfix][packetDeltaCount] {
        if [ipfix][reversePacketDeltaCount] {
          ruby {
            id => "ipfix_normalize_packets_from_packetDeltaCount_reversePacketDeltaCount"
            code => "
              event.set( '[flow][packets]', event.get('[ipfix][packetDeltaCount]').to_i + event.get('[ipfix][reversePacketDeltaCount]').to_i )
            "
          }
        } else {
          mutate {
            id => "ipfix_add_packetDeltaCount"
            replace => { "[flow][packets]" => "%{[ipfix][packetDeltaCount]}" }
          }
        }
      } else if [ipfix][reversePacketDeltaCount] {
        mutate {
          id => "ipfix_add_reversePacketDeltaCount"
          replace => { "[flow][packets]" => "%{[ipfix][reversePacketDeltaCount]}" }
        }
      } else if [ipfix][initiatorPackets] {
        if [ipfix][responderPackets] {
          ruby {
            id => "ipfix_normalize_packets_from_initiatorPackets_responderPackets"
            code => "
              event.set( '[flow][packets]', event.get('[ipfix][initiatorPackets]').to_i + event.get('[ipfix][responderPackets]').to_i )
            "
          }
        } else {
          mutate {
            id => "ipfix_add_initiatorPackets"
            replace => { "[flow][packets]" => "%{[ipfix][initiatorPackets]}" }
          }
        }
      } else if [ipfix][responderPackets] {
        mutate {
          id => "ipfix_add_responderPackets"
          replace => { "[flow][packets]" => "%{[ipfix][responderPackets]}" }
        }
      }
    
    # If sampled IPFIX, adjust Bytes and Packets accordingly.
      # Workaround for sampled flows when the sampling interval is not set
      if ![flow][sampling_interval] {
        translate {
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/sampling_interval.yml"
          field => "[node][ipaddr]"
          destination => "[flow][sampling_interval]"
          fallback => "0"
          refresh_behaviour => "replace"
        }
        mutate {
          convert => { "[flow][sampling_interval]" => "integer" }
        }
      }
      
      if [flow][sampling_interval] {
        if [flow][bytes] and [flow][sampling_interval] > 0 {
          ruby {
            id => "ipfix_adjust_sampled_bytes"
            code => "
              event.set( '[flow][bytes]', event.get('[flow][bytes]').to_i * event.get('[flow][sampling_interval]').to_i )
            "
          }
        }
        if [flow][packets] and [flow][sampling_interval] > 0 {
          ruby {
            id => "ipfix_adjust_sampled_packets"
            code => "
              event.set( '[flow][packets]', event.get('[flow][packets]').to_i * event.get('[flow][sampling_interval]').to_i )
            "
          }
        }
      }

    # Populate normalized ElastiFlow fields for applications if available.
      if [ipfix][applicationName] {
        mutate {
          id => "ipfix_add_app_from_name"
          rename => { "[ipfix][applicationName]" => "[flow][application]" }
          remove_field => [ "[ipfix][applicationId]" ]
        }
      } else if [ipfix][applicationId] {
        if [ipfix][applicationId] =~ /^.*:[0-9]+$/ {
          mutate {
            id => "ipfix_convert_appid_to_v4"
            gsub => [ "[ipfix][applicationId]", ":", ".." ]
          }
        }

        if [ipfix][applicationId] != "0..0" {
          translate {
            id => "ipfix_get_appid_srctype"
            dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/app_id.srctype.yml"
            field => "[node][ipaddr]"
            destination => "[@metadata][appid_srctype]"
            fallback => "${ELASTIFLOW_DEFAULT_APPID_SRCTYPE:__UNKNOWN}"
            refresh_behaviour => "replace"
          }

          if [@metadata][appid_srctype] == "fortinet" {
            if [@metadata][appid_srctype] =~ /^[0-9]+\.\.[0-9]+\.\.[0-9]+$/ {
              mutate {
                id => "ipfix_normalize_fortinet_appids"
                gsub => [ "[ipfix][applicationId]", "[0-9]+\.\.[0-9]+\.\.", "0.." ]
              }
            }
          }

          if [@metadata][appid_srctype] != "__UNKNOWN" {
            mutate {
              id => "ipfix_set_appid_key"
              add_field => { "[@metadata][appid_key]" => "%{[@metadata][appid_srctype]}__%{[ipfix][applicationId]}" }
            }
            translate {
              id => "ipfix_add_app_from_id_srctype"
              dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/app_id.yml"
              field => "[@metadata][appid_key]"
              destination => "[flow][application]"
              fallback => "%{[ipfix][applicationId]}"
              refresh_behaviour => "replace"
            }
            mutate {
              id => "ipfix_remove_appid_unknown"
              remove_field => [ "[ipfix][applicationId]" ]
            }
          } else {
            mutate {
              id => "ipfix_add_app_from_id"
              rename => { "[ipfix][applicationId]" => "[flow][application]" }
            }
          }
        } else {
          mutate {
            id => "ipfix_remove_appid"
            remove_field => [ "[ipfix][applicationId]" ]
          }
        }
      } else if [ipfix][ixia_l7_app] {
        mutate {
          id => "ipfix_add_app_from_ixia_l7_app"
          rename => { "[ipfix][ixia_l7_app]" => "[flow][application]" }
        }
      } else if [ipfix][netscaler_app] {
        mutate {
          id => "ipfix_add_app_from_netscaler_app"
          rename => { "[ipfix][netscaler_app]" => "[flow][application]" }
        }
      } else if [ipfix][ntop_l7_proto_name] {
        mutate {
          id => "ipfix_add_app_from_ntop_l7_proto_name"
          rename => { "[ipfix][ntop_l7_proto_name]" => "[flow][application]" }
        }
      } else if [ipfix][pan_app] {
        mutate {
          id => "ipfix_add_app_from_pan_app"
          rename => { "[ipfix][pan_app]" => "[flow][application]" }
        }
      } else if [ipfix][ziften_command] {
        mutate {
          id => "ipfix_add_app_from_ziften_command"
          rename => { "[ipfix][ziften_command]" => "[flow][application]" }
        }
      } else if [ipfix][sophos_afc_proto] {
        translate {
          id => "ipfix_add_app_from_id_sophos"
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/sophos_app_id.yml"
          field => "[ipfix][sophos_afc_proto]"
          destination => "[flow][application]"
          fallback => "Sophos: %{[ipfix][sophos_afc_proto]}"
          refresh_behaviour => "replace"
        }
      } else if [ipfix][sonic_app] {
        mutate {
          id => "ipfix_add_app_from_sonic_app"
          rename => { "[ipfix][sonic_app]" => "[flow][application]" }
        }
      } else if [ipfix][sonic_app_id] {
        translate {
          id => "ipfix_add_app_from_id_sonicwall"
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/sonicwall_app_id.yml"
          field => "[ipfix][sonic_app_id]"
          destination => "[flow][application]"
          fallback => "SonicWall: %{[ipfix][sonic_app_id]}"
          refresh_behaviour => "replace"
        }
      }
  }
}
