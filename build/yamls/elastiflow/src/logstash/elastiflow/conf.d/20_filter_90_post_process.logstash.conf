#------------------------------------------------------------------------------
# Copyright (C)2019 Robert Cowart
# 
# The contents of this file and/or repository are subject to the Robert Cowart
# Public License (the "License") and may not be used or distributed except in
# compliance with the License. You may obtain a copy of the License at:
# 
# http://www.koiossian.com/public/robert_cowart_public_license.txt
# 
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
# the specific language governing rights and limitations under the License.
# 
# The Original Source Code was developed by Robert Cowart. Portions created by
# Robert Cowart are Copyright (C)2019 Robert Cowart. All Rights Reserved.
#------------------------------------------------------------------------------

filter {
  # We now have a normalized flow record. The rest of the logic works regardless of the flow type or version.

  # If IP Version not determined, do CIDR checks as a last attempt.
    if [flow][ip_version] == "undetermined" {
      # Determine IP version.
      if [flow][src_addr] {
        cidr {
          id => "elastiflow_ipv4_cidr_src"
          address => [ "%{[flow][src_addr]}" ]
          network => [ "0.0.0.0/0" ]
          add_field => {
            "[flow][ip_version]" => "IPv4"
          }
        }
        if ![flow][ip_version] {
          cidr {
            id => "elastiflow_ipv6_cidr_src"
            address => [ "%{[flow][src_addr]}" ]
            network => [ "::/0" ]
            add_field => {
              "[flow][ip_version]" => "IPv6"
            }
          }
        }
      } else if [flow][dst_addr] {
        cidr {
          id => "elastiflow_ipv4_cidr_dst"
          address => [ "%{[flow][dst_addr]}" ]
          network => [ "0.0.0.0/0" ]
          add_field => {
            "[flow][ip_version]" => "IPv4"
          }
        }
        if ![flow][ip_version] {
          cidr {
            id => "elastiflow_ipv6_cidr_dst"
            address => [ "%{[flow][dst_addr]}" ]
            network => [ "::/0" ]
            add_field => {
              "[flow][ip_version]" => "IPv6"
            }
          }
        }
      } else {
        mutate {
          id => "elastiflow_ipver_unknown_remove"
          remove_field => [ "[flow][ip_version]" ]
        }
      }
    }
    
  # If enabled, resolve names of source and destination IP addresses.
    if [flow][dst_addr] {
      # If localhost then use the IP from the host field.
      if [flow][dst_addr] == "127.0.0.1" {
        mutate {
          id => "elastiflow_dst_hostname_localhost"
          replace => { "[flow][dst_hostname]" => "%{[event][host]}" }
        }
      } else {
        mutate {
          id => "elastiflow_dst_hostname_addr"
          add_field => { "[flow][dst_hostname]" => "%{[flow][dst_addr]}"}
        }
      }
      # Resolve destination IP address to hostname.
      if [@metadata][resolve_ip2host] == "true" or [@metadata][resolve_ip2host] == "endpoints" {
        dns {
          id => "elastiflow_dns_dst_hostname"
          reverse => [ "[flow][dst_hostname]" ]
          action => "replace"
          nameserver => "${ELASTIFLOW_NAMESERVER:127.0.0.1}"
          hit_cache_size => "${ELASTIFLOW_DNS_HIT_CACHE_SIZE:25000}"
          hit_cache_ttl => "${ELASTIFLOW_DNS_HIT_CACHE_TTL:900}"
          failed_cache_size => "${ELASTIFLOW_DNS_FAILED_CACHE_SIZE:75000}"
          failed_cache_ttl => "${ELASTIFLOW_DNS_FAILED_CACHE_TTL:3600}"
        }
      }
    }

    if [flow][src_addr] {
      # If localhost then use the IP from the host field.
      if [flow][src_addr] == "127.0.0.1" {
        mutate {
          id => "elastiflow_src_hostname_localhost"
          replace => { "[flow][src_hostname]" => "%{[event][host]}" }
        }
      } else {
        mutate {
          id => "elastiflow_src_hostname_addr"
          add_field => { "[flow][src_hostname]" => "%{[flow][src_addr]}"}
        }
      }
      # Resolve source IP address to hostname.
      if [@metadata][resolve_ip2host] == "true" or [@metadata][resolve_ip2host] == "endpoints" {
        dns {
          id => "elastiflow_dns_src_hostname"
          reverse => [ "[flow][src_hostname]" ]
          action => "replace"
          nameserver => "${ELASTIFLOW_NAMESERVER:127.0.0.1}"
          hit_cache_size => "${ELASTIFLOW_DNS_HIT_CACHE_SIZE:25000}"
          hit_cache_ttl => "${ELASTIFLOW_DNS_HIT_CACHE_TTL:900}"
          failed_cache_size => "${ELASTIFLOW_DNS_FAILED_CACHE_SIZE:75000}"
          failed_cache_ttl => "${ELASTIFLOW_DNS_FAILED_CACHE_TTL:3600}"
        }
      }
    }

  # Determine the locality of the traffic and lookup GeoIP, ASN and IP Reputation information.
    if [flow][dst_addr] or [flow][src_addr] {
      # Initialize traffic_locality to private. This maybe changed to public based on analysis of the source and destination IP addresses below.
      mutate {
        id => "elastiflow_postproc_traffic_locality_default"
        add_field => { "[flow][traffic_locality]" => "private" }
      }

      if [flow][dst_addr] {
        # Check if destination IP address is private.
          cidr {
            id => "elastiflow_postproc_cidr_dst_addr"
            address => [ "%{[flow][dst_addr]}" ]
            network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128","169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32" ]
            add_field => { "[flow][dst_autonomous_system]" => "private" }
          }

        # Check to see if dst_autonomous_system exists. If it doesn't the dst_addr didn't match a private address space and must be public.
          if ![flow][dst_autonomous_system] {
            mutate {
              id => "elastiflow_postproc_dst_addr_public"
              replace => { "[flow][traffic_locality]" => "public" }
            }

            # If enabled lookup destination GeoIP location.
              if [@metadata][geoip_lookup] == "true" {
                geoip {
                  id => "elastiflow_postproc_geoip_dst_city"
                  source => "[flow][dst_addr]"
                  database => "${ELASTIFLOW_GEOIP_DB_PATH:/etc/logstash/elastiflow/geoipdbs}/GeoLite2-City.mmdb"
                  cache_size => "${ELASTIFLOW_GEOIP_CACHE_SIZE:8192}"
                  target => "[metadata][geoip_dst]"
                  fields => [ "city_name", "country_name", "country_code2", "location" ]
                }
                if "_geoip_lookup_failure" not in [tags] {
                  mutate {
                    rename => {
                      "[metadata][geoip_dst][city_name]" => "[flow][dst_city]"
                      "[metadata][geoip_dst][country_name]" => "[flow][dst_country]"
                      "[metadata][geoip_dst][country_code2]" => "[flow][dst_country_code]"
                      "[metadata][geoip_dst][location]" => "[flow][dst_geo_location]"
                    }
                  }
                  if [flow][dst_city] {
                    mutate {
                      add_field => { "[flow][city]" => "%{[flow][dst_city]}" }
                    }
                  }
                  if [flow][dst_country] {
                    mutate {
                      add_field => { "[flow][country]" => "%{[flow][dst_country]}" }
                    }
                  }
                  if [flow][dst_country_code] {
                    mutate {
                      add_field => { "[flow][country_code]" => "%{[flow][dst_country_code]}" }
                    }
                  }
                } else {
                  mutate {
                    remove_tag => [ "_geoip_lookup_failure" ]
                  }
                }
              }

            # If enabled lookup destination Autonomous System.
              if [@metadata][asn_lookup] == "true" {
                # Lookup destination Autonomous System.
                geoip {
                  id => "elastiflow_postproc_geoip_dst_asn"
                  source => "[flow][dst_addr]"
                  database => "${ELASTIFLOW_GEOIP_DB_PATH:/etc/logstash/elastiflow/geoipdbs}/GeoLite2-ASN.mmdb"
                  cache_size => "${ELASTIFLOW_GEOIP_CACHE_SIZE:8192}"
                  target => "[metadata][geoip_dst]"
                }
                # Populate dst_autonomous_system.
                if "_geoip_lookup_failure" not in [tags] {
                  if [metadata][geoip_dst][as_org] {
                    if [metadata][geoip_dst][asn] {
                      mutate {
                        id => "elastiflow_postproc_dst_as_from_as_org_asn"
                        add_field => { "[flow][dst_autonomous_system]" => "%{[metadata][geoip_dst][as_org]} (%{[metadata][geoip_dst][asn]})" }
                      }
                    } else {
                      mutate {
                        id => "elastiflow_postproc_dst_as_from_as_org"
                        add_field => { "[flow][dst_autonomous_system]" => "%{[metadata][geoip_dst][as_org]}" }
                      }
                    }
                  } else if [metadata][geoip_dst][asn] {
                    mutate {
                      id => "elastiflow_postproc_dst_as_from_asn"
                      add_field => { "[flow][dst_autonomous_system]" => "%{[metadata][geoip_dst][asn]}" }
                    }
                  } else {
                    mutate {
                      add_field => { "[flow][dst_autonomous_system]" => "public" }
                    }
                  }
                  mutate {
                    id => "elastiflow_set_dst_asn"
                    rename => { "[metadata][geoip_dst][asn]" => "[flow][dst_asn]" }
                  }
                } else {
                  mutate {
                    add_field => { "[flow][dst_autonomous_system]" => "public" }
                    remove_tag => [ "_geoip_lookup_failure" ]
                  }
                }
              } else {
                mutate {
                  id => "elastiflow_postproc_no_dst_asn_lookup"
                  add_field => { "[flow][dst_autonomous_system]" => "public" }
                }
              }
              mutate {
                add_field => {
                  "[flow][autonomous_system]" => "%{[flow][dst_autonomous_system]}"
                }
              }

            # Lookup destination IP reputation.
              # Check if the IP is whitelisted for reuptation scoring.
              translate {
                id => "elastiflow_public_dst_is_whitelist"
                dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/ip_rep_whitelist.yml"
                field => "[flow][dst_addr]"
                destination => "[@metadata][dst_whitelist]"
                fallback => "false"
                refresh_behaviour => "replace"
              }
              # If not whitelisted, lookup the IP reputation.
              if [@metadata][dst_whitelist] == "false" {
                translate {
                  id => "elastiflow_public_dst_rep_label"
                  dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/ip_rep_basic.yml"
                  field => "[flow][dst_addr]"
                  destination => "[@metadata][dst_rep_label]"
                  refresh_behaviour => "replace"
                }
                # Parse the IP reputation lable into tags.
                if [@metadata][dst_rep_label] {
                  ruby {
                    id => "elastiflow_public_dst_rep_tags"
                    init => "
                      require 'csv'
                    "
                    code => "
                      event.set('[flow][dst_rep_tags]', event.get('[@metadata][dst_rep_label]').parse_csv)
                    "
                  }
                }
              }
          }
      }

      if [flow][src_addr] {
        # Check if source IP address is private.
          cidr {
            id => "elastiflow_postproc_cidr_src_addr"
            address => [ "%{[flow][src_addr]}" ]
            network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128", "169.254.0.0/16", "fe80::/10", "224.0.0.0/4", "ff00::/8", "255.255.255.255/32", "::" ]
            add_field => { "[flow][src_autonomous_system]" => "private" }
          }

        # Check to see if src_autonomous_system exists. If it doesn't the src_addr didn't match a private address space and locality must be public.
          if ![flow][src_autonomous_system] {
            mutate {
              id => "elastiflow_postproc_src_addr_public"
              replace => { "[flow][traffic_locality]" => "public" }
            }

            # If enabled lookup source GeoIP location.
              if [@metadata][geoip_lookup] == "true" {
                geoip {
                  id => "elastiflow_postproc_geoip_src_city"
                  source => "[flow][src_addr]"
                  database => "${ELASTIFLOW_GEOIP_DB_PATH:/etc/logstash/elastiflow/geoipdbs}/GeoLite2-City.mmdb"
                  cache_size => "${ELASTIFLOW_GEOIP_CACHE_SIZE:8192}"
                  target => "[metadata][geoip_src]"
                  fields => [ "city_name", "country_name", "country_code2", "location" ]
                }
                if "_geoip_lookup_failure" not in [tags] {
                  mutate {
                    rename => {
                      "[metadata][geoip_src][city_name]" => "[flow][src_city]"
                      "[metadata][geoip_src][country_name]" => "[flow][src_country]"
                      "[metadata][geoip_src][country_code2]" => "[flow][src_country_code]"
                      "[metadata][geoip_src][location]" => "[flow][src_geo_location]"
                    }
                  }
                  if [flow][src_city] {
                    mutate {
                      add_field => { "[flow][city]" => "%{[flow][src_city]}" }
                    }
                  }
                  if [flow][src_country] {
                    mutate {
                      add_field => { "[flow][country]" => "%{[flow][src_country]}" }
                    }
                  }
                  if [flow][src_country_code] {
                    mutate {
                      add_field => { "[flow][country_code]" => "%{[flow][src_country_code]}" }
                    }
                  }
                }
              }

            # If enabled lookup the source Autonomous System.
              if [@metadata][asn_lookup] == "true" {
                geoip {
                  id => "elastiflow_postproc_geoip_src_asn"
                  source => "[flow][src_addr]"
                  database => "${ELASTIFLOW_GEOIP_DB_PATH:/etc/logstash/elastiflow/geoipdbs}/GeoLite2-ASN.mmdb"
                  cache_size => "${ELASTIFLOW_GEOIP_CACHE_SIZE:8192}"
                  target => "[metadata][geoip_src]"
                }
                # Populate src_autonomous_system.
                if "_geoip_lookup_failure" not in [tags] {
                  if [metadata][geoip_src][as_org] {
                    if [metadata][geoip_src][asn] {
                      mutate {
                        id => "elastiflow_postproc_src_as_from_as_org_asn"
                        add_field => { "[flow][src_autonomous_system]" => "%{[metadata][geoip_src][as_org]} (%{[metadata][geoip_src][asn]})" }
                      }
                    } else {
                      mutate {
                        id => "elastiflow_postproc_src_as_from_as_org"
                        add_field => { "[flow][src_autonomous_system]" => "%{[metadata][geoip_src][as_org]}" }
                      }
                    }
                  } else if [metadata][geoip_src][asn] {
                    mutate {
                      id => "elastiflow_postproc_src_as_from_asn"
                      add_field => { "[flow][src_autonomous_system]" => "%{[metadata][geoip_src][asn]}" }
                    }
                  } else {
                    mutate {
                      add_field => { "[flow][src_autonomous_system]" => "public" }
                    }
                  }
                  mutate {
                    id => "elastiflow_set_src_asn"
                    rename => { "[metadata][geoip_src][asn]" => "[flow][src_asn]" }
                  }
                } else {
                  mutate {
                    add_field => { "[flow][src_autonomous_system]" => "public" }
                    remove_tag => [ "_geoip_lookup_failure" ]
                  }
                }
              } else {
                mutate {
                  id => "elastiflow_postproc_no_src_asn_lookup"
                  add_field => { "[flow][src_autonomous_system]" => "public" }
                }
              }
              mutate {
                add_field => {
                  "[flow][autonomous_system]" => "%{[flow][src_autonomous_system]}"
                }
              }
            
            # Lookup source IP reputation.
              # Check if the IP is whitelisted for reuptation scoring.
              translate {
                id => "elastiflow_public_src_is_whitelist"
                dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/ip_rep_whitelist.yml"
                field => "[flow][src_addr]"
                destination => "[@metadata][src_whitelist]"
                fallback => "false"
                refresh_behaviour => "replace"
              }
              # If not whitelisted, lookup the IP reputation.
              if [@metadata][src_whitelist] == "false" {
                translate {
                  id => "elastiflow_public_src_rep_label"
                  dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/ip_rep_basic.yml"
                  field => "[flow][src_addr]"
                  destination => "[@metadata][src_rep_label]"
                  refresh_behaviour => "replace"
                }
                # Parse the IP reputation lable into tags.
                if [@metadata][src_rep_label] {
                  ruby {
                    id => "elastiflow_public_src_rep_tags"
                    init => "
                      require 'csv'
                    "
                    code => "
                      event.set('[flow][src_rep_tags]', event.get('[@metadata][src_rep_label]').parse_csv)
                    "
                  }
                }
              }
          }
      }

      # Cleanup any GeoIP lookup failure tag.
        if "_geoip_lookup_failure" in [tags] {
          mutate {
            id => "elastiflow_cleanup_geoip_fail_tag"
            remove_tag => [ "_geoip_lookup_failure" ]
          }
        }

      # Merge reputation tags.
        ruby {
          id => "elastiflow_merge_rep_tags"
          init => "
            require 'csv'
          "
          code => "
            src_tags = event.get('[@metadata][src_rep_label]')
            dst_tags = event.get('[@metadata][dst_rep_label]')

            if (src_tags)
              rep_tags = src_tags
              if (dst_tags)
                rep_tags = rep_tags << ',' << dst_tags
              end
            else (dst_tags)
              rep_tags = dst_tags
            end

            if (rep_tags)
              event.set('[flow][rep_tags]', rep_tags.parse_csv )
            end
          "
        }
    }
  
  # IP traffic processing.
    if [flow][ip_protocol] {
      # lookup IANA service name for source and destination ports.
        if [flow][ip_protocol] == 6 { # TCP
          if [flow][src_port] {
            translate {
              id => "elastiflow_postproc_translate_src_port_name_tcp"
              dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/iana_service_names_tcp.yml"
              field => "[flow][src_port]"
              destination => "[flow][src_port_name]"
              fallback => "__UNKNOWN"
              refresh_behaviour => "replace"
            }
          }
          if [flow][dst_port] {
            translate {
              id => "elastiflow_postproc_translate_dst_port_name_tcp"
              dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/iana_service_names_tcp.yml"
              field => "[flow][dst_port]"
              destination => "[flow][dst_port_name]"
              fallback => "__UNKNOWN"
              refresh_behaviour => "replace"
            }
          }
        } else if [flow][ip_protocol] == 17 { # UDP
          if [flow][src_port] {
            translate {
              id => "elastiflow_postproc_translate_src_port_name_udp"
              dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/iana_service_names_udp.yml"
              field => "[flow][src_port]"
              destination => "[flow][src_port_name]"
              fallback => "__UNKNOWN"
              refresh_behaviour => "replace"
            }
          }
          if [flow][dst_port] {
            translate {
              id => "elastiflow_postproc_translate_dst_port_name_udp"
              dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/iana_service_names_udp.yml"
              field => "[flow][dst_port]"
              destination => "[flow][dst_port_name]"
              fallback => "__UNKNOWN"
              refresh_behaviour => "replace"
            }
          }
        } else if [flow][ip_protocol] == 132 { # SCTP
          if [flow][src_port] {
            translate {
              id => "elastiflow_postproc_translate_src_port_name_sctp"
              dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/iana_service_names_sctp.yml"
              field => "[flow][src_port]"
              destination => "[flow][src_port_name]"
              fallback => "__UNKNOWN"
              refresh_behaviour => "replace"
            }
          }
          if [flow][dst_port] {
            translate {
              id => "elastiflow_postproc_translate_dst_port_name_sctp"
              dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/iana_service_names_sctp.yml"
              field => "[flow][dst_port]"
              destination => "[flow][dst_port_name]"
              fallback => "__UNKNOWN"
              refresh_behaviour => "replace"
            }
          }
        } else if [flow][ip_protocol] == 33 { # DCCP
          if [flow][src_port] {
            translate {
              id => "elastiflow_postproc_translate_src_port_name_dccp"
              dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/iana_service_names_dccp.yml"
              field => "[flow][src_port]"
              destination => "[flow][src_port_name]"
              fallback => "__UNKNOWN"
              refresh_behaviour => "replace"
            }
          }
          if [flow][dst_port] {
            translate {
              id => "elastiflow_postproc_translate_dst_port_name_dccp"
              dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/iana_service_names_dccp.yml"
              field => "[flow][dst_port]"
              destination => "[flow][dst_port_name]"
              fallback => "__UNKNOWN"
              refresh_behaviour => "replace"
            }
          }
        } else {
          mutate {
            add_field => {
              "[flow][src_port_name]" => "__UNKNOWN"
              "[flow][dst_port_name]" => "__UNKNOWN"
            }
          }
        }

      # Ensure port numbers are integers.
        mutate {
          id => "elastiflow_postproc_convert_ports_to_int"
          convert => {
            "[flow][src_port]" => "integer"
            "[flow][dst_port]" => "integer"
          }
        }

      # Determine client and server from source and destination ports.
        if ![@metadata][isServer] {
          if [flow][dst_port] and [flow][src_port] {
            if [flow][tcp_flags] == 2 or [conn][tcp_flags] == 6 {
              mutate {
                id => "elastiflow_postproc_tcp_flags_dstIsSrv"
                add_field => { "[@metadata][isServer]" => "dst" }
              }
            } else if [flow][src_port_name] == "__UNKNOWN" {
              if [flow][dst_port_name] == "__UNKNOWN" {
                if [flow][dst_port] <= [flow][src_port] {
                  mutate {
                    id => "elastiflow_postproc_srcUn_dstUn_dstIsSrv"
                    add_field => { "[@metadata][isServer]" => "dst" }
                  }
                } else {
                  mutate {
                    id => "elastiflow_postproc_srcUn_dstUn_srcIsSrv"
                    add_field => { "[@metadata][isServer]" => "src" }
                  }
                }
              } else {
                mutate {
                  id => "elastiflow_postproc_srcUn_dstKn_dstIsSrv"
                  add_field => { "[@metadata][isServer]" => "dst" }
                }
              }
            } else {
              if [flow][dst_port_name] == "__UNKNOWN" {
                mutate {
                  id => "elastiflow_postproc_srcKn_dstUn_srcIsSrv"
                  add_field => { "[@metadata][isServer]" => "src" }
                }
              } else {
                if [flow][dst_port] <= [flow][src_port] {
                  mutate {
                    id => "elastiflow_postproc_srcKn_dstKn_dstIsSrv"
                    add_field => { "[@metadata][isServer]" => "dst" }
                  }
                } else {
                  mutate {
                    id => "elastiflow_postproc_srcKn_dstKn_srcIsSrv"
                    add_field => { "[@metadata][isServer]" => "src" }
                  }
                }
              }
            }
          }
        }

      # Replace protocol ID with well-known name.
        translate {
          id => "elastiflow_postproc_translate_protocol_name"
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/iana_protocol_numbers.yml"
          field => "[flow][ip_protocol]"
          destination => "[flow][ip_protocol]"
          fallback => "UNKNOWN(%{[flow][ip_protocol]})"
          override => true
          refresh_behaviour => "replace"
        }

      # Set final value of port name fields.
        if [flow][src_port_name] {
          if [flow][src_port_name] == "__UNKNOWN" {
            if [flow][src_port] {
              mutate {
                id => "elastiflow_postproc_src_port_name_unknown"
                replace => { "[flow][src_port_name]" => "%{[flow][ip_protocol]}/%{[flow][src_port]}" }
              }
            } else {
              mutate {
                id => "elastiflow_postproc_src_port_name_unknown_port_0"
                replace => { "[flow][src_port_name]" => "%{[flow][ip_protocol]}/0" }
              }
            }
          } else {
            mutate {
              id => "elastiflow_postproc_src_port_name_prepend_src_port"
              replace => { "[flow][src_port_name]" => "%{[flow][src_port_name]} (%{[flow][ip_protocol]}/%{[flow][src_port]})" }
            }
          }
        }
        if [flow][dst_port_name] {
          if [flow][dst_port_name] == "__UNKNOWN" {
            if [flow][dst_port] {
              mutate {
                id => "elastiflow_postproc_dst_port_name_unknown"
                replace => { "[flow][dst_port_name]" => "%{[flow][ip_protocol]}/%{[flow][dst_port]}" }
              }
            } else {
              mutate {
                id => "elastiflow_postproc_dst_port_name_unknown_port_0"
                replace => { "[flow][dst_port_name]" => "%{[flow][ip_protocol]}/0" }
              }
            }
          } else {
            mutate {
              id => "elastiflow_postproc_dest_port_name_prepend_dst_port"
              replace => { "[flow][dst_port_name]" => "%{[flow][dst_port_name]} (%{[flow][ip_protocol]}/%{[flow][dst_port]})" }
            }
          }
        }

      # Set client, server and service fields.
        if [@metadata][isServer] == "dst" {
          mutate {
            id => "elastiflow_postproc_dstIsSrv_add_fields"
            add_field => {
              "[flow][server_addr]" => "%{[flow][dst_addr]}"
              "[flow][server_hostname]" => "%{[flow][dst_hostname]}"
              "[flow][server_autonomous_system]" => "%{[flow][dst_autonomous_system]}"
              "[flow][service_port]" => "%{[flow][dst_port]}"
              "[flow][service_name]" => "%{[flow][dst_port_name]}"
              "[flow][client_addr]" => "%{[flow][src_addr]}"
              "[flow][client_hostname]" => "%{[flow][src_hostname]}"
              "[flow][client_autonomous_system]" => "%{[flow][src_autonomous_system]}"
            }
          }
          if [@metadata][dst_rep_label] {
            ruby {
              id => "elastiflow_dst_is_server_add_server_rep_tags"
              init => "
                require 'csv'
              "
              code => "
                event.set('[flow][server_rep_tags]', event.get('[@metadata][dst_rep_label]').parse_csv)
              "
            }
          }
          if [flow][dst_autonomous_system] != "private" {
            if [flow][dst_city] {
              mutate {
                id => "elastiflow_postproc_dstIsSrv_add_dst_city"
                add_field => { "[flow][server_city]" => "%{[flow][dst_city]}" }
              }
            }
            if [flow][dst_country] {
              mutate {
                id => "elastiflow_postproc_dstIsSrv_add_dst_country"
                add_field => { "[flow][server_country]" => "%{[flow][dst_country]}" }
              }
            }
            if [flow][dst_country_code] {
              mutate {
                id => "elastiflow_postproc_dstIsSrv_add_dst_country_code"
                add_field => { "[flow][server_country_code]" => "%{[flow][dst_country_code]}" }
              }
            }
            if [flow][dst_geo_location] {
              mutate {
                id => "elastiflow_postproc_dstIsSrv_add_dst_geo_location"
                add_field => { "[flow][server_geo_location]" => "%{[flow][dst_geo_location][lat]},%{[flow][dst_geo_location][lon]}" }
              }
            }
            if [flow][dst_asn] {
              mutate {
                id => "elastiflow_postproc_dstIsSrv_add_dst_asn"
                add_field => { "[flow][server_asn]" => "%{[flow][dst_asn]}" }
              }
            }
          }
          if [@metadata][src_rep_label] {
            ruby {
              id => "elastiflow_dst_is_server_add_client_rep_tags"
              init => "
                require 'csv'
              "
              code => "
                event.set('[flow][client_rep_tags]', event.get('[@metadata][src_rep_label]').parse_csv)
              "
            }
          }
          if [flow][src_autonomous_system] != "private" {
            if [flow][src_city] {
              mutate {
                id => "elastiflow_postproc_dstIsSrv_add_src_src_city"
                add_field => { "[flow][client_city]" => "%{[flow][src_city]}" }
              }
            }
            if [flow][src_country] {
              mutate {
                id => "elastiflow_postproc_dstIsSrv_add_src_country"
                add_field => { "[flow][client_country]" => "%{[flow][src_country]}" }
              }
            }
            if [flow][src_country_code] {
              mutate {
                id => "elastiflow_postproc_dstIsSrv_add_src_country_code"
                add_field => { "[flow][client_country_code]" => "%{[flow][src_country_code]}" }
              }
            }
            if [flow][src_geo_location] {
              mutate {
                id => "elastiflow_postproc_dstIsSrv_add_src_geo_location"
                add_field => { "[flow][client_geo_location]" => "%{[flow][src_geo_location][lat]},%{[flow][src_geo_location][lon]}" }
              }
            }
            if [flow][src_asn] {
              mutate {
                id => "elastiflow_postproc_dstIsSrv_add_src_asn"
                add_field => { "[flow][client_asn]" => "%{[flow][src_asn]}" }
              }
            }
          }
        } else if [@metadata][isServer] == "src" {
          mutate {
            id => "elastiflow_postproc_srcIsSrv_add_fields"
            add_field => {
              "[flow][server_addr]" => "%{[flow][src_addr]}"
              "[flow][server_hostname]" => "%{[flow][src_hostname]}"
              "[flow][server_autonomous_system]" => "%{[flow][src_autonomous_system]}"
              "[flow][service_port]" => "%{[flow][src_port]}"
              "[flow][service_name]" => "%{[flow][src_port_name]}"
              "[flow][client_addr]" => "%{[flow][dst_addr]}"
              "[flow][client_hostname]" => "%{[flow][dst_hostname]}"
              "[flow][client_autonomous_system]" => "%{[flow][dst_autonomous_system]}"
            }
          }
          if [@metadata][src_rep_label] {
            ruby {
              id => "elastiflow_src_is_server_add_server_rep_tags"
              init => "
                require 'csv'
              "
              code => "
                event.set('[flow][server_rep_tags]', event.get('[@metadata][src_rep_label]').parse_csv)
              "
            }
          }
          if [flow][dst_autonomous_system] != "private" {
            if [flow][dst_city] {
              mutate {
                id => "elastiflow_postproc_srcIsSrv_add_dst_city"
                add_field => { "[flow][client_city]" => "%{[flow][dst_city]}" }
              }
            }
            if [flow][dst_country] {
              mutate {
                id => "elastiflow_postproc_srcIsSrv_add_dst_country"
                add_field => { "[flow][client_country]" => "%{[flow][dst_country]}" }
              }
            }
            if [flow][dst_country_code] {
              mutate {
                id => "elastiflow_postproc_srcIsSrv_add_dst_country_code"
                add_field => { "[flow][client_country_code]" => "%{[flow][dst_country_code]}" }
              }
            }
            if [flow][dst_geo_location] {
              mutate {
                id => "elastiflow_postproc_srcIsSrv_add_dst_geo_location"
                add_field => { "[flow][client_geo_location]" => "%{[flow][dst_geo_location][lat]},%{[flow][dst_geo_location][lon]}" }
              }
            }
            if [flow][dst_asn] {
              mutate {
                id => "elastiflow_postproc_srcIsSrv_add_dst_asn"
                add_field => { "[flow][client_asn]" => "%{[flow][dst_asn]}" }
              }
            }
          }
          if [@metadata][dst_rep_label] {
            ruby {
              id => "elastiflow_src_is_server_add_client_rep_tags"
              init => "
                require 'csv'
              "
              code => "
                event.set('[flow][client_rep_tags]', event.get('[@metadata][dst_rep_label]').parse_csv)
              "
            }
          }
          if [flow][src_autonomous_system] != "private" {
            if [flow][src_city] {
              mutate {
                id => "elastiflow_postproc_srcIsSrv_add_src_autonomous_system"
                add_field => { "[flow][server_city]" => "%{[flow][src_city]}" }
              }
            }
            if [flow][src_country] {
              mutate {
                id => "elastiflow_postproc_srcIsSrv_add_src_country"
                add_field => { "[flow][server_country]" => "%{[flow][src_country]}" }
              }
            }
            if [flow][src_country_code] {
              mutate {
                id => "elastiflow_postproc_srcIsSrv_add_src_country_code"
                add_field => { "[flow][server_country_code]" => "%{[flow][src_country_code]}" }
              }
            }
            if [flow][src_geo_location] {
              mutate {
                id => "elastiflow_postproc_srcIsSrv_add_src_geo_location"
                add_field => { "[flow][server_geo_location]" => "%{[flow][src_geo_location][lat]},%{[flow][src_geo_location][lon]}" }
              }
            }
            if [flow][src_asn] {
              mutate {
                id => "elastiflow_postproc_srcIsSrv_add_src_asn"
                add_field => { "[flow][server_asn]" => "%{[flow][src_asn]}" }
              }
            }
          }
        }
    }

  # Process TCP flags.
    if [flow][tcp_flags] {
      if [flow][ip_protocol] == "TCP" {
        if [flow][tcp_flags] > 0 {
          # Create array of TCP flag tags.
          ruby {
            id => "elastiflow_postproc_ruby_tcp_flags_tags"
            code => "
              flags =[]
              if event.get('[flow][tcp_flags]').to_i & 1 > 0
                flags.push('FIN')
              end
              if event.get('[flow][tcp_flags]').to_i & 2 > 0
                flags.push('SYN')
              end
              if event.get('[flow][tcp_flags]').to_i & 4 > 0
                flags.push('RST')
              end
              if event.get('[flow][tcp_flags]').to_i & 8 > 0
                flags.push('PSH')
              end
              if event.get('[flow][tcp_flags]').to_i & 16 > 0
                flags.push('ACK')
              end
              if event.get('[flow][tcp_flags]').to_i & 32 > 0
                flags.push('URG')
              end
              if event.get('[flow][tcp_flags]').to_i & 64 > 0
                flags.push('ECE')
              end
              if event.get('[flow][tcp_flags]').to_i & 128 > 0
                flags.push('CWR')
              end
              event.set('[flow][tcp_flags]', flags)
            "
          }
        } else {
          mutate {
            replace => { "[flow][tcp_flags]" => "none" }
          }
        }
      } else {
        mutate {
          remove_field => [ "[flow][tcp_flags]" ]
        }
      }
    }

  # Populate interface names from dictionary if enabled.
    if [flow][input_snmp] {
      mutate {
        id => "elastiflow_postproc_translate_in_if_key"
        add_field => { "[@metadata][in_if_key]" => "%{[node][ipaddr]}::ifName.%{[flow][input_snmp]}" }
      }
      translate {
        id => "elastiflow_postproc_translate_input_ifname"
        dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/ifName.yml"
        field => "[@metadata][in_if_key]"
        destination => "[flow][input_ifname]"
        fallback => "index: %{[flow][input_snmp]}"
        refresh_behaviour => "replace"
      }
    }
    if [flow][output_snmp] {
      mutate {
        id => "elastiflow_postproc_translate_out_if_key"
        add_field => { "[@metadata][out_if_key]" => "%{[node][ipaddr]}::ifName.%{[flow][output_snmp]}" }
      }
      translate {
        id => "elastiflow_postproc_translate_output_ifname"
        dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/ifName.yml"
        field => "[@metadata][out_if_key]"
        destination => "[flow][output_ifname]"
        fallback => "index: %{[flow][output_snmp]}"
        refresh_behaviour => "replace"
      }
    }

  # Remove remaining original data if configured not to keep it.
    if [@metadata][keep_orig_data] == "false" {
      mutate {
        id => "elastiflow_postproc_remove_orig_data"
        remove_field => [ "ipfix", "netflow", "sflow" ]
      }
    }

  # Cleanup metadata object.
    mutate {
      id => "elastiflow_postproc_remove_metadata"
      remove_field => [ "[metadata]" ]
    }
}
