# The configuration file is for logstash to receive and process flow records
# it will start a udp listener to receive and decode records using definitions in ipfix.yml,
# filter the flow records for bytes & packets and output to elasticsearch.

input {
  udp {
    host => "0.0.0.0"
    port => "4739"
    workers => "4"
    queue_size => "2048"
    receive_buffer_bytes => "16777216"
    codec => netflow {
      versions => [10]
      target => "ipfix"
      include_flowset_id => "true"
      cache_ttl => 86400
      ipfix_definitions => "/usr/share/logstash/definitions/ipfix.yml"
    }
    type => "ipfix"
  }
}

filter {
    # process bytes and packets
    if [ipfix][octetDeltaCount] {
        ruby {
            code =>  "event.set( '[ipfix][bytes]', event.get('[ipfix][octetDeltaCount]').to_i + event.get('[ipfix][reverseOctetDeltaCount]').to_i )"
        }
    } else {
        mutate {
            replace => { "[ipfix][bytes]" => "%{[ipfix][octetDeltaCount]}" }
        }
    }
    if [ipfix][packetDeltaCount] {
        ruby {
            code =>  "event.set( '[ipfix][packets]', event.get('[ipfix][packetDeltaCount]').to_i + event.get('[ipfix][reversePacketDeltaCount]').to_i )"
        }
    } else {
        mutate {
            replace => { "[ipfix][packets]" => "%{[ipfix][reversePacketDeltaCount]}" }
        }
    }
    ruby {
        code => '
            if event.get("[ipfix][ingressNetworkPolicyName]") == ""
                event.remove("[ipfix][ingressNetworkPolicyName]")
                event.set("[ipfix][ingressNetworkPolicyName]", "N/A")
            end
            if event.get("[ipfix][ingressNetworkPolicyNamespace]") == ""
                event.remove("[ipfix][ingressNetworkPolicyNamespace]")
                event.set("[ipfix][ingressNetworkPolicyNamespace]", "N/A")
            end
            if event.get("[ipfix][egressNetworkPolicyName]") == ""
                event.remove("[ipfix][egressNetworkPolicyName]")
                event.set("[ipfix][egressNetworkPolicyName]", "N/A")
            end
            if event.get("[ipfix][egressNetworkPolicyNamespace]") == ""
                event.remove("[ipfix][egressNetworkPolicyNamespace]")
                event.set("[ipfix][egressNetworkPolicyNamespace]", "N/A")
            end
        '
    }
    mutate {
        convert => { "[ipfix][bytes]" => "integer" }
    }
}

output {
  elasticsearch {
    hosts => [ "elasticsearch:9200" ]
    ssl => "false"
    ssl_certificate_verification => "false"
    index => "flow-%{+YYYY.MM.dd}"
  }
  stdout {codec => rubydebug}
}
