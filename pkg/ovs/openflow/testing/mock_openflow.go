// Copyright 2020 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/antrea/pkg/ovs/openflow (interfaces: Bridge,Table,Flow,Action,FlowBuilder)

// Package testing is a generated GoMock package.
package testing

import (
	ofctrl "github.com/contiv/ofnet/ofctrl"
	gomock "github.com/golang/mock/gomock"
	openflow "github.com/vmware-tanzu/antrea/pkg/ovs/openflow"
	net "net"
	reflect "reflect"
)

// MockBridge is a mock of Bridge interface
type MockBridge struct {
	ctrl     *gomock.Controller
	recorder *MockBridgeMockRecorder
}

// MockBridgeMockRecorder is the mock recorder for MockBridge
type MockBridgeMockRecorder struct {
	mock *MockBridge
}

// NewMockBridge creates a new mock instance
func NewMockBridge(ctrl *gomock.Controller) *MockBridge {
	mock := &MockBridge{ctrl: ctrl}
	mock.recorder = &MockBridgeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBridge) EXPECT() *MockBridgeMockRecorder {
	return m.recorder
}

// AddFlowsInBundle mocks base method
func (m *MockBridge) AddFlowsInBundle(arg0, arg1, arg2 []openflow.Flow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFlowsInBundle", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFlowsInBundle indicates an expected call of AddFlowsInBundle
func (mr *MockBridgeMockRecorder) AddFlowsInBundle(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowsInBundle", reflect.TypeOf((*MockBridge)(nil).AddFlowsInBundle), arg0, arg1, arg2)
}

// AddOFEntriesInBundle mocks base method
func (m *MockBridge) AddOFEntriesInBundle(arg0, arg1, arg2 []openflow.OFEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOFEntriesInBundle", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOFEntriesInBundle indicates an expected call of AddOFEntriesInBundle
func (mr *MockBridgeMockRecorder) AddOFEntriesInBundle(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOFEntriesInBundle", reflect.TypeOf((*MockBridge)(nil).AddOFEntriesInBundle), arg0, arg1, arg2)
}

// Connect mocks base method
func (m *MockBridge) Connect(arg0 int, arg1 chan struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockBridgeMockRecorder) Connect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockBridge)(nil).Connect), arg0, arg1)
}

// CreateGroup mocks base method
func (m *MockBridge) CreateGroup(arg0 openflow.GroupIDType) openflow.Group {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0)
	ret0, _ := ret[0].(openflow.Group)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockBridgeMockRecorder) CreateGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockBridge)(nil).CreateGroup), arg0)
}

// CreateTable mocks base method
func (m *MockBridge) CreateTable(arg0, arg1 openflow.TableIDType, arg2 openflow.MissActionType) openflow.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", arg0, arg1, arg2)
	ret0, _ := ret[0].(openflow.Table)
	return ret0
}

// CreateTable indicates an expected call of CreateTable
func (mr *MockBridgeMockRecorder) CreateTable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockBridge)(nil).CreateTable), arg0, arg1, arg2)
}

// DeleteFlowsByCookie mocks base method
func (m *MockBridge) DeleteFlowsByCookie(arg0, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlowsByCookie", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFlowsByCookie indicates an expected call of DeleteFlowsByCookie
func (mr *MockBridgeMockRecorder) DeleteFlowsByCookie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowsByCookie", reflect.TypeOf((*MockBridge)(nil).DeleteFlowsByCookie), arg0, arg1)
}

// DeleteGroup mocks base method
func (m *MockBridge) DeleteGroup(arg0 openflow.GroupIDType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup
func (mr *MockBridgeMockRecorder) DeleteGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockBridge)(nil).DeleteGroup), arg0)
}

// DeleteTable mocks base method
func (m *MockBridge) DeleteTable(arg0 openflow.TableIDType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTable", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteTable indicates an expected call of DeleteTable
func (mr *MockBridgeMockRecorder) DeleteTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTable", reflect.TypeOf((*MockBridge)(nil).DeleteTable), arg0)
}

// Disconnect mocks base method
func (m *MockBridge) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect
func (mr *MockBridgeMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockBridge)(nil).Disconnect))
}

// DumpFlows mocks base method
func (m *MockBridge) DumpFlows(arg0, arg1 uint64) map[uint64]*openflow.FlowStates {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpFlows", arg0, arg1)
	ret0, _ := ret[0].(map[uint64]*openflow.FlowStates)
	return ret0
}

// DumpFlows indicates an expected call of DumpFlows
func (mr *MockBridgeMockRecorder) DumpFlows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpFlows", reflect.TypeOf((*MockBridge)(nil).DumpFlows), arg0, arg1)
}

// DumpTableStatus mocks base method
func (m *MockBridge) DumpTableStatus() []openflow.TableStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpTableStatus")
	ret0, _ := ret[0].([]openflow.TableStatus)
	return ret0
}

// DumpTableStatus indicates an expected call of DumpTableStatus
func (mr *MockBridgeMockRecorder) DumpTableStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpTableStatus", reflect.TypeOf((*MockBridge)(nil).DumpTableStatus))
}

// IsConnected mocks base method
func (m *MockBridge) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected
func (mr *MockBridgeMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockBridge)(nil).IsConnected))
}

// MockTable is a mock of Table interface
type MockTable struct {
	ctrl     *gomock.Controller
	recorder *MockTableMockRecorder
}

// MockTableMockRecorder is the mock recorder for MockTable
type MockTableMockRecorder struct {
	mock *MockTable
}

// NewMockTable creates a new mock instance
func NewMockTable(ctrl *gomock.Controller) *MockTable {
	mock := &MockTable{ctrl: ctrl}
	mock.recorder = &MockTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTable) EXPECT() *MockTableMockRecorder {
	return m.recorder
}

// BuildFlow mocks base method
func (m *MockTable) BuildFlow(arg0 uint16) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildFlow", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// BuildFlow indicates an expected call of BuildFlow
func (mr *MockTableMockRecorder) BuildFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildFlow", reflect.TypeOf((*MockTable)(nil).BuildFlow), arg0)
}

// GetID mocks base method
func (m *MockTable) GetID() openflow.TableIDType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(openflow.TableIDType)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockTableMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockTable)(nil).GetID))
}

// GetMissAction mocks base method
func (m *MockTable) GetMissAction() openflow.MissActionType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMissAction")
	ret0, _ := ret[0].(openflow.MissActionType)
	return ret0
}

// GetMissAction indicates an expected call of GetMissAction
func (mr *MockTableMockRecorder) GetMissAction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMissAction", reflect.TypeOf((*MockTable)(nil).GetMissAction))
}

// GetNext mocks base method
func (m *MockTable) GetNext() openflow.TableIDType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNext")
	ret0, _ := ret[0].(openflow.TableIDType)
	return ret0
}

// GetNext indicates an expected call of GetNext
func (mr *MockTableMockRecorder) GetNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNext", reflect.TypeOf((*MockTable)(nil).GetNext))
}

// Status mocks base method
func (m *MockTable) Status() openflow.TableStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(openflow.TableStatus)
	return ret0
}

// Status indicates an expected call of Status
func (mr *MockTableMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockTable)(nil).Status))
}

// MockFlow is a mock of Flow interface
type MockFlow struct {
	ctrl     *gomock.Controller
	recorder *MockFlowMockRecorder
}

// MockFlowMockRecorder is the mock recorder for MockFlow
type MockFlowMockRecorder struct {
	mock *MockFlow
}

// NewMockFlow creates a new mock instance
func NewMockFlow(ctrl *gomock.Controller) *MockFlow {
	mock := &MockFlow{ctrl: ctrl}
	mock.recorder = &MockFlowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFlow) EXPECT() *MockFlowMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockFlow) Add() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add")
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockFlowMockRecorder) Add() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockFlow)(nil).Add))
}

// CopyToBuilder mocks base method
func (m *MockFlow) CopyToBuilder() openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyToBuilder")
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// CopyToBuilder indicates an expected call of CopyToBuilder
func (mr *MockFlowMockRecorder) CopyToBuilder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyToBuilder", reflect.TypeOf((*MockFlow)(nil).CopyToBuilder))
}

// Delete mocks base method
func (m *MockFlow) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockFlowMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFlow)(nil).Delete))
}

// GetBundleMessage mocks base method
func (m *MockFlow) GetBundleMessage(arg0 openflow.OFOperation) (ofctrl.OpenFlowModMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBundleMessage", arg0)
	ret0, _ := ret[0].(ofctrl.OpenFlowModMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBundleMessage indicates an expected call of GetBundleMessage
func (mr *MockFlowMockRecorder) GetBundleMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundleMessage", reflect.TypeOf((*MockFlow)(nil).GetBundleMessage), arg0)
}

// KeyString mocks base method
func (m *MockFlow) KeyString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyString")
	ret0, _ := ret[0].(string)
	return ret0
}

// KeyString indicates an expected call of KeyString
func (mr *MockFlowMockRecorder) KeyString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyString", reflect.TypeOf((*MockFlow)(nil).KeyString))
}

// MatchString mocks base method
func (m *MockFlow) MatchString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchString")
	ret0, _ := ret[0].(string)
	return ret0
}

// MatchString indicates an expected call of MatchString
func (mr *MockFlowMockRecorder) MatchString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchString", reflect.TypeOf((*MockFlow)(nil).MatchString))
}

// Modify mocks base method
func (m *MockFlow) Modify() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modify")
	ret0, _ := ret[0].(error)
	return ret0
}

// Modify indicates an expected call of Modify
func (mr *MockFlowMockRecorder) Modify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockFlow)(nil).Modify))
}

// Reset mocks base method
func (m *MockFlow) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset
func (mr *MockFlowMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockFlow)(nil).Reset))
}

// Type mocks base method
func (m *MockFlow) Type() openflow.EntryType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(openflow.EntryType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockFlowMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockFlow)(nil).Type))
}

// MockAction is a mock of Action interface
type MockAction struct {
	ctrl     *gomock.Controller
	recorder *MockActionMockRecorder
}

// MockActionMockRecorder is the mock recorder for MockAction
type MockActionMockRecorder struct {
	mock *MockAction
}

// NewMockAction creates a new mock instance
func NewMockAction(ctrl *gomock.Controller) *MockAction {
	mock := &MockAction{ctrl: ctrl}
	mock.recorder = &MockActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAction) EXPECT() *MockActionMockRecorder {
	return m.recorder
}

// CT mocks base method
func (m *MockAction) CT(arg0 bool, arg1 openflow.TableIDType, arg2 int) openflow.CTAction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CT", arg0, arg1, arg2)
	ret0, _ := ret[0].(openflow.CTAction)
	return ret0
}

// CT indicates an expected call of CT
func (mr *MockActionMockRecorder) CT(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CT", reflect.TypeOf((*MockAction)(nil).CT), arg0, arg1, arg2)
}

// Conjunction mocks base method
func (m *MockAction) Conjunction(arg0 uint32, arg1, arg2 byte) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conjunction", arg0, arg1, arg2)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// Conjunction indicates an expected call of Conjunction
func (mr *MockActionMockRecorder) Conjunction(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conjunction", reflect.TypeOf((*MockAction)(nil).Conjunction), arg0, arg1, arg2)
}

// DecTTL mocks base method
func (m *MockAction) DecTTL() openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecTTL")
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// DecTTL indicates an expected call of DecTTL
func (mr *MockActionMockRecorder) DecTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecTTL", reflect.TypeOf((*MockAction)(nil).DecTTL))
}

// Drop mocks base method
func (m *MockAction) Drop() openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drop")
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// Drop indicates an expected call of Drop
func (mr *MockActionMockRecorder) Drop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockAction)(nil).Drop))
}

// GotoTable mocks base method
func (m *MockAction) GotoTable(arg0 openflow.TableIDType) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GotoTable", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// GotoTable indicates an expected call of GotoTable
func (mr *MockActionMockRecorder) GotoTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GotoTable", reflect.TypeOf((*MockAction)(nil).GotoTable), arg0)
}

// Group mocks base method
func (m *MockAction) Group(arg0 openflow.GroupIDType) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// Group indicates an expected call of Group
func (mr *MockActionMockRecorder) Group(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockAction)(nil).Group), arg0)
}

// Learn mocks base method
func (m *MockAction) Learn(arg0 openflow.TableIDType, arg1, arg2, arg3 uint16, arg4 uint64) openflow.LearnAction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Learn", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(openflow.LearnAction)
	return ret0
}

// Learn indicates an expected call of Learn
func (mr *MockActionMockRecorder) Learn(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Learn", reflect.TypeOf((*MockAction)(nil).Learn), arg0, arg1, arg2, arg3, arg4)
}

// LoadARPOperation mocks base method
func (m *MockAction) LoadARPOperation(arg0 uint16) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadARPOperation", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// LoadARPOperation indicates an expected call of LoadARPOperation
func (mr *MockActionMockRecorder) LoadARPOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadARPOperation", reflect.TypeOf((*MockAction)(nil).LoadARPOperation), arg0)
}

// LoadRange mocks base method
func (m *MockAction) LoadRange(arg0 string, arg1 uint64, arg2 openflow.Range) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadRange", arg0, arg1, arg2)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// LoadRange indicates an expected call of LoadRange
func (mr *MockActionMockRecorder) LoadRange(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRange", reflect.TypeOf((*MockAction)(nil).LoadRange), arg0, arg1, arg2)
}

// LoadRegRange mocks base method
func (m *MockAction) LoadRegRange(arg0 int, arg1 uint32, arg2 openflow.Range) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadRegRange", arg0, arg1, arg2)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// LoadRegRange indicates an expected call of LoadRegRange
func (mr *MockActionMockRecorder) LoadRegRange(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRegRange", reflect.TypeOf((*MockAction)(nil).LoadRegRange), arg0, arg1, arg2)
}

// Move mocks base method
func (m *MockAction) Move(arg0, arg1 string) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", arg0, arg1)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// Move indicates an expected call of Move
func (mr *MockActionMockRecorder) Move(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockAction)(nil).Move), arg0, arg1)
}

// MoveRange mocks base method
func (m *MockAction) MoveRange(arg0, arg1 string, arg2, arg3 openflow.Range) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveRange", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MoveRange indicates an expected call of MoveRange
func (mr *MockActionMockRecorder) MoveRange(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveRange", reflect.TypeOf((*MockAction)(nil).MoveRange), arg0, arg1, arg2, arg3)
}

// Normal mocks base method
func (m *MockAction) Normal() openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Normal")
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// Normal indicates an expected call of Normal
func (mr *MockActionMockRecorder) Normal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Normal", reflect.TypeOf((*MockAction)(nil).Normal))
}

// Output mocks base method
func (m *MockAction) Output(arg0 int) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// Output indicates an expected call of Output
func (mr *MockActionMockRecorder) Output(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockAction)(nil).Output), arg0)
}

// OutputFieldRange mocks base method
func (m *MockAction) OutputFieldRange(arg0 string, arg1 openflow.Range) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutputFieldRange", arg0, arg1)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// OutputFieldRange indicates an expected call of OutputFieldRange
func (mr *MockActionMockRecorder) OutputFieldRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputFieldRange", reflect.TypeOf((*MockAction)(nil).OutputFieldRange), arg0, arg1)
}

// OutputInPort mocks base method
func (m *MockAction) OutputInPort() openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutputInPort")
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// OutputInPort indicates an expected call of OutputInPort
func (mr *MockActionMockRecorder) OutputInPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputInPort", reflect.TypeOf((*MockAction)(nil).OutputInPort))
}

// OutputRegRange mocks base method
func (m *MockAction) OutputRegRange(arg0 int, arg1 openflow.Range) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutputRegRange", arg0, arg1)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// OutputRegRange indicates an expected call of OutputRegRange
func (mr *MockActionMockRecorder) OutputRegRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputRegRange", reflect.TypeOf((*MockAction)(nil).OutputRegRange), arg0, arg1)
}

// Resubmit mocks base method
func (m *MockAction) Resubmit(arg0 uint16, arg1 openflow.TableIDType) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resubmit", arg0, arg1)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// Resubmit indicates an expected call of Resubmit
func (mr *MockActionMockRecorder) Resubmit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resubmit", reflect.TypeOf((*MockAction)(nil).Resubmit), arg0, arg1)
}

// ResubmitToTable mocks base method
func (m *MockAction) ResubmitToTable(arg0 openflow.TableIDType) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResubmitToTable", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// ResubmitToTable indicates an expected call of ResubmitToTable
func (mr *MockActionMockRecorder) ResubmitToTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResubmitToTable", reflect.TypeOf((*MockAction)(nil).ResubmitToTable), arg0)
}

// SetARPSha mocks base method
func (m *MockAction) SetARPSha(arg0 net.HardwareAddr) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetARPSha", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// SetARPSha indicates an expected call of SetARPSha
func (mr *MockActionMockRecorder) SetARPSha(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetARPSha", reflect.TypeOf((*MockAction)(nil).SetARPSha), arg0)
}

// SetARPSpa mocks base method
func (m *MockAction) SetARPSpa(arg0 net.IP) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetARPSpa", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// SetARPSpa indicates an expected call of SetARPSpa
func (mr *MockActionMockRecorder) SetARPSpa(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetARPSpa", reflect.TypeOf((*MockAction)(nil).SetARPSpa), arg0)
}

// SetARPTha mocks base method
func (m *MockAction) SetARPTha(arg0 net.HardwareAddr) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetARPTha", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// SetARPTha indicates an expected call of SetARPTha
func (mr *MockActionMockRecorder) SetARPTha(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetARPTha", reflect.TypeOf((*MockAction)(nil).SetARPTha), arg0)
}

// SetARPTpa mocks base method
func (m *MockAction) SetARPTpa(arg0 net.IP) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetARPTpa", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// SetARPTpa indicates an expected call of SetARPTpa
func (mr *MockActionMockRecorder) SetARPTpa(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetARPTpa", reflect.TypeOf((*MockAction)(nil).SetARPTpa), arg0)
}

// SetDstIP mocks base method
func (m *MockAction) SetDstIP(arg0 net.IP) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDstIP", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// SetDstIP indicates an expected call of SetDstIP
func (mr *MockActionMockRecorder) SetDstIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDstIP", reflect.TypeOf((*MockAction)(nil).SetDstIP), arg0)
}

// SetDstMAC mocks base method
func (m *MockAction) SetDstMAC(arg0 net.HardwareAddr) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDstMAC", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// SetDstMAC indicates an expected call of SetDstMAC
func (mr *MockActionMockRecorder) SetDstMAC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDstMAC", reflect.TypeOf((*MockAction)(nil).SetDstMAC), arg0)
}

// SetSrcIP mocks base method
func (m *MockAction) SetSrcIP(arg0 net.IP) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSrcIP", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// SetSrcIP indicates an expected call of SetSrcIP
func (mr *MockActionMockRecorder) SetSrcIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSrcIP", reflect.TypeOf((*MockAction)(nil).SetSrcIP), arg0)
}

// SetSrcMAC mocks base method
func (m *MockAction) SetSrcMAC(arg0 net.HardwareAddr) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSrcMAC", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// SetSrcMAC indicates an expected call of SetSrcMAC
func (mr *MockActionMockRecorder) SetSrcMAC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSrcMAC", reflect.TypeOf((*MockAction)(nil).SetSrcMAC), arg0)
}

// SetTunnelDst mocks base method
func (m *MockAction) SetTunnelDst(arg0 net.IP) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTunnelDst", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// SetTunnelDst indicates an expected call of SetTunnelDst
func (mr *MockActionMockRecorder) SetTunnelDst(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTunnelDst", reflect.TypeOf((*MockAction)(nil).SetTunnelDst), arg0)
}

// MockFlowBuilder is a mock of FlowBuilder interface
type MockFlowBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockFlowBuilderMockRecorder
}

// MockFlowBuilderMockRecorder is the mock recorder for MockFlowBuilder
type MockFlowBuilderMockRecorder struct {
	mock *MockFlowBuilder
}

// NewMockFlowBuilder creates a new mock instance
func NewMockFlowBuilder(ctrl *gomock.Controller) *MockFlowBuilder {
	mock := &MockFlowBuilder{ctrl: ctrl}
	mock.recorder = &MockFlowBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFlowBuilder) EXPECT() *MockFlowBuilderMockRecorder {
	return m.recorder
}

// Action mocks base method
func (m *MockFlowBuilder) Action() openflow.Action {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Action")
	ret0, _ := ret[0].(openflow.Action)
	return ret0
}

// Action indicates an expected call of Action
func (mr *MockFlowBuilderMockRecorder) Action() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Action", reflect.TypeOf((*MockFlowBuilder)(nil).Action))
}

// Cookie mocks base method
func (m *MockFlowBuilder) Cookie(arg0 uint64) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cookie", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// Cookie indicates an expected call of Cookie
func (mr *MockFlowBuilderMockRecorder) Cookie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cookie", reflect.TypeOf((*MockFlowBuilder)(nil).Cookie), arg0)
}

// Done mocks base method
func (m *MockFlowBuilder) Done() openflow.Flow {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(openflow.Flow)
	return ret0
}

// Done indicates an expected call of Done
func (mr *MockFlowBuilderMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockFlowBuilder)(nil).Done))
}

// MatchARPOp mocks base method
func (m *MockFlowBuilder) MatchARPOp(arg0 uint16) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchARPOp", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchARPOp indicates an expected call of MatchARPOp
func (mr *MockFlowBuilderMockRecorder) MatchARPOp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchARPOp", reflect.TypeOf((*MockFlowBuilder)(nil).MatchARPOp), arg0)
}

// MatchARPSha mocks base method
func (m *MockFlowBuilder) MatchARPSha(arg0 net.HardwareAddr) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchARPSha", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchARPSha indicates an expected call of MatchARPSha
func (mr *MockFlowBuilderMockRecorder) MatchARPSha(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchARPSha", reflect.TypeOf((*MockFlowBuilder)(nil).MatchARPSha), arg0)
}

// MatchARPSpa mocks base method
func (m *MockFlowBuilder) MatchARPSpa(arg0 net.IP) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchARPSpa", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchARPSpa indicates an expected call of MatchARPSpa
func (mr *MockFlowBuilderMockRecorder) MatchARPSpa(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchARPSpa", reflect.TypeOf((*MockFlowBuilder)(nil).MatchARPSpa), arg0)
}

// MatchARPTha mocks base method
func (m *MockFlowBuilder) MatchARPTha(arg0 net.HardwareAddr) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchARPTha", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchARPTha indicates an expected call of MatchARPTha
func (mr *MockFlowBuilderMockRecorder) MatchARPTha(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchARPTha", reflect.TypeOf((*MockFlowBuilder)(nil).MatchARPTha), arg0)
}

// MatchARPTpa mocks base method
func (m *MockFlowBuilder) MatchARPTpa(arg0 net.IP) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchARPTpa", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchARPTpa indicates an expected call of MatchARPTpa
func (mr *MockFlowBuilderMockRecorder) MatchARPTpa(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchARPTpa", reflect.TypeOf((*MockFlowBuilder)(nil).MatchARPTpa), arg0)
}

// MatchCTMark mocks base method
func (m *MockFlowBuilder) MatchCTMark(arg0 uint32) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchCTMark", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchCTMark indicates an expected call of MatchCTMark
func (mr *MockFlowBuilderMockRecorder) MatchCTMark(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchCTMark", reflect.TypeOf((*MockFlowBuilder)(nil).MatchCTMark), arg0)
}

// MatchCTStateEst mocks base method
func (m *MockFlowBuilder) MatchCTStateEst(arg0 bool) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchCTStateEst", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchCTStateEst indicates an expected call of MatchCTStateEst
func (mr *MockFlowBuilderMockRecorder) MatchCTStateEst(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchCTStateEst", reflect.TypeOf((*MockFlowBuilder)(nil).MatchCTStateEst), arg0)
}

// MatchCTStateInv mocks base method
func (m *MockFlowBuilder) MatchCTStateInv(arg0 bool) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchCTStateInv", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchCTStateInv indicates an expected call of MatchCTStateInv
func (mr *MockFlowBuilderMockRecorder) MatchCTStateInv(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchCTStateInv", reflect.TypeOf((*MockFlowBuilder)(nil).MatchCTStateInv), arg0)
}

// MatchCTStateNew mocks base method
func (m *MockFlowBuilder) MatchCTStateNew(arg0 bool) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchCTStateNew", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchCTStateNew indicates an expected call of MatchCTStateNew
func (mr *MockFlowBuilderMockRecorder) MatchCTStateNew(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchCTStateNew", reflect.TypeOf((*MockFlowBuilder)(nil).MatchCTStateNew), arg0)
}

// MatchCTStateRel mocks base method
func (m *MockFlowBuilder) MatchCTStateRel(arg0 bool) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchCTStateRel", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchCTStateRel indicates an expected call of MatchCTStateRel
func (mr *MockFlowBuilderMockRecorder) MatchCTStateRel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchCTStateRel", reflect.TypeOf((*MockFlowBuilder)(nil).MatchCTStateRel), arg0)
}

// MatchCTStateRpl mocks base method
func (m *MockFlowBuilder) MatchCTStateRpl(arg0 bool) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchCTStateRpl", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchCTStateRpl indicates an expected call of MatchCTStateRpl
func (mr *MockFlowBuilderMockRecorder) MatchCTStateRpl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchCTStateRpl", reflect.TypeOf((*MockFlowBuilder)(nil).MatchCTStateRpl), arg0)
}

// MatchCTStateTrk mocks base method
func (m *MockFlowBuilder) MatchCTStateTrk(arg0 bool) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchCTStateTrk", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchCTStateTrk indicates an expected call of MatchCTStateTrk
func (mr *MockFlowBuilderMockRecorder) MatchCTStateTrk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchCTStateTrk", reflect.TypeOf((*MockFlowBuilder)(nil).MatchCTStateTrk), arg0)
}

// MatchConjID mocks base method
func (m *MockFlowBuilder) MatchConjID(arg0 uint32) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchConjID", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchConjID indicates an expected call of MatchConjID
func (mr *MockFlowBuilderMockRecorder) MatchConjID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchConjID", reflect.TypeOf((*MockFlowBuilder)(nil).MatchConjID), arg0)
}

// MatchDstIP mocks base method
func (m *MockFlowBuilder) MatchDstIP(arg0 net.IP) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchDstIP", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchDstIP indicates an expected call of MatchDstIP
func (mr *MockFlowBuilderMockRecorder) MatchDstIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchDstIP", reflect.TypeOf((*MockFlowBuilder)(nil).MatchDstIP), arg0)
}

// MatchDstIPNet mocks base method
func (m *MockFlowBuilder) MatchDstIPNet(arg0 net.IPNet) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchDstIPNet", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchDstIPNet indicates an expected call of MatchDstIPNet
func (mr *MockFlowBuilderMockRecorder) MatchDstIPNet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchDstIPNet", reflect.TypeOf((*MockFlowBuilder)(nil).MatchDstIPNet), arg0)
}

// MatchDstMAC mocks base method
func (m *MockFlowBuilder) MatchDstMAC(arg0 net.HardwareAddr) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchDstMAC", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchDstMAC indicates an expected call of MatchDstMAC
func (mr *MockFlowBuilderMockRecorder) MatchDstMAC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchDstMAC", reflect.TypeOf((*MockFlowBuilder)(nil).MatchDstMAC), arg0)
}

// MatchInPort mocks base method
func (m *MockFlowBuilder) MatchInPort(arg0 uint32) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchInPort", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchInPort indicates an expected call of MatchInPort
func (mr *MockFlowBuilderMockRecorder) MatchInPort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchInPort", reflect.TypeOf((*MockFlowBuilder)(nil).MatchInPort), arg0)
}

// MatchProtocol mocks base method
func (m *MockFlowBuilder) MatchProtocol(arg0 openflow.Protocol) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchProtocol", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchProtocol indicates an expected call of MatchProtocol
func (mr *MockFlowBuilderMockRecorder) MatchProtocol(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchProtocol", reflect.TypeOf((*MockFlowBuilder)(nil).MatchProtocol), arg0)
}

// MatchReg mocks base method
func (m *MockFlowBuilder) MatchReg(arg0 int, arg1 uint32) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchReg", arg0, arg1)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchReg indicates an expected call of MatchReg
func (mr *MockFlowBuilderMockRecorder) MatchReg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchReg", reflect.TypeOf((*MockFlowBuilder)(nil).MatchReg), arg0, arg1)
}

// MatchRegRange mocks base method
func (m *MockFlowBuilder) MatchRegRange(arg0 int, arg1 uint32, arg2 openflow.Range) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchRegRange", arg0, arg1, arg2)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchRegRange indicates an expected call of MatchRegRange
func (mr *MockFlowBuilderMockRecorder) MatchRegRange(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchRegRange", reflect.TypeOf((*MockFlowBuilder)(nil).MatchRegRange), arg0, arg1, arg2)
}

// MatchSCTPDstPort mocks base method
func (m *MockFlowBuilder) MatchSCTPDstPort(arg0 uint16) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchSCTPDstPort", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchSCTPDstPort indicates an expected call of MatchSCTPDstPort
func (mr *MockFlowBuilderMockRecorder) MatchSCTPDstPort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchSCTPDstPort", reflect.TypeOf((*MockFlowBuilder)(nil).MatchSCTPDstPort), arg0)
}

// MatchSrcIP mocks base method
func (m *MockFlowBuilder) MatchSrcIP(arg0 net.IP) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchSrcIP", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchSrcIP indicates an expected call of MatchSrcIP
func (mr *MockFlowBuilderMockRecorder) MatchSrcIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchSrcIP", reflect.TypeOf((*MockFlowBuilder)(nil).MatchSrcIP), arg0)
}

// MatchSrcIPNet mocks base method
func (m *MockFlowBuilder) MatchSrcIPNet(arg0 net.IPNet) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchSrcIPNet", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchSrcIPNet indicates an expected call of MatchSrcIPNet
func (mr *MockFlowBuilderMockRecorder) MatchSrcIPNet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchSrcIPNet", reflect.TypeOf((*MockFlowBuilder)(nil).MatchSrcIPNet), arg0)
}

// MatchSrcMAC mocks base method
func (m *MockFlowBuilder) MatchSrcMAC(arg0 net.HardwareAddr) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchSrcMAC", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchSrcMAC indicates an expected call of MatchSrcMAC
func (mr *MockFlowBuilderMockRecorder) MatchSrcMAC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchSrcMAC", reflect.TypeOf((*MockFlowBuilder)(nil).MatchSrcMAC), arg0)
}

// MatchTCPDstPort mocks base method
func (m *MockFlowBuilder) MatchTCPDstPort(arg0 uint16) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchTCPDstPort", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchTCPDstPort indicates an expected call of MatchTCPDstPort
func (mr *MockFlowBuilderMockRecorder) MatchTCPDstPort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchTCPDstPort", reflect.TypeOf((*MockFlowBuilder)(nil).MatchTCPDstPort), arg0)
}

// MatchUDPDstPort mocks base method
func (m *MockFlowBuilder) MatchUDPDstPort(arg0 uint16) openflow.FlowBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchUDPDstPort", arg0)
	ret0, _ := ret[0].(openflow.FlowBuilder)
	return ret0
}

// MatchUDPDstPort indicates an expected call of MatchUDPDstPort
func (mr *MockFlowBuilderMockRecorder) MatchUDPDstPort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchUDPDstPort", reflect.TypeOf((*MockFlowBuilder)(nil).MatchUDPDstPort), arg0)
}
