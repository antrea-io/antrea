// Copyright 2020 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/antrea/pkg/ovs/ovsctl (interfaces: OVSCtlClient)

// Package testing is a generated GoMock package.
package testing

import (
	gomock "github.com/golang/mock/gomock"
	ovsctl "github.com/vmware-tanzu/antrea/pkg/ovs/ovsctl"
	reflect "reflect"
)

// MockOVSCtlClient is a mock of OVSCtlClient interface
type MockOVSCtlClient struct {
	ctrl     *gomock.Controller
	recorder *MockOVSCtlClientMockRecorder
}

// MockOVSCtlClientMockRecorder is the mock recorder for MockOVSCtlClient
type MockOVSCtlClientMockRecorder struct {
	mock *MockOVSCtlClient
}

// NewMockOVSCtlClient creates a new mock instance
func NewMockOVSCtlClient(ctrl *gomock.Controller) *MockOVSCtlClient {
	mock := &MockOVSCtlClient{ctrl: ctrl}
	mock.recorder = &MockOVSCtlClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOVSCtlClient) EXPECT() *MockOVSCtlClientMockRecorder {
	return m.recorder
}

// DumpFlows mocks base method
func (m *MockOVSCtlClient) DumpFlows(arg0 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DumpFlows", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpFlows indicates an expected call of DumpFlows
func (mr *MockOVSCtlClientMockRecorder) DumpFlows(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpFlows", reflect.TypeOf((*MockOVSCtlClient)(nil).DumpFlows), arg0...)
}

// DumpGroups mocks base method
func (m *MockOVSCtlClient) DumpGroups(arg0 ...string) ([][]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DumpGroups", varargs...)
	ret0, _ := ret[0].([][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpGroups indicates an expected call of DumpGroups
func (mr *MockOVSCtlClientMockRecorder) DumpGroups(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpGroups", reflect.TypeOf((*MockOVSCtlClient)(nil).DumpGroups), arg0...)
}

// DumpMatchedFlow mocks base method
func (m *MockOVSCtlClient) DumpMatchedFlow(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpMatchedFlow", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpMatchedFlow indicates an expected call of DumpMatchedFlow
func (mr *MockOVSCtlClientMockRecorder) DumpMatchedFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpMatchedFlow", reflect.TypeOf((*MockOVSCtlClient)(nil).DumpMatchedFlow), arg0)
}

// DumpTableFlows mocks base method
func (m *MockOVSCtlClient) DumpTableFlows(arg0 byte) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpTableFlows", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpTableFlows indicates an expected call of DumpTableFlows
func (mr *MockOVSCtlClientMockRecorder) DumpTableFlows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpTableFlows", reflect.TypeOf((*MockOVSCtlClient)(nil).DumpTableFlows), arg0)
}

// RunOfctlCmd mocks base method
func (m *MockOVSCtlClient) RunOfctlCmd(arg0 string, arg1 ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunOfctlCmd", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunOfctlCmd indicates an expected call of RunOfctlCmd
func (mr *MockOVSCtlClientMockRecorder) RunOfctlCmd(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunOfctlCmd", reflect.TypeOf((*MockOVSCtlClient)(nil).RunOfctlCmd), varargs...)
}

// Trace mocks base method
func (m *MockOVSCtlClient) Trace(arg0 *ovsctl.TracingRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trace", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Trace indicates an expected call of Trace
func (mr *MockOVSCtlClientMockRecorder) Trace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockOVSCtlClient)(nil).Trace), arg0)
}
