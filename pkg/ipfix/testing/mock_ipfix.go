// Copyright 2020 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/antrea/pkg/ipfix (interfaces: IPFIXExportingProcess,IPFIXSet,IPFIXRegistry,IPFIXCollectingProcess,IPFIXAggregationProcess)

// Package testing is a generated GoMock package.
package testing

import (
	gomock "github.com/golang/mock/gomock"
	entities "github.com/vmware/go-ipfix/pkg/entities"
	intermediate "github.com/vmware/go-ipfix/pkg/intermediate"
	reflect "reflect"
)

// MockIPFIXExportingProcess is a mock of IPFIXExportingProcess interface
type MockIPFIXExportingProcess struct {
	ctrl     *gomock.Controller
	recorder *MockIPFIXExportingProcessMockRecorder
}

// MockIPFIXExportingProcessMockRecorder is the mock recorder for MockIPFIXExportingProcess
type MockIPFIXExportingProcessMockRecorder struct {
	mock *MockIPFIXExportingProcess
}

// NewMockIPFIXExportingProcess creates a new mock instance
func NewMockIPFIXExportingProcess(ctrl *gomock.Controller) *MockIPFIXExportingProcess {
	mock := &MockIPFIXExportingProcess{ctrl: ctrl}
	mock.recorder = &MockIPFIXExportingProcessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPFIXExportingProcess) EXPECT() *MockIPFIXExportingProcessMockRecorder {
	return m.recorder
}

// AddSetAndSendMsg mocks base method
func (m *MockIPFIXExportingProcess) AddSetAndSendMsg(arg0 entities.ContentType, arg1 entities.Set) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSetAndSendMsg", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSetAndSendMsg indicates an expected call of AddSetAndSendMsg
func (mr *MockIPFIXExportingProcessMockRecorder) AddSetAndSendMsg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSetAndSendMsg", reflect.TypeOf((*MockIPFIXExportingProcess)(nil).AddSetAndSendMsg), arg0, arg1)
}

// CloseConnToCollector mocks base method
func (m *MockIPFIXExportingProcess) CloseConnToCollector() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseConnToCollector")
}

// CloseConnToCollector indicates an expected call of CloseConnToCollector
func (mr *MockIPFIXExportingProcessMockRecorder) CloseConnToCollector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnToCollector", reflect.TypeOf((*MockIPFIXExportingProcess)(nil).CloseConnToCollector))
}

// NewTemplateID mocks base method
func (m *MockIPFIXExportingProcess) NewTemplateID() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTemplateID")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// NewTemplateID indicates an expected call of NewTemplateID
func (mr *MockIPFIXExportingProcessMockRecorder) NewTemplateID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTemplateID", reflect.TypeOf((*MockIPFIXExportingProcess)(nil).NewTemplateID))
}

// MockIPFIXSet is a mock of IPFIXSet interface
type MockIPFIXSet struct {
	ctrl     *gomock.Controller
	recorder *MockIPFIXSetMockRecorder
}

// MockIPFIXSetMockRecorder is the mock recorder for MockIPFIXSet
type MockIPFIXSetMockRecorder struct {
	mock *MockIPFIXSet
}

// NewMockIPFIXSet creates a new mock instance
func NewMockIPFIXSet(ctrl *gomock.Controller) *MockIPFIXSet {
	mock := &MockIPFIXSet{ctrl: ctrl}
	mock.recorder = &MockIPFIXSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPFIXSet) EXPECT() *MockIPFIXSetMockRecorder {
	return m.recorder
}

// AddRecord mocks base method
func (m *MockIPFIXSet) AddRecord(arg0 []*entities.InfoElementWithValue, arg1 uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRecord indicates an expected call of AddRecord
func (mr *MockIPFIXSetMockRecorder) AddRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRecord", reflect.TypeOf((*MockIPFIXSet)(nil).AddRecord), arg0, arg1)
}

// GetSet mocks base method
func (m *MockIPFIXSet) GetSet() entities.Set {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSet")
	ret0, _ := ret[0].(entities.Set)
	return ret0
}

// GetSet indicates an expected call of GetSet
func (mr *MockIPFIXSetMockRecorder) GetSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSet", reflect.TypeOf((*MockIPFIXSet)(nil).GetSet))
}

// MockIPFIXRegistry is a mock of IPFIXRegistry interface
type MockIPFIXRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockIPFIXRegistryMockRecorder
}

// MockIPFIXRegistryMockRecorder is the mock recorder for MockIPFIXRegistry
type MockIPFIXRegistryMockRecorder struct {
	mock *MockIPFIXRegistry
}

// NewMockIPFIXRegistry creates a new mock instance
func NewMockIPFIXRegistry(ctrl *gomock.Controller) *MockIPFIXRegistry {
	mock := &MockIPFIXRegistry{ctrl: ctrl}
	mock.recorder = &MockIPFIXRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPFIXRegistry) EXPECT() *MockIPFIXRegistryMockRecorder {
	return m.recorder
}

// GetInfoElement mocks base method
func (m *MockIPFIXRegistry) GetInfoElement(arg0 string, arg1 uint32) (*entities.InfoElement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfoElement", arg0, arg1)
	ret0, _ := ret[0].(*entities.InfoElement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfoElement indicates an expected call of GetInfoElement
func (mr *MockIPFIXRegistryMockRecorder) GetInfoElement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfoElement", reflect.TypeOf((*MockIPFIXRegistry)(nil).GetInfoElement), arg0, arg1)
}

// LoadRegistry mocks base method
func (m *MockIPFIXRegistry) LoadRegistry() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadRegistry")
}

// LoadRegistry indicates an expected call of LoadRegistry
func (mr *MockIPFIXRegistryMockRecorder) LoadRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRegistry", reflect.TypeOf((*MockIPFIXRegistry)(nil).LoadRegistry))
}

// MockIPFIXCollectingProcess is a mock of IPFIXCollectingProcess interface
type MockIPFIXCollectingProcess struct {
	ctrl     *gomock.Controller
	recorder *MockIPFIXCollectingProcessMockRecorder
}

// MockIPFIXCollectingProcessMockRecorder is the mock recorder for MockIPFIXCollectingProcess
type MockIPFIXCollectingProcessMockRecorder struct {
	mock *MockIPFIXCollectingProcess
}

// NewMockIPFIXCollectingProcess creates a new mock instance
func NewMockIPFIXCollectingProcess(ctrl *gomock.Controller) *MockIPFIXCollectingProcess {
	mock := &MockIPFIXCollectingProcess{ctrl: ctrl}
	mock.recorder = &MockIPFIXCollectingProcessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPFIXCollectingProcess) EXPECT() *MockIPFIXCollectingProcessMockRecorder {
	return m.recorder
}

// GetMsgChan mocks base method
func (m *MockIPFIXCollectingProcess) GetMsgChan() chan *entities.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMsgChan")
	ret0, _ := ret[0].(chan *entities.Message)
	return ret0
}

// GetMsgChan indicates an expected call of GetMsgChan
func (mr *MockIPFIXCollectingProcessMockRecorder) GetMsgChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsgChan", reflect.TypeOf((*MockIPFIXCollectingProcess)(nil).GetMsgChan))
}

// Start mocks base method
func (m *MockIPFIXCollectingProcess) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockIPFIXCollectingProcessMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIPFIXCollectingProcess)(nil).Start))
}

// Stop mocks base method
func (m *MockIPFIXCollectingProcess) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockIPFIXCollectingProcessMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIPFIXCollectingProcess)(nil).Stop))
}

// MockIPFIXAggregationProcess is a mock of IPFIXAggregationProcess interface
type MockIPFIXAggregationProcess struct {
	ctrl     *gomock.Controller
	recorder *MockIPFIXAggregationProcessMockRecorder
}

// MockIPFIXAggregationProcessMockRecorder is the mock recorder for MockIPFIXAggregationProcess
type MockIPFIXAggregationProcessMockRecorder struct {
	mock *MockIPFIXAggregationProcess
}

// NewMockIPFIXAggregationProcess creates a new mock instance
func NewMockIPFIXAggregationProcess(ctrl *gomock.Controller) *MockIPFIXAggregationProcess {
	mock := &MockIPFIXAggregationProcess{ctrl: ctrl}
	mock.recorder = &MockIPFIXAggregationProcessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPFIXAggregationProcess) EXPECT() *MockIPFIXAggregationProcessMockRecorder {
	return m.recorder
}

// DeleteFlowKeyFromMapWithoutLock mocks base method
func (m *MockIPFIXAggregationProcess) DeleteFlowKeyFromMapWithoutLock(arg0 intermediate.FlowKey) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteFlowKeyFromMapWithoutLock", arg0)
}

// DeleteFlowKeyFromMapWithoutLock indicates an expected call of DeleteFlowKeyFromMapWithoutLock
func (mr *MockIPFIXAggregationProcessMockRecorder) DeleteFlowKeyFromMapWithoutLock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowKeyFromMapWithoutLock", reflect.TypeOf((*MockIPFIXAggregationProcess)(nil).DeleteFlowKeyFromMapWithoutLock), arg0)
}

// ForAllRecordsDo mocks base method
func (m *MockIPFIXAggregationProcess) ForAllRecordsDo(arg0 intermediate.FlowKeyRecordMapCallBack) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForAllRecordsDo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForAllRecordsDo indicates an expected call of ForAllRecordsDo
func (mr *MockIPFIXAggregationProcessMockRecorder) ForAllRecordsDo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForAllRecordsDo", reflect.TypeOf((*MockIPFIXAggregationProcess)(nil).ForAllRecordsDo), arg0)
}

// Start mocks base method
func (m *MockIPFIXAggregationProcess) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockIPFIXAggregationProcessMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIPFIXAggregationProcess)(nil).Start))
}

// Stop mocks base method
func (m *MockIPFIXAggregationProcess) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockIPFIXAggregationProcessMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIPFIXAggregationProcess)(nil).Stop))
}
