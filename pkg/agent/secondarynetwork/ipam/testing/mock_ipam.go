// Copyright 2022 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: antrea.io/antrea/pkg/agent/secondarynetwork/ipam (interfaces: IPAMDelegator)

// Package testing is a generated GoMock package.
package testing

import (
	invoke "github.com/containernetworking/cni/pkg/invoke"
	types100 "github.com/containernetworking/cni/pkg/types/100"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIPAMDelegator is a mock of IPAMDelegator interface
type MockIPAMDelegator struct {
	ctrl     *gomock.Controller
	recorder *MockIPAMDelegatorMockRecorder
}

// MockIPAMDelegatorMockRecorder is the mock recorder for MockIPAMDelegator
type MockIPAMDelegatorMockRecorder struct {
	mock *MockIPAMDelegator
}

// NewMockIPAMDelegator creates a new mock instance
func NewMockIPAMDelegator(ctrl *gomock.Controller) *MockIPAMDelegator {
	mock := &MockIPAMDelegator{ctrl: ctrl}
	mock.recorder = &MockIPAMDelegatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPAMDelegator) EXPECT() *MockIPAMDelegatorMockRecorder {
	return m.recorder
}

// DelIPAMSubnetAddress mocks base method
func (m *MockIPAMDelegator) DelIPAMSubnetAddress(arg0 []byte, arg1 *invoke.Args) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelIPAMSubnetAddress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelIPAMSubnetAddress indicates an expected call of DelIPAMSubnetAddress
func (mr *MockIPAMDelegatorMockRecorder) DelIPAMSubnetAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelIPAMSubnetAddress", reflect.TypeOf((*MockIPAMDelegator)(nil).DelIPAMSubnetAddress), arg0, arg1)
}

// GetIPAMSubnetAddress mocks base method
func (m *MockIPAMDelegator) GetIPAMSubnetAddress(arg0 []byte, arg1 *invoke.Args) (*types100.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPAMSubnetAddress", arg0, arg1)
	ret0, _ := ret[0].(*types100.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPAMSubnetAddress indicates an expected call of GetIPAMSubnetAddress
func (mr *MockIPAMDelegatorMockRecorder) GetIPAMSubnetAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPAMSubnetAddress", reflect.TypeOf((*MockIPAMDelegator)(nil).GetIPAMSubnetAddress), arg0, arg1)
}
