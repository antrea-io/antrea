// Copyright 2024 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: antrea.io/antrea/pkg/agent/openflow (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -copyright_file hack/boilerplate/license_header.raw.txt -destination pkg/agent/openflow/testing/mock_openflow.go -package testing antrea.io/antrea/pkg/agent/openflow Client
//
// Package testing is a generated GoMock package.
package testing

import (
	net "net"
	reflect "reflect"

	config "antrea.io/antrea/pkg/agent/config"
	openflow "antrea.io/antrea/pkg/agent/openflow"
	types "antrea.io/antrea/pkg/agent/types"
	v1beta2 "antrea.io/antrea/pkg/apis/controlplane/v1beta2"
	v1alpha2 "antrea.io/antrea/pkg/apis/crd/v1alpha2"
	openflow0 "antrea.io/antrea/pkg/ovs/openflow"
	ip "antrea.io/antrea/pkg/util/ip"
	proxy "antrea.io/antrea/third_party/proxy"
	protocol "antrea.io/libOpenflow/protocol"
	util "antrea.io/libOpenflow/util"
	ofctrl "antrea.io/ofnet/ofctrl"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddAddressToDNSConjunction mocks base method.
func (m *MockClient) AddAddressToDNSConjunction(arg0 uint32, arg1 []types.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddressToDNSConjunction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddressToDNSConjunction indicates an expected call of AddAddressToDNSConjunction.
func (mr *MockClientMockRecorder) AddAddressToDNSConjunction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddressToDNSConjunction", reflect.TypeOf((*MockClient)(nil).AddAddressToDNSConjunction), arg0, arg1)
}

// AddPolicyRuleAddress mocks base method.
func (m *MockClient) AddPolicyRuleAddress(arg0 uint32, arg1 types.AddressType, arg2 []types.Address, arg3 *uint16, arg4, arg5 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPolicyRuleAddress", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPolicyRuleAddress indicates an expected call of AddPolicyRuleAddress.
func (mr *MockClientMockRecorder) AddPolicyRuleAddress(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicyRuleAddress", reflect.TypeOf((*MockClient)(nil).AddPolicyRuleAddress), arg0, arg1, arg2, arg3, arg4, arg5)
}

// BatchInstallPolicyRuleFlows mocks base method.
func (m *MockClient) BatchInstallPolicyRuleFlows(arg0 []*types.PolicyRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInstallPolicyRuleFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchInstallPolicyRuleFlows indicates an expected call of BatchInstallPolicyRuleFlows.
func (mr *MockClientMockRecorder) BatchInstallPolicyRuleFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInstallPolicyRuleFlows", reflect.TypeOf((*MockClient)(nil).BatchInstallPolicyRuleFlows), arg0)
}

// DeleteAddressFromDNSConjunction mocks base method.
func (m *MockClient) DeleteAddressFromDNSConjunction(arg0 uint32, arg1 []types.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddressFromDNSConjunction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddressFromDNSConjunction indicates an expected call of DeleteAddressFromDNSConjunction.
func (mr *MockClientMockRecorder) DeleteAddressFromDNSConjunction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddressFromDNSConjunction", reflect.TypeOf((*MockClient)(nil).DeleteAddressFromDNSConjunction), arg0, arg1)
}

// DeletePolicyRuleAddress mocks base method.
func (m *MockClient) DeletePolicyRuleAddress(arg0 uint32, arg1 types.AddressType, arg2 []types.Address, arg3 *uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyRuleAddress", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePolicyRuleAddress indicates an expected call of DeletePolicyRuleAddress.
func (mr *MockClientMockRecorder) DeletePolicyRuleAddress(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyRuleAddress", reflect.TypeOf((*MockClient)(nil).DeletePolicyRuleAddress), arg0, arg1, arg2, arg3)
}

// DeleteStaleFlows mocks base method.
func (m *MockClient) DeleteStaleFlows() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStaleFlows")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStaleFlows indicates an expected call of DeleteStaleFlows.
func (mr *MockClientMockRecorder) DeleteStaleFlows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStaleFlows", reflect.TypeOf((*MockClient)(nil).DeleteStaleFlows))
}

// Disconnect mocks base method.
func (m *MockClient) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockClientMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockClient)(nil).Disconnect))
}

// GetFlowTableStatus mocks base method.
func (m *MockClient) GetFlowTableStatus() []openflow0.TableStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlowTableStatus")
	ret0, _ := ret[0].([]openflow0.TableStatus)
	return ret0
}

// GetFlowTableStatus indicates an expected call of GetFlowTableStatus.
func (mr *MockClientMockRecorder) GetFlowTableStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowTableStatus", reflect.TypeOf((*MockClient)(nil).GetFlowTableStatus))
}

// GetNetworkPolicyFlowKeys mocks base method.
func (m *MockClient) GetNetworkPolicyFlowKeys(arg0, arg1 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPolicyFlowKeys", arg0, arg1)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetNetworkPolicyFlowKeys indicates an expected call of GetNetworkPolicyFlowKeys.
func (mr *MockClientMockRecorder) GetNetworkPolicyFlowKeys(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPolicyFlowKeys", reflect.TypeOf((*MockClient)(nil).GetNetworkPolicyFlowKeys), arg0, arg1)
}

// GetPodFlowKeys mocks base method.
func (m *MockClient) GetPodFlowKeys(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodFlowKeys", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPodFlowKeys indicates an expected call of GetPodFlowKeys.
func (mr *MockClientMockRecorder) GetPodFlowKeys(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodFlowKeys", reflect.TypeOf((*MockClient)(nil).GetPodFlowKeys), arg0)
}

// GetPolicyInfoFromConjunction mocks base method.
func (m *MockClient) GetPolicyInfoFromConjunction(arg0 uint32) (bool, *v1beta2.NetworkPolicyReference, string, string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyInfoFromConjunction", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*v1beta2.NetworkPolicyReference)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(string)
	ret4, _ := ret[4].(string)
	return ret0, ret1, ret2, ret3, ret4
}

// GetPolicyInfoFromConjunction indicates an expected call of GetPolicyInfoFromConjunction.
func (mr *MockClientMockRecorder) GetPolicyInfoFromConjunction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyInfoFromConjunction", reflect.TypeOf((*MockClient)(nil).GetPolicyInfoFromConjunction), arg0)
}

// GetServiceFlowKeys mocks base method.
func (m *MockClient) GetServiceFlowKeys(arg0 net.IP, arg1 uint16, arg2 openflow0.Protocol, arg3 []proxy.Endpoint) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceFlowKeys", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetServiceFlowKeys indicates an expected call of GetServiceFlowKeys.
func (mr *MockClientMockRecorder) GetServiceFlowKeys(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceFlowKeys", reflect.TypeOf((*MockClient)(nil).GetServiceFlowKeys), arg0, arg1, arg2, arg3)
}

// GetTunnelVirtualMAC mocks base method.
func (m *MockClient) GetTunnelVirtualMAC() net.HardwareAddr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTunnelVirtualMAC")
	ret0, _ := ret[0].(net.HardwareAddr)
	return ret0
}

// GetTunnelVirtualMAC indicates an expected call of GetTunnelVirtualMAC.
func (mr *MockClientMockRecorder) GetTunnelVirtualMAC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTunnelVirtualMAC", reflect.TypeOf((*MockClient)(nil).GetTunnelVirtualMAC))
}

// Initialize mocks base method.
func (m *MockClient) Initialize(arg0 types.RoundInfo, arg1 *config.NodeConfig, arg2 *config.NetworkConfig, arg3 *config.EgressConfig, arg4 *config.ServiceConfig, arg5 *config.L7NetworkPolicyConfig) (<-chan struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(<-chan struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Initialize indicates an expected call of Initialize.
func (mr *MockClientMockRecorder) Initialize(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockClient)(nil).Initialize), arg0, arg1, arg2, arg3, arg4, arg5)
}

// InstallEgressQoS mocks base method.
func (m *MockClient) InstallEgressQoS(arg0, arg1, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallEgressQoS", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallEgressQoS indicates an expected call of InstallEgressQoS.
func (mr *MockClientMockRecorder) InstallEgressQoS(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallEgressQoS", reflect.TypeOf((*MockClient)(nil).InstallEgressQoS), arg0, arg1, arg2)
}

// InstallEndpointFlows mocks base method.
func (m *MockClient) InstallEndpointFlows(arg0 openflow0.Protocol, arg1 []proxy.Endpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallEndpointFlows", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallEndpointFlows indicates an expected call of InstallEndpointFlows.
func (mr *MockClientMockRecorder) InstallEndpointFlows(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallEndpointFlows", reflect.TypeOf((*MockClient)(nil).InstallEndpointFlows), arg0, arg1)
}

// InstallMulticastFlexibleIPAMFlows mocks base method.
func (m *MockClient) InstallMulticastFlexibleIPAMFlows() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallMulticastFlexibleIPAMFlows")
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallMulticastFlexibleIPAMFlows indicates an expected call of InstallMulticastFlexibleIPAMFlows.
func (mr *MockClientMockRecorder) InstallMulticastFlexibleIPAMFlows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallMulticastFlexibleIPAMFlows", reflect.TypeOf((*MockClient)(nil).InstallMulticastFlexibleIPAMFlows))
}

// InstallMulticastFlows mocks base method.
func (m *MockClient) InstallMulticastFlows(arg0 net.IP, arg1 openflow0.GroupIDType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallMulticastFlows", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallMulticastFlows indicates an expected call of InstallMulticastFlows.
func (mr *MockClientMockRecorder) InstallMulticastFlows(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallMulticastFlows", reflect.TypeOf((*MockClient)(nil).InstallMulticastFlows), arg0, arg1)
}

// InstallMulticastGroup mocks base method.
func (m *MockClient) InstallMulticastGroup(arg0 openflow0.GroupIDType, arg1 []uint32, arg2 []net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallMulticastGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallMulticastGroup indicates an expected call of InstallMulticastGroup.
func (mr *MockClientMockRecorder) InstallMulticastGroup(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallMulticastGroup", reflect.TypeOf((*MockClient)(nil).InstallMulticastGroup), arg0, arg1, arg2)
}

// InstallMulticastRemoteReportFlows mocks base method.
func (m *MockClient) InstallMulticastRemoteReportFlows(arg0 openflow0.GroupIDType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallMulticastRemoteReportFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallMulticastRemoteReportFlows indicates an expected call of InstallMulticastRemoteReportFlows.
func (mr *MockClientMockRecorder) InstallMulticastRemoteReportFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallMulticastRemoteReportFlows", reflect.TypeOf((*MockClient)(nil).InstallMulticastRemoteReportFlows), arg0)
}

// InstallMulticlusterClassifierFlows mocks base method.
func (m *MockClient) InstallMulticlusterClassifierFlows(arg0 uint32, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallMulticlusterClassifierFlows", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallMulticlusterClassifierFlows indicates an expected call of InstallMulticlusterClassifierFlows.
func (mr *MockClientMockRecorder) InstallMulticlusterClassifierFlows(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallMulticlusterClassifierFlows", reflect.TypeOf((*MockClient)(nil).InstallMulticlusterClassifierFlows), arg0, arg1)
}

// InstallMulticlusterGatewayFlows mocks base method.
func (m *MockClient) InstallMulticlusterGatewayFlows(arg0 string, arg1 map[*net.IPNet]net.IP, arg2, arg3 net.IP, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallMulticlusterGatewayFlows", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallMulticlusterGatewayFlows indicates an expected call of InstallMulticlusterGatewayFlows.
func (mr *MockClientMockRecorder) InstallMulticlusterGatewayFlows(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallMulticlusterGatewayFlows", reflect.TypeOf((*MockClient)(nil).InstallMulticlusterGatewayFlows), arg0, arg1, arg2, arg3, arg4)
}

// InstallMulticlusterNodeFlows mocks base method.
func (m *MockClient) InstallMulticlusterNodeFlows(arg0 string, arg1 map[*net.IPNet]net.IP, arg2 net.IP, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallMulticlusterNodeFlows", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallMulticlusterNodeFlows indicates an expected call of InstallMulticlusterNodeFlows.
func (mr *MockClientMockRecorder) InstallMulticlusterNodeFlows(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallMulticlusterNodeFlows", reflect.TypeOf((*MockClient)(nil).InstallMulticlusterNodeFlows), arg0, arg1, arg2, arg3)
}

// InstallMulticlusterPodFlows mocks base method.
func (m *MockClient) InstallMulticlusterPodFlows(arg0, arg1 net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallMulticlusterPodFlows", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallMulticlusterPodFlows indicates an expected call of InstallMulticlusterPodFlows.
func (mr *MockClientMockRecorder) InstallMulticlusterPodFlows(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallMulticlusterPodFlows", reflect.TypeOf((*MockClient)(nil).InstallMulticlusterPodFlows), arg0, arg1)
}

// InstallNodeFlows mocks base method.
func (m *MockClient) InstallNodeFlows(arg0 string, arg1 map[*net.IPNet]net.IP, arg2 *ip.DualStackIPs, arg3 uint32, arg4 net.HardwareAddr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallNodeFlows", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallNodeFlows indicates an expected call of InstallNodeFlows.
func (mr *MockClientMockRecorder) InstallNodeFlows(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallNodeFlows", reflect.TypeOf((*MockClient)(nil).InstallNodeFlows), arg0, arg1, arg2, arg3, arg4)
}

// InstallPodFlows mocks base method.
func (m *MockClient) InstallPodFlows(arg0 string, arg1 []net.IP, arg2 net.HardwareAddr, arg3 uint32, arg4 uint16, arg5 *uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallPodFlows", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallPodFlows indicates an expected call of InstallPodFlows.
func (mr *MockClientMockRecorder) InstallPodFlows(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallPodFlows", reflect.TypeOf((*MockClient)(nil).InstallPodFlows), arg0, arg1, arg2, arg3, arg4, arg5)
}

// InstallPodSNATFlows mocks base method.
func (m *MockClient) InstallPodSNATFlows(arg0 uint32, arg1 net.IP, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallPodSNATFlows", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallPodSNATFlows indicates an expected call of InstallPodSNATFlows.
func (mr *MockClientMockRecorder) InstallPodSNATFlows(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallPodSNATFlows", reflect.TypeOf((*MockClient)(nil).InstallPodSNATFlows), arg0, arg1, arg2)
}

// InstallPolicyBypassFlows mocks base method.
func (m *MockClient) InstallPolicyBypassFlows(arg0 openflow0.Protocol, arg1 *net.IPNet, arg2 uint16, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallPolicyBypassFlows", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallPolicyBypassFlows indicates an expected call of InstallPolicyBypassFlows.
func (mr *MockClientMockRecorder) InstallPolicyBypassFlows(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallPolicyBypassFlows", reflect.TypeOf((*MockClient)(nil).InstallPolicyBypassFlows), arg0, arg1, arg2, arg3)
}

// InstallPolicyRuleFlows mocks base method.
func (m *MockClient) InstallPolicyRuleFlows(arg0 *types.PolicyRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallPolicyRuleFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallPolicyRuleFlows indicates an expected call of InstallPolicyRuleFlows.
func (mr *MockClientMockRecorder) InstallPolicyRuleFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallPolicyRuleFlows", reflect.TypeOf((*MockClient)(nil).InstallPolicyRuleFlows), arg0)
}

// InstallSNATBypassServiceFlows mocks base method.
func (m *MockClient) InstallSNATBypassServiceFlows(arg0 []*net.IPNet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallSNATBypassServiceFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallSNATBypassServiceFlows indicates an expected call of InstallSNATBypassServiceFlows.
func (mr *MockClientMockRecorder) InstallSNATBypassServiceFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallSNATBypassServiceFlows", reflect.TypeOf((*MockClient)(nil).InstallSNATBypassServiceFlows), arg0)
}

// InstallSNATMarkFlows mocks base method.
func (m *MockClient) InstallSNATMarkFlows(arg0 net.IP, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallSNATMarkFlows", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallSNATMarkFlows indicates an expected call of InstallSNATMarkFlows.
func (mr *MockClientMockRecorder) InstallSNATMarkFlows(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallSNATMarkFlows", reflect.TypeOf((*MockClient)(nil).InstallSNATMarkFlows), arg0, arg1)
}

// InstallServiceFlows mocks base method.
func (m *MockClient) InstallServiceFlows(arg0 *types.ServiceConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallServiceFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallServiceFlows indicates an expected call of InstallServiceFlows.
func (mr *MockClientMockRecorder) InstallServiceFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallServiceFlows", reflect.TypeOf((*MockClient)(nil).InstallServiceFlows), arg0)
}

// InstallServiceGroup mocks base method.
func (m *MockClient) InstallServiceGroup(arg0 openflow0.GroupIDType, arg1 bool, arg2 []proxy.Endpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallServiceGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallServiceGroup indicates an expected call of InstallServiceGroup.
func (mr *MockClientMockRecorder) InstallServiceGroup(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallServiceGroup", reflect.TypeOf((*MockClient)(nil).InstallServiceGroup), arg0, arg1, arg2)
}

// InstallTraceflowFlows mocks base method.
func (m *MockClient) InstallTraceflowFlows(arg0 byte, arg1, arg2, arg3 bool, arg4 *openflow0.Packet, arg5 uint32, arg6 uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallTraceflowFlows", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallTraceflowFlows indicates an expected call of InstallTraceflowFlows.
func (mr *MockClientMockRecorder) InstallTraceflowFlows(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallTraceflowFlows", reflect.TypeOf((*MockClient)(nil).InstallTraceflowFlows), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// InstallTrafficControlMarkFlows mocks base method.
func (m *MockClient) InstallTrafficControlMarkFlows(arg0 string, arg1 []uint32, arg2 uint32, arg3 v1alpha2.Direction, arg4 v1alpha2.TrafficControlAction, arg5 types.TrafficControlFlowPriority) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallTrafficControlMarkFlows", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallTrafficControlMarkFlows indicates an expected call of InstallTrafficControlMarkFlows.
func (mr *MockClientMockRecorder) InstallTrafficControlMarkFlows(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallTrafficControlMarkFlows", reflect.TypeOf((*MockClient)(nil).InstallTrafficControlMarkFlows), arg0, arg1, arg2, arg3, arg4, arg5)
}

// InstallTrafficControlReturnPortFlow mocks base method.
func (m *MockClient) InstallTrafficControlReturnPortFlow(arg0 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallTrafficControlReturnPortFlow", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallTrafficControlReturnPortFlow indicates an expected call of InstallTrafficControlReturnPortFlow.
func (mr *MockClientMockRecorder) InstallTrafficControlReturnPortFlow(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallTrafficControlReturnPortFlow", reflect.TypeOf((*MockClient)(nil).InstallTrafficControlReturnPortFlow), arg0)
}

// InstallVMUplinkFlows mocks base method.
func (m *MockClient) InstallVMUplinkFlows(arg0 string, arg1, arg2 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallVMUplinkFlows", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallVMUplinkFlows indicates an expected call of InstallVMUplinkFlows.
func (mr *MockClientMockRecorder) InstallVMUplinkFlows(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallVMUplinkFlows", reflect.TypeOf((*MockClient)(nil).InstallVMUplinkFlows), arg0, arg1, arg2)
}

// IsConnected mocks base method.
func (m *MockClient) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockClientMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockClient)(nil).IsConnected))
}

// MulticastEgressPodMetrics mocks base method.
func (m *MockClient) MulticastEgressPodMetrics() map[string]*types.RuleMetric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MulticastEgressPodMetrics")
	ret0, _ := ret[0].(map[string]*types.RuleMetric)
	return ret0
}

// MulticastEgressPodMetrics indicates an expected call of MulticastEgressPodMetrics.
func (mr *MockClientMockRecorder) MulticastEgressPodMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MulticastEgressPodMetrics", reflect.TypeOf((*MockClient)(nil).MulticastEgressPodMetrics))
}

// MulticastEgressPodMetricsByIP mocks base method.
func (m *MockClient) MulticastEgressPodMetricsByIP(arg0 net.IP) *types.RuleMetric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MulticastEgressPodMetricsByIP", arg0)
	ret0, _ := ret[0].(*types.RuleMetric)
	return ret0
}

// MulticastEgressPodMetricsByIP indicates an expected call of MulticastEgressPodMetricsByIP.
func (mr *MockClientMockRecorder) MulticastEgressPodMetricsByIP(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MulticastEgressPodMetricsByIP", reflect.TypeOf((*MockClient)(nil).MulticastEgressPodMetricsByIP), arg0)
}

// MulticastIngressPodMetrics mocks base method.
func (m *MockClient) MulticastIngressPodMetrics() map[uint32]*types.RuleMetric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MulticastIngressPodMetrics")
	ret0, _ := ret[0].(map[uint32]*types.RuleMetric)
	return ret0
}

// MulticastIngressPodMetrics indicates an expected call of MulticastIngressPodMetrics.
func (mr *MockClientMockRecorder) MulticastIngressPodMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MulticastIngressPodMetrics", reflect.TypeOf((*MockClient)(nil).MulticastIngressPodMetrics))
}

// MulticastIngressPodMetricsByOFPort mocks base method.
func (m *MockClient) MulticastIngressPodMetricsByOFPort(arg0 int32) *types.RuleMetric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MulticastIngressPodMetricsByOFPort", arg0)
	ret0, _ := ret[0].(*types.RuleMetric)
	return ret0
}

// MulticastIngressPodMetricsByOFPort indicates an expected call of MulticastIngressPodMetricsByOFPort.
func (mr *MockClientMockRecorder) MulticastIngressPodMetricsByOFPort(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MulticastIngressPodMetricsByOFPort", reflect.TypeOf((*MockClient)(nil).MulticastIngressPodMetricsByOFPort), arg0)
}

// NetworkPolicyMetrics mocks base method.
func (m *MockClient) NetworkPolicyMetrics() map[uint32]*types.RuleMetric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkPolicyMetrics")
	ret0, _ := ret[0].(map[uint32]*types.RuleMetric)
	return ret0
}

// NetworkPolicyMetrics indicates an expected call of NetworkPolicyMetrics.
func (mr *MockClientMockRecorder) NetworkPolicyMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkPolicyMetrics", reflect.TypeOf((*MockClient)(nil).NetworkPolicyMetrics))
}

// NewDNSPacketInConjunction mocks base method.
func (m *MockClient) NewDNSPacketInConjunction(arg0 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDNSPacketInConjunction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewDNSPacketInConjunction indicates an expected call of NewDNSPacketInConjunction.
func (mr *MockClientMockRecorder) NewDNSPacketInConjunction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDNSPacketInConjunction", reflect.TypeOf((*MockClient)(nil).NewDNSPacketInConjunction), arg0)
}

// ReassignFlowPriorities mocks base method.
func (m *MockClient) ReassignFlowPriorities(arg0 map[uint16]uint16, arg1 byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReassignFlowPriorities", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReassignFlowPriorities indicates an expected call of ReassignFlowPriorities.
func (mr *MockClientMockRecorder) ReassignFlowPriorities(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReassignFlowPriorities", reflect.TypeOf((*MockClient)(nil).ReassignFlowPriorities), arg0, arg1)
}

// RegisterPacketInHandler mocks base method.
func (m *MockClient) RegisterPacketInHandler(arg0 byte, arg1 openflow.PacketInHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterPacketInHandler", arg0, arg1)
}

// RegisterPacketInHandler indicates an expected call of RegisterPacketInHandler.
func (mr *MockClientMockRecorder) RegisterPacketInHandler(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPacketInHandler", reflect.TypeOf((*MockClient)(nil).RegisterPacketInHandler), arg0, arg1)
}

// ReplayFlows mocks base method.
func (m *MockClient) ReplayFlows() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReplayFlows")
}

// ReplayFlows indicates an expected call of ReplayFlows.
func (mr *MockClientMockRecorder) ReplayFlows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplayFlows", reflect.TypeOf((*MockClient)(nil).ReplayFlows))
}

// ResumePausePacket mocks base method.
func (m *MockClient) ResumePausePacket(arg0 *ofctrl.PacketIn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumePausePacket", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumePausePacket indicates an expected call of ResumePausePacket.
func (mr *MockClientMockRecorder) ResumePausePacket(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumePausePacket", reflect.TypeOf((*MockClient)(nil).ResumePausePacket), arg0)
}

// SendEthPacketOut mocks base method.
func (m *MockClient) SendEthPacketOut(arg0, arg1 uint32, arg2 *protocol.Ethernet, arg3 func(openflow0.PacketOutBuilder) openflow0.PacketOutBuilder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEthPacketOut", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEthPacketOut indicates an expected call of SendEthPacketOut.
func (mr *MockClientMockRecorder) SendEthPacketOut(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEthPacketOut", reflect.TypeOf((*MockClient)(nil).SendEthPacketOut), arg0, arg1, arg2, arg3)
}

// SendICMPPacketOut mocks base method.
func (m *MockClient) SendICMPPacketOut(arg0, arg1, arg2, arg3 string, arg4, arg5 uint32, arg6 bool, arg7, arg8 byte, arg9 []byte, arg10 func(openflow0.PacketOutBuilder) openflow0.PacketOutBuilder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendICMPPacketOut", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendICMPPacketOut indicates an expected call of SendICMPPacketOut.
func (mr *MockClientMockRecorder) SendICMPPacketOut(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendICMPPacketOut", reflect.TypeOf((*MockClient)(nil).SendICMPPacketOut), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// SendIGMPQueryPacketOut mocks base method.
func (m *MockClient) SendIGMPQueryPacketOut(arg0 net.HardwareAddr, arg1 net.IP, arg2 uint32, arg3 util.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendIGMPQueryPacketOut", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendIGMPQueryPacketOut indicates an expected call of SendIGMPQueryPacketOut.
func (mr *MockClientMockRecorder) SendIGMPQueryPacketOut(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendIGMPQueryPacketOut", reflect.TypeOf((*MockClient)(nil).SendIGMPQueryPacketOut), arg0, arg1, arg2, arg3)
}

// SendIGMPRemoteReportPacketOut mocks base method.
func (m *MockClient) SendIGMPRemoteReportPacketOut(arg0 net.HardwareAddr, arg1 net.IP, arg2 util.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendIGMPRemoteReportPacketOut", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendIGMPRemoteReportPacketOut indicates an expected call of SendIGMPRemoteReportPacketOut.
func (mr *MockClientMockRecorder) SendIGMPRemoteReportPacketOut(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendIGMPRemoteReportPacketOut", reflect.TypeOf((*MockClient)(nil).SendIGMPRemoteReportPacketOut), arg0, arg1, arg2)
}

// SendTCPPacketOut mocks base method.
func (m *MockClient) SendTCPPacketOut(arg0, arg1, arg2, arg3 string, arg4, arg5 uint32, arg6 bool, arg7, arg8 uint16, arg9, arg10 uint32, arg11, arg12 byte, arg13 uint16, arg14 []byte, arg15 func(openflow0.PacketOutBuilder) openflow0.PacketOutBuilder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTCPPacketOut", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTCPPacketOut indicates an expected call of SendTCPPacketOut.
func (mr *MockClientMockRecorder) SendTCPPacketOut(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTCPPacketOut", reflect.TypeOf((*MockClient)(nil).SendTCPPacketOut), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
}

// SendTraceflowPacket mocks base method.
func (m *MockClient) SendTraceflowPacket(arg0 byte, arg1 *openflow0.Packet, arg2 uint32, arg3 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTraceflowPacket", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTraceflowPacket indicates an expected call of SendTraceflowPacket.
func (mr *MockClientMockRecorder) SendTraceflowPacket(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTraceflowPacket", reflect.TypeOf((*MockClient)(nil).SendTraceflowPacket), arg0, arg1, arg2, arg3)
}

// SendUDPPacketOut mocks base method.
func (m *MockClient) SendUDPPacketOut(arg0, arg1, arg2, arg3 string, arg4, arg5 uint32, arg6 bool, arg7, arg8 uint16, arg9 []byte, arg10 func(openflow0.PacketOutBuilder) openflow0.PacketOutBuilder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUDPPacketOut", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUDPPacketOut indicates an expected call of SendUDPPacketOut.
func (mr *MockClientMockRecorder) SendUDPPacketOut(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUDPPacketOut", reflect.TypeOf((*MockClient)(nil).SendUDPPacketOut), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// StartPacketInHandler mocks base method.
func (m *MockClient) StartPacketInHandler(arg0 <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartPacketInHandler", arg0)
}

// StartPacketInHandler indicates an expected call of StartPacketInHandler.
func (mr *MockClientMockRecorder) StartPacketInHandler(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPacketInHandler", reflect.TypeOf((*MockClient)(nil).StartPacketInHandler), arg0)
}

// SubscribePacketIn mocks base method.
func (m *MockClient) SubscribePacketIn(arg0 byte, arg1 *openflow0.PacketInQueue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribePacketIn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribePacketIn indicates an expected call of SubscribePacketIn.
func (mr *MockClientMockRecorder) SubscribePacketIn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribePacketIn", reflect.TypeOf((*MockClient)(nil).SubscribePacketIn), arg0, arg1)
}

// UninstallEgressQoS mocks base method.
func (m *MockClient) UninstallEgressQoS(arg0 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallEgressQoS", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallEgressQoS indicates an expected call of UninstallEgressQoS.
func (mr *MockClientMockRecorder) UninstallEgressQoS(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallEgressQoS", reflect.TypeOf((*MockClient)(nil).UninstallEgressQoS), arg0)
}

// UninstallEndpointFlows mocks base method.
func (m *MockClient) UninstallEndpointFlows(arg0 openflow0.Protocol, arg1 []proxy.Endpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallEndpointFlows", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallEndpointFlows indicates an expected call of UninstallEndpointFlows.
func (mr *MockClientMockRecorder) UninstallEndpointFlows(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallEndpointFlows", reflect.TypeOf((*MockClient)(nil).UninstallEndpointFlows), arg0, arg1)
}

// UninstallMulticastFlows mocks base method.
func (m *MockClient) UninstallMulticastFlows(arg0 net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallMulticastFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallMulticastFlows indicates an expected call of UninstallMulticastFlows.
func (mr *MockClientMockRecorder) UninstallMulticastFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallMulticastFlows", reflect.TypeOf((*MockClient)(nil).UninstallMulticastFlows), arg0)
}

// UninstallMulticastGroup mocks base method.
func (m *MockClient) UninstallMulticastGroup(arg0 openflow0.GroupIDType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallMulticastGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallMulticastGroup indicates an expected call of UninstallMulticastGroup.
func (mr *MockClientMockRecorder) UninstallMulticastGroup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallMulticastGroup", reflect.TypeOf((*MockClient)(nil).UninstallMulticastGroup), arg0)
}

// UninstallMulticlusterFlows mocks base method.
func (m *MockClient) UninstallMulticlusterFlows(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallMulticlusterFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallMulticlusterFlows indicates an expected call of UninstallMulticlusterFlows.
func (mr *MockClientMockRecorder) UninstallMulticlusterFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallMulticlusterFlows", reflect.TypeOf((*MockClient)(nil).UninstallMulticlusterFlows), arg0)
}

// UninstallMulticlusterPodFlows mocks base method.
func (m *MockClient) UninstallMulticlusterPodFlows(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallMulticlusterPodFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallMulticlusterPodFlows indicates an expected call of UninstallMulticlusterPodFlows.
func (mr *MockClientMockRecorder) UninstallMulticlusterPodFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallMulticlusterPodFlows", reflect.TypeOf((*MockClient)(nil).UninstallMulticlusterPodFlows), arg0)
}

// UninstallNodeFlows mocks base method.
func (m *MockClient) UninstallNodeFlows(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallNodeFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallNodeFlows indicates an expected call of UninstallNodeFlows.
func (mr *MockClientMockRecorder) UninstallNodeFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallNodeFlows", reflect.TypeOf((*MockClient)(nil).UninstallNodeFlows), arg0)
}

// UninstallPodFlows mocks base method.
func (m *MockClient) UninstallPodFlows(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallPodFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallPodFlows indicates an expected call of UninstallPodFlows.
func (mr *MockClientMockRecorder) UninstallPodFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallPodFlows", reflect.TypeOf((*MockClient)(nil).UninstallPodFlows), arg0)
}

// UninstallPodSNATFlows mocks base method.
func (m *MockClient) UninstallPodSNATFlows(arg0 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallPodSNATFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallPodSNATFlows indicates an expected call of UninstallPodSNATFlows.
func (mr *MockClientMockRecorder) UninstallPodSNATFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallPodSNATFlows", reflect.TypeOf((*MockClient)(nil).UninstallPodSNATFlows), arg0)
}

// UninstallPolicyRuleFlows mocks base method.
func (m *MockClient) UninstallPolicyRuleFlows(arg0 uint32) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallPolicyRuleFlows", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UninstallPolicyRuleFlows indicates an expected call of UninstallPolicyRuleFlows.
func (mr *MockClientMockRecorder) UninstallPolicyRuleFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallPolicyRuleFlows", reflect.TypeOf((*MockClient)(nil).UninstallPolicyRuleFlows), arg0)
}

// UninstallSNATMarkFlows mocks base method.
func (m *MockClient) UninstallSNATMarkFlows(arg0 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallSNATMarkFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallSNATMarkFlows indicates an expected call of UninstallSNATMarkFlows.
func (mr *MockClientMockRecorder) UninstallSNATMarkFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallSNATMarkFlows", reflect.TypeOf((*MockClient)(nil).UninstallSNATMarkFlows), arg0)
}

// UninstallServiceFlows mocks base method.
func (m *MockClient) UninstallServiceFlows(arg0 net.IP, arg1 uint16, arg2 openflow0.Protocol) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallServiceFlows", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallServiceFlows indicates an expected call of UninstallServiceFlows.
func (mr *MockClientMockRecorder) UninstallServiceFlows(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallServiceFlows", reflect.TypeOf((*MockClient)(nil).UninstallServiceFlows), arg0, arg1, arg2)
}

// UninstallServiceGroup mocks base method.
func (m *MockClient) UninstallServiceGroup(arg0 openflow0.GroupIDType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallServiceGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallServiceGroup indicates an expected call of UninstallServiceGroup.
func (mr *MockClientMockRecorder) UninstallServiceGroup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallServiceGroup", reflect.TypeOf((*MockClient)(nil).UninstallServiceGroup), arg0)
}

// UninstallTraceflowFlows mocks base method.
func (m *MockClient) UninstallTraceflowFlows(arg0 byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallTraceflowFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallTraceflowFlows indicates an expected call of UninstallTraceflowFlows.
func (mr *MockClientMockRecorder) UninstallTraceflowFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallTraceflowFlows", reflect.TypeOf((*MockClient)(nil).UninstallTraceflowFlows), arg0)
}

// UninstallTrafficControlMarkFlows mocks base method.
func (m *MockClient) UninstallTrafficControlMarkFlows(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallTrafficControlMarkFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallTrafficControlMarkFlows indicates an expected call of UninstallTrafficControlMarkFlows.
func (mr *MockClientMockRecorder) UninstallTrafficControlMarkFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallTrafficControlMarkFlows", reflect.TypeOf((*MockClient)(nil).UninstallTrafficControlMarkFlows), arg0)
}

// UninstallTrafficControlReturnPortFlow mocks base method.
func (m *MockClient) UninstallTrafficControlReturnPortFlow(arg0 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallTrafficControlReturnPortFlow", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallTrafficControlReturnPortFlow indicates an expected call of UninstallTrafficControlReturnPortFlow.
func (mr *MockClientMockRecorder) UninstallTrafficControlReturnPortFlow(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallTrafficControlReturnPortFlow", reflect.TypeOf((*MockClient)(nil).UninstallTrafficControlReturnPortFlow), arg0)
}

// UninstallVMUplinkFlows mocks base method.
func (m *MockClient) UninstallVMUplinkFlows(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallVMUplinkFlows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallVMUplinkFlows indicates an expected call of UninstallVMUplinkFlows.
func (mr *MockClientMockRecorder) UninstallVMUplinkFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallVMUplinkFlows", reflect.TypeOf((*MockClient)(nil).UninstallVMUplinkFlows), arg0)
}
