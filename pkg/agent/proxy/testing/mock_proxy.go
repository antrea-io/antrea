// Copyright 2020 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/antrea/pkg/agent/proxy (interfaces: Proxier)

// Package testing is a generated GoMock package.
package testing

import (
	gomock "github.com/golang/mock/gomock"
	proxy "github.com/vmware-tanzu/antrea/third_party/proxy"
	reflect "reflect"
)

// MockProxier is a mock of Proxier interface
type MockProxier struct {
	ctrl     *gomock.Controller
	recorder *MockProxierMockRecorder
}

// MockProxierMockRecorder is the mock recorder for MockProxier
type MockProxierMockRecorder struct {
	mock *MockProxier
}

// NewMockProxier creates a new mock instance
func NewMockProxier(ctrl *gomock.Controller) *MockProxier {
	mock := &MockProxier{ctrl: ctrl}
	mock.recorder = &MockProxierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProxier) EXPECT() *MockProxierMockRecorder {
	return m.recorder
}

// GetServiceByIP mocks base method
func (m *MockProxier) GetServiceByIP(arg0 string) (proxy.ServicePortName, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByIP", arg0)
	ret0, _ := ret[0].(proxy.ServicePortName)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetServiceByIP indicates an expected call of GetServiceByIP
func (mr *MockProxierMockRecorder) GetServiceByIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByIP", reflect.TypeOf((*MockProxier)(nil).GetServiceByIP), arg0)
}

// Run mocks base method
func (m *MockProxier) Run(arg0 <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run
func (mr *MockProxierMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockProxier)(nil).Run), arg0)
}
