// Copyright 2023 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: antrea.io/antrea/pkg/agent/ipassigner/responder (interfaces: Responder)
//
// Generated by this command:
//
//	mockgen -copyright_file hack/boilerplate/license_header.raw.txt -destination pkg/agent/ipassigner/responder/testing/mock_responder.go -package testing antrea.io/antrea/pkg/agent/ipassigner/responder Responder
//
// Package testing is a generated GoMock package.
package testing

import (
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockResponder is a mock of Responder interface.
type MockResponder struct {
	ctrl     *gomock.Controller
	recorder *MockResponderMockRecorder
}

// MockResponderMockRecorder is the mock recorder for MockResponder.
type MockResponderMockRecorder struct {
	mock *MockResponder
}

// NewMockResponder creates a new mock instance.
func NewMockResponder(ctrl *gomock.Controller) *MockResponder {
	mock := &MockResponder{ctrl: ctrl}
	mock.recorder = &MockResponderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponder) EXPECT() *MockResponderMockRecorder {
	return m.recorder
}

// AddIP mocks base method.
func (m *MockResponder) AddIP(arg0 net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIP", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIP indicates an expected call of AddIP.
func (mr *MockResponderMockRecorder) AddIP(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIP", reflect.TypeOf((*MockResponder)(nil).AddIP), arg0)
}

// InterfaceName mocks base method.
func (m *MockResponder) InterfaceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InterfaceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// InterfaceName indicates an expected call of InterfaceName.
func (mr *MockResponderMockRecorder) InterfaceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InterfaceName", reflect.TypeOf((*MockResponder)(nil).InterfaceName))
}

// RemoveIP mocks base method.
func (m *MockResponder) RemoveIP(arg0 net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveIP", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveIP indicates an expected call of RemoveIP.
func (mr *MockResponderMockRecorder) RemoveIP(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIP", reflect.TypeOf((*MockResponder)(nil).RemoveIP), arg0)
}

// Run mocks base method.
func (m *MockResponder) Run(arg0 <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run.
func (mr *MockResponderMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockResponder)(nil).Run), arg0)
}
