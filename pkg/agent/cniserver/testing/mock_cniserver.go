// Copyright 2024 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: antrea.io/antrea/pkg/agent/cniserver (interfaces: SriovNet)
//
// Generated by this command:
//
//	mockgen -copyright_file hack/boilerplate/license_header.raw.txt -destination pkg/agent/cniserver/testing/mock_cniserver.go -package testing antrea.io/antrea/pkg/agent/cniserver SriovNet
//

// Package testing is a generated GoMock package.
package testing

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSriovNet is a mock of SriovNet interface.
type MockSriovNet struct {
	ctrl     *gomock.Controller
	recorder *MockSriovNetMockRecorder
	isgomock struct{}
}

// MockSriovNetMockRecorder is the mock recorder for MockSriovNet.
type MockSriovNetMockRecorder struct {
	mock *MockSriovNet
}

// NewMockSriovNet creates a new mock instance.
func NewMockSriovNet(ctrl *gomock.Controller) *MockSriovNet {
	mock := &MockSriovNet{ctrl: ctrl}
	mock.recorder = &MockSriovNetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSriovNet) EXPECT() *MockSriovNetMockRecorder {
	return m.recorder
}

// GetNetDevicesFromPci mocks base method.
func (m *MockSriovNet) GetNetDevicesFromPci(pciAddress string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetDevicesFromPci", pciAddress)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetDevicesFromPci indicates an expected call of GetNetDevicesFromPci.
func (mr *MockSriovNetMockRecorder) GetNetDevicesFromPci(pciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetDevicesFromPci", reflect.TypeOf((*MockSriovNet)(nil).GetNetDevicesFromPci), pciAddress)
}

// GetPfName mocks base method.
func (m *MockSriovNet) GetPfName(vf string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPfName", vf)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPfName indicates an expected call of GetPfName.
func (mr *MockSriovNetMockRecorder) GetPfName(vf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPfName", reflect.TypeOf((*MockSriovNet)(nil).GetPfName), vf)
}

// GetUplinkRepresentor mocks base method.
func (m *MockSriovNet) GetUplinkRepresentor(pciAddress string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUplinkRepresentor", pciAddress)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUplinkRepresentor indicates an expected call of GetUplinkRepresentor.
func (mr *MockSriovNetMockRecorder) GetUplinkRepresentor(pciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUplinkRepresentor", reflect.TypeOf((*MockSriovNet)(nil).GetUplinkRepresentor), pciAddress)
}

// GetVFLinkNames mocks base method.
func (m *MockSriovNet) GetVFLinkNames(pciAddr string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVFLinkNames", pciAddr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVFLinkNames indicates an expected call of GetVFLinkNames.
func (mr *MockSriovNetMockRecorder) GetVFLinkNames(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVFLinkNames", reflect.TypeOf((*MockSriovNet)(nil).GetVFLinkNames), pciAddr)
}

// GetVfIndexByPciAddress mocks base method.
func (m *MockSriovNet) GetVfIndexByPciAddress(vfPciAddress string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVfIndexByPciAddress", vfPciAddress)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVfIndexByPciAddress indicates an expected call of GetVfIndexByPciAddress.
func (mr *MockSriovNetMockRecorder) GetVfIndexByPciAddress(vfPciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVfIndexByPciAddress", reflect.TypeOf((*MockSriovNet)(nil).GetVfIndexByPciAddress), vfPciAddress)
}

// GetVfRepresentor mocks base method.
func (m *MockSriovNet) GetVfRepresentor(uplink string, vfIndex int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVfRepresentor", uplink, vfIndex)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVfRepresentor indicates an expected call of GetVfRepresentor.
func (mr *MockSriovNetMockRecorder) GetVfRepresentor(uplink, vfIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVfRepresentor", reflect.TypeOf((*MockSriovNet)(nil).GetVfRepresentor), uplink, vfIndex)
}

// GetVfid mocks base method.
func (m *MockSriovNet) GetVfid(addr, pfName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVfid", addr, pfName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVfid indicates an expected call of GetVfid.
func (mr *MockSriovNetMockRecorder) GetVfid(addr, pfName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVfid", reflect.TypeOf((*MockSriovNet)(nil).GetVfid), addr, pfName)
}
