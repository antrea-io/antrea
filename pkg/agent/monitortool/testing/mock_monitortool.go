// Copyright 2024 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: antrea.io/antrea/pkg/agent/monitortool (interfaces: PacketListener)
//
// Generated by this command:
//
//	mockgen -copyright_file hack/boilerplate/license_header.raw.txt -destination pkg/agent/monitortool/testing/mock_monitortool.go -package testing antrea.io/antrea/pkg/agent/monitortool PacketListener
//

// Package testing is a generated GoMock package.
package testing

import (
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPacketListener is a mock of PacketListener interface.
type MockPacketListener struct {
	ctrl     *gomock.Controller
	recorder *MockPacketListenerMockRecorder
	isgomock struct{}
}

// MockPacketListenerMockRecorder is the mock recorder for MockPacketListener.
type MockPacketListenerMockRecorder struct {
	mock *MockPacketListener
}

// NewMockPacketListener creates a new mock instance.
func NewMockPacketListener(ctrl *gomock.Controller) *MockPacketListener {
	mock := &MockPacketListener{ctrl: ctrl}
	mock.recorder = &MockPacketListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketListener) EXPECT() *MockPacketListenerMockRecorder {
	return m.recorder
}

// ListenPacket mocks base method.
func (m *MockPacketListener) ListenPacket(network, address string) (net.PacketConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenPacket", network, address)
	ret0, _ := ret[0].(net.PacketConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenPacket indicates an expected call of ListenPacket.
func (mr *MockPacketListenerMockRecorder) ListenPacket(network, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenPacket", reflect.TypeOf((*MockPacketListener)(nil).ListenPacket), network, address)
}
