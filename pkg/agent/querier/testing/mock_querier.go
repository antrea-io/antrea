// Copyright 2020 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/antrea/pkg/agent/querier (interfaces: AgentQuerier)

// Package testing is a generated GoMock package.
package testing

import (
	gomock "github.com/golang/mock/gomock"
	interfacestore "github.com/vmware-tanzu/antrea/pkg/agent/interfacestore"
	openflow "github.com/vmware-tanzu/antrea/pkg/agent/openflow"
	v1beta1 "github.com/vmware-tanzu/antrea/pkg/apis/clusterinformation/v1beta1"
	ofctl "github.com/vmware-tanzu/antrea/pkg/ovs/ofctl"
	querier "github.com/vmware-tanzu/antrea/pkg/querier"
	reflect "reflect"
)

// MockAgentQuerier is a mock of AgentQuerier interface
type MockAgentQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockAgentQuerierMockRecorder
}

// MockAgentQuerierMockRecorder is the mock recorder for MockAgentQuerier
type MockAgentQuerierMockRecorder struct {
	mock *MockAgentQuerier
}

// NewMockAgentQuerier creates a new mock instance
func NewMockAgentQuerier(ctrl *gomock.Controller) *MockAgentQuerier {
	mock := &MockAgentQuerier{ctrl: ctrl}
	mock.recorder = &MockAgentQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgentQuerier) EXPECT() *MockAgentQuerierMockRecorder {
	return m.recorder
}

// GetAgentInfo mocks base method
func (m *MockAgentQuerier) GetAgentInfo(arg0 *v1beta1.AntreaAgentInfo, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAgentInfo", arg0, arg1)
}

// GetAgentInfo indicates an expected call of GetAgentInfo
func (mr *MockAgentQuerierMockRecorder) GetAgentInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentInfo", reflect.TypeOf((*MockAgentQuerier)(nil).GetAgentInfo), arg0, arg1)
}

// GetInterfaceStore mocks base method
func (m *MockAgentQuerier) GetInterfaceStore() interfacestore.InterfaceStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterfaceStore")
	ret0, _ := ret[0].(interfacestore.InterfaceStore)
	return ret0
}

// GetInterfaceStore indicates an expected call of GetInterfaceStore
func (mr *MockAgentQuerierMockRecorder) GetInterfaceStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterfaceStore", reflect.TypeOf((*MockAgentQuerier)(nil).GetInterfaceStore))
}

// GetNetworkPolicyInfoQuerier mocks base method
func (m *MockAgentQuerier) GetNetworkPolicyInfoQuerier() querier.AgentNetworkPolicyInfoQuerier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPolicyInfoQuerier")
	ret0, _ := ret[0].(querier.AgentNetworkPolicyInfoQuerier)
	return ret0
}

// GetNetworkPolicyInfoQuerier indicates an expected call of GetNetworkPolicyInfoQuerier
func (mr *MockAgentQuerierMockRecorder) GetNetworkPolicyInfoQuerier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPolicyInfoQuerier", reflect.TypeOf((*MockAgentQuerier)(nil).GetNetworkPolicyInfoQuerier))
}

// GetNodeName mocks base method
func (m *MockAgentQuerier) GetNodeName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNodeName indicates an expected call of GetNodeName
func (mr *MockAgentQuerierMockRecorder) GetNodeName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeName", reflect.TypeOf((*MockAgentQuerier)(nil).GetNodeName))
}

// GetOfctlClient mocks base method
func (m *MockAgentQuerier) GetOfctlClient() *ofctl.OfctlClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfctlClient")
	ret0, _ := ret[0].(*ofctl.OfctlClient)
	return ret0
}

// GetOfctlClient indicates an expected call of GetOfctlClient
func (mr *MockAgentQuerierMockRecorder) GetOfctlClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfctlClient", reflect.TypeOf((*MockAgentQuerier)(nil).GetOfctlClient))
}

// GetOpenflowClient mocks base method
func (m *MockAgentQuerier) GetOpenflowClient() openflow.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenflowClient")
	ret0, _ := ret[0].(openflow.Client)
	return ret0
}

// GetOpenflowClient indicates an expected call of GetOpenflowClient
func (mr *MockAgentQuerierMockRecorder) GetOpenflowClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenflowClient", reflect.TypeOf((*MockAgentQuerier)(nil).GetOpenflowClient))
}
