// Copyright 2020 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/antrea/pkg/agent/flowexporter/connections (interfaces: ConnTrackDumper,ConnTrackInterfacer)

// Package testing is a generated GoMock package.
package testing

import (
	gomock "github.com/golang/mock/gomock"
	flowexporter "github.com/vmware-tanzu/antrea/pkg/agent/flowexporter"
	reflect "reflect"
)

// MockConnTrackDumper is a mock of ConnTrackDumper interface
type MockConnTrackDumper struct {
	ctrl     *gomock.Controller
	recorder *MockConnTrackDumperMockRecorder
}

// MockConnTrackDumperMockRecorder is the mock recorder for MockConnTrackDumper
type MockConnTrackDumperMockRecorder struct {
	mock *MockConnTrackDumper
}

// NewMockConnTrackDumper creates a new mock instance
func NewMockConnTrackDumper(ctrl *gomock.Controller) *MockConnTrackDumper {
	mock := &MockConnTrackDumper{ctrl: ctrl}
	mock.recorder = &MockConnTrackDumperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnTrackDumper) EXPECT() *MockConnTrackDumperMockRecorder {
	return m.recorder
}

// DumpFlows mocks base method
func (m *MockConnTrackDumper) DumpFlows(arg0 uint16) ([]*flowexporter.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpFlows", arg0)
	ret0, _ := ret[0].([]*flowexporter.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpFlows indicates an expected call of DumpFlows
func (mr *MockConnTrackDumperMockRecorder) DumpFlows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpFlows", reflect.TypeOf((*MockConnTrackDumper)(nil).DumpFlows), arg0)
}

// MockConnTrackInterfacer is a mock of ConnTrackInterfacer interface
type MockConnTrackInterfacer struct {
	ctrl     *gomock.Controller
	recorder *MockConnTrackInterfacerMockRecorder
}

// MockConnTrackInterfacerMockRecorder is the mock recorder for MockConnTrackInterfacer
type MockConnTrackInterfacerMockRecorder struct {
	mock *MockConnTrackInterfacer
}

// NewMockConnTrackInterfacer creates a new mock instance
func NewMockConnTrackInterfacer(ctrl *gomock.Controller) *MockConnTrackInterfacer {
	mock := &MockConnTrackInterfacer{ctrl: ctrl}
	mock.recorder = &MockConnTrackInterfacerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnTrackInterfacer) EXPECT() *MockConnTrackInterfacerMockRecorder {
	return m.recorder
}

// DumpFilter mocks base method
func (m *MockConnTrackInterfacer) DumpFilter(arg0 interface{}) ([]*flowexporter.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpFilter", arg0)
	ret0, _ := ret[0].([]*flowexporter.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpFilter indicates an expected call of DumpFilter
func (mr *MockConnTrackInterfacerMockRecorder) DumpFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpFilter", reflect.TypeOf((*MockConnTrackInterfacer)(nil).DumpFilter), arg0)
}

// GetConnTrack mocks base method
func (m *MockConnTrackInterfacer) GetConnTrack(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnTrack", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetConnTrack indicates an expected call of GetConnTrack
func (mr *MockConnTrackInterfacerMockRecorder) GetConnTrack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnTrack", reflect.TypeOf((*MockConnTrackInterfacer)(nil).GetConnTrack), arg0)
}
