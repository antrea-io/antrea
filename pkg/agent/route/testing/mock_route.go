// Copyright 2023 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: antrea.io/antrea/pkg/agent/route (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -copyright_file hack/boilerplate/license_header.raw.txt -destination pkg/agent/route/testing/mock_route.go -package testing antrea.io/antrea/pkg/agent/route Interface
//
// Package testing is a generated GoMock package.
package testing

import (
	net "net"
	reflect "reflect"

	config "antrea.io/antrea/pkg/agent/config"
	openflow "antrea.io/antrea/pkg/ovs/openflow"
	gomock "go.uber.org/mock/gomock"
	sets "k8s.io/apimachinery/pkg/util/sets"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AddEgressRoutes mocks base method.
func (m *MockInterface) AddEgressRoutes(arg0 uint32, arg1 int, arg2 net.IP, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEgressRoutes", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEgressRoutes indicates an expected call of AddEgressRoutes.
func (mr *MockInterfaceMockRecorder) AddEgressRoutes(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEgressRoutes", reflect.TypeOf((*MockInterface)(nil).AddEgressRoutes), arg0, arg1, arg2, arg3)
}

// AddEgressRule mocks base method.
func (m *MockInterface) AddEgressRule(arg0, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEgressRule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEgressRule indicates an expected call of AddEgressRule.
func (mr *MockInterfaceMockRecorder) AddEgressRule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEgressRule", reflect.TypeOf((*MockInterface)(nil).AddEgressRule), arg0, arg1)
}

// AddExternalIPRoute mocks base method.
func (m *MockInterface) AddExternalIPRoute(arg0 net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExternalIPRoute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddExternalIPRoute indicates an expected call of AddExternalIPRoute.
func (mr *MockInterfaceMockRecorder) AddExternalIPRoute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExternalIPRoute", reflect.TypeOf((*MockInterface)(nil).AddExternalIPRoute), arg0)
}

// AddLocalAntreaFlexibleIPAMPodRule mocks base method.
func (m *MockInterface) AddLocalAntreaFlexibleIPAMPodRule(arg0 []net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLocalAntreaFlexibleIPAMPodRule", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLocalAntreaFlexibleIPAMPodRule indicates an expected call of AddLocalAntreaFlexibleIPAMPodRule.
func (mr *MockInterfaceMockRecorder) AddLocalAntreaFlexibleIPAMPodRule(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocalAntreaFlexibleIPAMPodRule", reflect.TypeOf((*MockInterface)(nil).AddLocalAntreaFlexibleIPAMPodRule), arg0)
}

// AddNodePort mocks base method.
func (m *MockInterface) AddNodePort(arg0 []net.IP, arg1 uint16, arg2 openflow.Protocol) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNodePort", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNodePort indicates an expected call of AddNodePort.
func (mr *MockInterfaceMockRecorder) AddNodePort(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNodePort", reflect.TypeOf((*MockInterface)(nil).AddNodePort), arg0, arg1, arg2)
}

// AddOrUpdateNodeNetworkPolicyIPSet mocks base method.
func (m *MockInterface) AddOrUpdateNodeNetworkPolicyIPSet(arg0 string, arg1 sets.Set[string], arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateNodeNetworkPolicyIPSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateNodeNetworkPolicyIPSet indicates an expected call of AddOrUpdateNodeNetworkPolicyIPSet.
func (mr *MockInterfaceMockRecorder) AddOrUpdateNodeNetworkPolicyIPSet(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateNodeNetworkPolicyIPSet", reflect.TypeOf((*MockInterface)(nil).AddOrUpdateNodeNetworkPolicyIPSet), arg0, arg1, arg2)
}

// AddOrUpdateNodeNetworkPolicyIPTables mocks base method.
func (m *MockInterface) AddOrUpdateNodeNetworkPolicyIPTables(arg0 []string, arg1 [][]string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateNodeNetworkPolicyIPTables", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateNodeNetworkPolicyIPTables indicates an expected call of AddOrUpdateNodeNetworkPolicyIPTables.
func (mr *MockInterfaceMockRecorder) AddOrUpdateNodeNetworkPolicyIPTables(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateNodeNetworkPolicyIPTables", reflect.TypeOf((*MockInterface)(nil).AddOrUpdateNodeNetworkPolicyIPTables), arg0, arg1, arg2)
}

// AddRouteForLink mocks base method.
func (m *MockInterface) AddRouteForLink(arg0 *net.IPNet, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRouteForLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRouteForLink indicates an expected call of AddRouteForLink.
func (mr *MockInterfaceMockRecorder) AddRouteForLink(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRouteForLink", reflect.TypeOf((*MockInterface)(nil).AddRouteForLink), arg0, arg1)
}

// AddRoutes mocks base method.
func (m *MockInterface) AddRoutes(arg0 *net.IPNet, arg1 string, arg2, arg3 net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoutes", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoutes indicates an expected call of AddRoutes.
func (mr *MockInterfaceMockRecorder) AddRoutes(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoutes", reflect.TypeOf((*MockInterface)(nil).AddRoutes), arg0, arg1, arg2, arg3)
}

// AddSNATRule mocks base method.
func (m *MockInterface) AddSNATRule(arg0 net.IP, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSNATRule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSNATRule indicates an expected call of AddSNATRule.
func (mr *MockInterfaceMockRecorder) AddSNATRule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSNATRule", reflect.TypeOf((*MockInterface)(nil).AddSNATRule), arg0, arg1)
}

// ClearConntrackEntryForService mocks base method.
func (m *MockInterface) ClearConntrackEntryForService(arg0 net.IP, arg1 uint16, arg2 net.IP, arg3 openflow.Protocol) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearConntrackEntryForService", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearConntrackEntryForService indicates an expected call of ClearConntrackEntryForService.
func (mr *MockInterfaceMockRecorder) ClearConntrackEntryForService(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearConntrackEntryForService", reflect.TypeOf((*MockInterface)(nil).ClearConntrackEntryForService), arg0, arg1, arg2, arg3)
}

// DeleteEgressRoutes mocks base method.
func (m *MockInterface) DeleteEgressRoutes(arg0 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEgressRoutes", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEgressRoutes indicates an expected call of DeleteEgressRoutes.
func (mr *MockInterfaceMockRecorder) DeleteEgressRoutes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEgressRoutes", reflect.TypeOf((*MockInterface)(nil).DeleteEgressRoutes), arg0)
}

// DeleteEgressRule mocks base method.
func (m *MockInterface) DeleteEgressRule(arg0, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEgressRule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEgressRule indicates an expected call of DeleteEgressRule.
func (mr *MockInterfaceMockRecorder) DeleteEgressRule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEgressRule", reflect.TypeOf((*MockInterface)(nil).DeleteEgressRule), arg0, arg1)
}

// DeleteExternalIPRoute mocks base method.
func (m *MockInterface) DeleteExternalIPRoute(arg0 net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExternalIPRoute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExternalIPRoute indicates an expected call of DeleteExternalIPRoute.
func (mr *MockInterfaceMockRecorder) DeleteExternalIPRoute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExternalIPRoute", reflect.TypeOf((*MockInterface)(nil).DeleteExternalIPRoute), arg0)
}

// DeleteLocalAntreaFlexibleIPAMPodRule mocks base method.
func (m *MockInterface) DeleteLocalAntreaFlexibleIPAMPodRule(arg0 []net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocalAntreaFlexibleIPAMPodRule", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLocalAntreaFlexibleIPAMPodRule indicates an expected call of DeleteLocalAntreaFlexibleIPAMPodRule.
func (mr *MockInterfaceMockRecorder) DeleteLocalAntreaFlexibleIPAMPodRule(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocalAntreaFlexibleIPAMPodRule", reflect.TypeOf((*MockInterface)(nil).DeleteLocalAntreaFlexibleIPAMPodRule), arg0)
}

// DeleteNodeNetworkPolicyIPSet mocks base method.
func (m *MockInterface) DeleteNodeNetworkPolicyIPSet(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodeNetworkPolicyIPSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNodeNetworkPolicyIPSet indicates an expected call of DeleteNodeNetworkPolicyIPSet.
func (mr *MockInterfaceMockRecorder) DeleteNodeNetworkPolicyIPSet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeNetworkPolicyIPSet", reflect.TypeOf((*MockInterface)(nil).DeleteNodeNetworkPolicyIPSet), arg0, arg1)
}

// DeleteNodeNetworkPolicyIPTables mocks base method.
func (m *MockInterface) DeleteNodeNetworkPolicyIPTables(arg0 []string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodeNetworkPolicyIPTables", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNodeNetworkPolicyIPTables indicates an expected call of DeleteNodeNetworkPolicyIPTables.
func (mr *MockInterfaceMockRecorder) DeleteNodeNetworkPolicyIPTables(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeNetworkPolicyIPTables", reflect.TypeOf((*MockInterface)(nil).DeleteNodeNetworkPolicyIPTables), arg0, arg1)
}

// DeleteNodePort mocks base method.
func (m *MockInterface) DeleteNodePort(arg0 []net.IP, arg1 uint16, arg2 openflow.Protocol) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodePort", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNodePort indicates an expected call of DeleteNodePort.
func (mr *MockInterfaceMockRecorder) DeleteNodePort(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodePort", reflect.TypeOf((*MockInterface)(nil).DeleteNodePort), arg0, arg1, arg2)
}

// DeleteRouteForLink mocks base method.
func (m *MockInterface) DeleteRouteForLink(arg0 *net.IPNet, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteForLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouteForLink indicates an expected call of DeleteRouteForLink.
func (mr *MockInterfaceMockRecorder) DeleteRouteForLink(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteForLink", reflect.TypeOf((*MockInterface)(nil).DeleteRouteForLink), arg0, arg1)
}

// DeleteRoutes mocks base method.
func (m *MockInterface) DeleteRoutes(arg0 *net.IPNet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoutes", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoutes indicates an expected call of DeleteRoutes.
func (mr *MockInterfaceMockRecorder) DeleteRoutes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoutes", reflect.TypeOf((*MockInterface)(nil).DeleteRoutes), arg0)
}

// DeleteSNATRule mocks base method.
func (m *MockInterface) DeleteSNATRule(arg0 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSNATRule", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSNATRule indicates an expected call of DeleteSNATRule.
func (mr *MockInterfaceMockRecorder) DeleteSNATRule(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSNATRule", reflect.TypeOf((*MockInterface)(nil).DeleteSNATRule), arg0)
}

// Initialize mocks base method.
func (m *MockInterface) Initialize(arg0 *config.NodeConfig, arg1 func()) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockInterfaceMockRecorder) Initialize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockInterface)(nil).Initialize), arg0, arg1)
}

// MigrateRoutesToGw mocks base method.
func (m *MockInterface) MigrateRoutesToGw(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateRoutesToGw", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateRoutesToGw indicates an expected call of MigrateRoutesToGw.
func (mr *MockInterfaceMockRecorder) MigrateRoutesToGw(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateRoutesToGw", reflect.TypeOf((*MockInterface)(nil).MigrateRoutesToGw), arg0)
}

// Reconcile mocks base method.
func (m *MockInterface) Reconcile(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockInterfaceMockRecorder) Reconcile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockInterface)(nil).Reconcile), arg0)
}

// RestoreEgressRoutesAndRules mocks base method.
func (m *MockInterface) RestoreEgressRoutesAndRules(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreEgressRoutesAndRules", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreEgressRoutesAndRules indicates an expected call of RestoreEgressRoutesAndRules.
func (mr *MockInterfaceMockRecorder) RestoreEgressRoutesAndRules(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreEgressRoutesAndRules", reflect.TypeOf((*MockInterface)(nil).RestoreEgressRoutesAndRules), arg0, arg1)
}

// Run mocks base method.
func (m *MockInterface) Run(arg0 <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run.
func (mr *MockInterfaceMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockInterface)(nil).Run), arg0)
}

// UnMigrateRoutesFromGw mocks base method.
func (m *MockInterface) UnMigrateRoutesFromGw(arg0 *net.IPNet, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnMigrateRoutesFromGw", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnMigrateRoutesFromGw indicates an expected call of UnMigrateRoutesFromGw.
func (mr *MockInterfaceMockRecorder) UnMigrateRoutesFromGw(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnMigrateRoutesFromGw", reflect.TypeOf((*MockInterface)(nil).UnMigrateRoutesFromGw), arg0, arg1)
}
