// Copyright 2024 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: antrea.io/antrea/pkg/agent/util/ipset (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -copyright_file hack/boilerplate/license_header.raw.txt -destination pkg/agent/util/ipset/testing/mock_ipset.go -package testing antrea.io/antrea/pkg/agent/util/ipset Interface
//

// Package testing is a generated GoMock package.
package testing

import (
	reflect "reflect"

	ipset "antrea.io/antrea/pkg/agent/util/ipset"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AddEntry mocks base method.
func (m *MockInterface) AddEntry(name, entry string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEntry", name, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEntry indicates an expected call of AddEntry.
func (mr *MockInterfaceMockRecorder) AddEntry(name, entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntry", reflect.TypeOf((*MockInterface)(nil).AddEntry), name, entry)
}

// CreateIPSet mocks base method.
func (m *MockInterface) CreateIPSet(name string, setType ipset.SetType, isIPv6 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIPSet", name, setType, isIPv6)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIPSet indicates an expected call of CreateIPSet.
func (mr *MockInterfaceMockRecorder) CreateIPSet(name, setType, isIPv6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIPSet", reflect.TypeOf((*MockInterface)(nil).CreateIPSet), name, setType, isIPv6)
}

// DelEntry mocks base method.
func (m *MockInterface) DelEntry(name, entry string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelEntry", name, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelEntry indicates an expected call of DelEntry.
func (mr *MockInterfaceMockRecorder) DelEntry(name, entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelEntry", reflect.TypeOf((*MockInterface)(nil).DelEntry), name, entry)
}

// DestroyIPSet mocks base method.
func (m *MockInterface) DestroyIPSet(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyIPSet", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyIPSet indicates an expected call of DestroyIPSet.
func (mr *MockInterfaceMockRecorder) DestroyIPSet(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyIPSet", reflect.TypeOf((*MockInterface)(nil).DestroyIPSet), name)
}

// ListEntries mocks base method.
func (m *MockInterface) ListEntries(name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntries", name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntries indicates an expected call of ListEntries.
func (mr *MockInterfaceMockRecorder) ListEntries(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntries", reflect.TypeOf((*MockInterface)(nil).ListEntries), name)
}
