// Copyright 2022 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: antrea.io/antrea/pkg/agent/controller/noderoute (interfaces: ControllerInterface)

// Package testing is a generated GoMock package.
package testing

import (
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
)

// MockControllerInterface is a mock of ControllerInterface interface
type MockControllerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockControllerInterfaceMockRecorder
}

// MockControllerInterfaceMockRecorder is the mock recorder for MockControllerInterface
type MockControllerInterfaceMockRecorder struct {
	mock *MockControllerInterface
}

// NewMockControllerInterface creates a new mock instance
func NewMockControllerInterface(ctrl *gomock.Controller) *MockControllerInterface {
	mock := &MockControllerInterface{ctrl: ctrl}
	mock.recorder = &MockControllerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockControllerInterface) EXPECT() *MockControllerInterfaceMockRecorder {
	return m.recorder
}

// IPInPodSubnets mocks base method
func (m *MockControllerInterface) IPInPodSubnets(arg0 net.IP) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPInPodSubnets", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IPInPodSubnets indicates an expected call of IPInPodSubnets
func (mr *MockControllerInterfaceMockRecorder) IPInPodSubnets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPInPodSubnets", reflect.TypeOf((*MockControllerInterface)(nil).IPInPodSubnets), arg0)
}

// Run mocks base method
func (m *MockControllerInterface) Run(arg0 <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run
func (mr *MockControllerInterfaceMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockControllerInterface)(nil).Run), arg0)
}
