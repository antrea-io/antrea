// Copyright 2020 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/vmware-tanzu/antrea/pkg/apis/system/v1beta1"
	scheme "github.com/vmware-tanzu/antrea/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	rest "k8s.io/client-go/rest"
)

// BundlesGetter has a method to return a BundleInterface.
// A group's client should implement this interface.
type BundlesGetter interface {
	Bundles() BundleInterface
}

// BundleInterface has methods to work with Bundle resources.
type BundleInterface interface {
	Create(*v1beta1.Bundle) (*v1beta1.Bundle, error)
	Delete(name string, options *v1.DeleteOptions) error
	Get(name string, options v1.GetOptions) (*v1beta1.Bundle, error)
	BundleExpansion
}

// bundles implements BundleInterface
type bundles struct {
	client rest.Interface
}

// newBundles returns a Bundles
func newBundles(c *SystemV1beta1Client) *bundles {
	return &bundles{
		client: c.RESTClient(),
	}
}

// Get takes name of the bundle, and returns the corresponding bundle object, and an error if there is any.
func (c *bundles) Get(name string, options v1.GetOptions) (result *v1beta1.Bundle, err error) {
	result = &v1beta1.Bundle{}
	err = c.client.Get().
		Resource("bundles").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Create takes the representation of a bundle and creates it.  Returns the server's representation of the bundle, and an error, if there is any.
func (c *bundles) Create(bundle *v1beta1.Bundle) (result *v1beta1.Bundle, err error) {
	result = &v1beta1.Bundle{}
	err = c.client.Post().
		Resource("bundles").
		Body(bundle).
		Do().
		Into(result)
	return
}

// Delete takes name of the bundle and deletes it. Returns an error if one occurs.
func (c *bundles) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("bundles").
		Name(name).
		Body(options).
		Do().
		Error()
}
