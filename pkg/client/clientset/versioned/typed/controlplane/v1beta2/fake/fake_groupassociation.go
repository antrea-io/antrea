// Copyright 2021 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta2 "github.com/vmware-tanzu/antrea/pkg/apis/controlplane/v1beta2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
)

// FakeGroupAssociations implements GroupAssociationInterface
type FakeGroupAssociations struct {
	Fake *FakeControlplaneV1beta2
	ns   string
}

var groupassociationsResource = schema.GroupVersionResource{Group: "controlplane.antrea.io", Version: "v1beta2", Resource: "groupassociations"}

var groupassociationsKind = schema.GroupVersionKind{Group: "controlplane.antrea.io", Version: "v1beta2", Kind: "GroupAssociation"}

// Get takes name of the groupAssociation, and returns the corresponding groupAssociation object, and an error if there is any.
func (c *FakeGroupAssociations) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta2.GroupAssociation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(groupassociationsResource, c.ns, name), &v1beta2.GroupAssociation{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta2.GroupAssociation), err
}
