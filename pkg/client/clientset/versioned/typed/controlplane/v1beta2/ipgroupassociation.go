// Copyright 2023 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1beta2

import (
	"context"

	v1beta2 "antrea.io/antrea/pkg/apis/controlplane/v1beta2"
	scheme "antrea.io/antrea/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	rest "k8s.io/client-go/rest"
)

// IPGroupAssociationsGetter has a method to return a IPGroupAssociationInterface.
// A group's client should implement this interface.
type IPGroupAssociationsGetter interface {
	IPGroupAssociations() IPGroupAssociationInterface
}

// IPGroupAssociationInterface has methods to work with IPGroupAssociation resources.
type IPGroupAssociationInterface interface {
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1beta2.IPGroupAssociation, error)
	IPGroupAssociationExpansion
}

// iPGroupAssociations implements IPGroupAssociationInterface
type iPGroupAssociations struct {
	client rest.Interface
}

// newIPGroupAssociations returns a IPGroupAssociations
func newIPGroupAssociations(c *ControlplaneV1beta2Client) *iPGroupAssociations {
	return &iPGroupAssociations{
		client: c.RESTClient(),
	}
}

// Get takes name of the iPGroupAssociation, and returns the corresponding iPGroupAssociation object, and an error if there is any.
func (c *iPGroupAssociations) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta2.IPGroupAssociation, err error) {
	result = &v1beta2.IPGroupAssociation{}
	err = c.client.Get().
		Resource("ipgroupassociations").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}
