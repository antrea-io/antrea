// Copyright 2025 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	crdv1alpha1 "antrea.io/antrea/pkg/apis/crd/v1alpha1"
	scheme "antrea.io/antrea/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// FlowExporterTargetsGetter has a method to return a FlowExporterTargetInterface.
// A group's client should implement this interface.
type FlowExporterTargetsGetter interface {
	FlowExporterTargets() FlowExporterTargetInterface
}

// FlowExporterTargetInterface has methods to work with FlowExporterTarget resources.
type FlowExporterTargetInterface interface {
	Create(ctx context.Context, flowExporterTarget *crdv1alpha1.FlowExporterTarget, opts v1.CreateOptions) (*crdv1alpha1.FlowExporterTarget, error)
	Update(ctx context.Context, flowExporterTarget *crdv1alpha1.FlowExporterTarget, opts v1.UpdateOptions) (*crdv1alpha1.FlowExporterTarget, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, flowExporterTarget *crdv1alpha1.FlowExporterTarget, opts v1.UpdateOptions) (*crdv1alpha1.FlowExporterTarget, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*crdv1alpha1.FlowExporterTarget, error)
	List(ctx context.Context, opts v1.ListOptions) (*crdv1alpha1.FlowExporterTargetList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *crdv1alpha1.FlowExporterTarget, err error)
	FlowExporterTargetExpansion
}

// flowExporterTargets implements FlowExporterTargetInterface
type flowExporterTargets struct {
	*gentype.ClientWithList[*crdv1alpha1.FlowExporterTarget, *crdv1alpha1.FlowExporterTargetList]
}

// newFlowExporterTargets returns a FlowExporterTargets
func newFlowExporterTargets(c *CrdV1alpha1Client) *flowExporterTargets {
	return &flowExporterTargets{
		gentype.NewClientWithList[*crdv1alpha1.FlowExporterTarget, *crdv1alpha1.FlowExporterTargetList](
			"flowexportertargets",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *crdv1alpha1.FlowExporterTarget { return &crdv1alpha1.FlowExporterTarget{} },
			func() *crdv1alpha1.FlowExporterTargetList { return &crdv1alpha1.FlowExporterTargetList{} },
		),
	}
}
