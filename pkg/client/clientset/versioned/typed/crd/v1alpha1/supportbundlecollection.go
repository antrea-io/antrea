// Copyright 2024 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1alpha1 "antrea.io/antrea/pkg/apis/crd/v1alpha1"
	scheme "antrea.io/antrea/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// SupportBundleCollectionsGetter has a method to return a SupportBundleCollectionInterface.
// A group's client should implement this interface.
type SupportBundleCollectionsGetter interface {
	SupportBundleCollections() SupportBundleCollectionInterface
}

// SupportBundleCollectionInterface has methods to work with SupportBundleCollection resources.
type SupportBundleCollectionInterface interface {
	Create(ctx context.Context, supportBundleCollection *v1alpha1.SupportBundleCollection, opts v1.CreateOptions) (*v1alpha1.SupportBundleCollection, error)
	Update(ctx context.Context, supportBundleCollection *v1alpha1.SupportBundleCollection, opts v1.UpdateOptions) (*v1alpha1.SupportBundleCollection, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, supportBundleCollection *v1alpha1.SupportBundleCollection, opts v1.UpdateOptions) (*v1alpha1.SupportBundleCollection, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.SupportBundleCollection, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.SupportBundleCollectionList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.SupportBundleCollection, err error)
	SupportBundleCollectionExpansion
}

// supportBundleCollections implements SupportBundleCollectionInterface
type supportBundleCollections struct {
	*gentype.ClientWithList[*v1alpha1.SupportBundleCollection, *v1alpha1.SupportBundleCollectionList]
}

// newSupportBundleCollections returns a SupportBundleCollections
func newSupportBundleCollections(c *CrdV1alpha1Client) *supportBundleCollections {
	return &supportBundleCollections{
		gentype.NewClientWithList[*v1alpha1.SupportBundleCollection, *v1alpha1.SupportBundleCollectionList](
			"supportbundlecollections",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *v1alpha1.SupportBundleCollection { return &v1alpha1.SupportBundleCollection{} },
			func() *v1alpha1.SupportBundleCollectionList { return &v1alpha1.SupportBundleCollectionList{} }),
	}
}
