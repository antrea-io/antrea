// Copyright 2024 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha2 "antrea.io/antrea/pkg/apis/crd/v1alpha2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeExternalIPPools implements ExternalIPPoolInterface
type FakeExternalIPPools struct {
	Fake *FakeCrdV1alpha2
}

var externalippoolsResource = v1alpha2.SchemeGroupVersion.WithResource("externalippools")

var externalippoolsKind = v1alpha2.SchemeGroupVersion.WithKind("ExternalIPPool")

// Get takes name of the externalIPPool, and returns the corresponding externalIPPool object, and an error if there is any.
func (c *FakeExternalIPPools) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha2.ExternalIPPool, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(externalippoolsResource, name), &v1alpha2.ExternalIPPool{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha2.ExternalIPPool), err
}

// List takes label and field selectors, and returns the list of ExternalIPPools that match those selectors.
func (c *FakeExternalIPPools) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha2.ExternalIPPoolList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(externalippoolsResource, externalippoolsKind, opts), &v1alpha2.ExternalIPPoolList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha2.ExternalIPPoolList{ListMeta: obj.(*v1alpha2.ExternalIPPoolList).ListMeta}
	for _, item := range obj.(*v1alpha2.ExternalIPPoolList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested externalIPPools.
func (c *FakeExternalIPPools) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(externalippoolsResource, opts))
}

// Create takes the representation of a externalIPPool and creates it.  Returns the server's representation of the externalIPPool, and an error, if there is any.
func (c *FakeExternalIPPools) Create(ctx context.Context, externalIPPool *v1alpha2.ExternalIPPool, opts v1.CreateOptions) (result *v1alpha2.ExternalIPPool, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(externalippoolsResource, externalIPPool), &v1alpha2.ExternalIPPool{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha2.ExternalIPPool), err
}

// Update takes the representation of a externalIPPool and updates it. Returns the server's representation of the externalIPPool, and an error, if there is any.
func (c *FakeExternalIPPools) Update(ctx context.Context, externalIPPool *v1alpha2.ExternalIPPool, opts v1.UpdateOptions) (result *v1alpha2.ExternalIPPool, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(externalippoolsResource, externalIPPool), &v1alpha2.ExternalIPPool{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha2.ExternalIPPool), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeExternalIPPools) UpdateStatus(ctx context.Context, externalIPPool *v1alpha2.ExternalIPPool, opts v1.UpdateOptions) (*v1alpha2.ExternalIPPool, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(externalippoolsResource, "status", externalIPPool), &v1alpha2.ExternalIPPool{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha2.ExternalIPPool), err
}

// Delete takes name of the externalIPPool and deletes it. Returns an error if one occurs.
func (c *FakeExternalIPPools) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(externalippoolsResource, name, opts), &v1alpha2.ExternalIPPool{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeExternalIPPools) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(externalippoolsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha2.ExternalIPPoolList{})
	return err
}

// Patch applies the patch and returns the patched externalIPPool.
func (c *FakeExternalIPPools) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha2.ExternalIPPool, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(externalippoolsResource, name, pt, data, subresources...), &v1alpha2.ExternalIPPool{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha2.ExternalIPPool), err
}
