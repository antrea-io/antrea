// Copyright 2020 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/antrea/pkg/controller/querier (interfaces: ControllerQuerier)

// Package testing is a generated GoMock package.
package testing

import (
	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/vmware-tanzu/antrea/pkg/apis/clusterinformation/v1beta1"
	types "github.com/vmware-tanzu/antrea/pkg/controller/types"
	reflect "reflect"
)

// MockControllerQuerier is a mock of ControllerQuerier interface
type MockControllerQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockControllerQuerierMockRecorder
}

// MockControllerQuerierMockRecorder is the mock recorder for MockControllerQuerier
type MockControllerQuerierMockRecorder struct {
	mock *MockControllerQuerier
}

// NewMockControllerQuerier creates a new mock instance
func NewMockControllerQuerier(ctrl *gomock.Controller) *MockControllerQuerier {
	mock := &MockControllerQuerier{ctrl: ctrl}
	mock.recorder = &MockControllerQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockControllerQuerier) EXPECT() *MockControllerQuerierMockRecorder {
	return m.recorder
}

// GetControllerInfo mocks base method
func (m *MockControllerQuerier) GetControllerInfo(arg0 *v1beta1.AntreaControllerInfo, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetControllerInfo", arg0, arg1)
}

// GetControllerInfo indicates an expected call of GetControllerInfo
func (mr *MockControllerQuerierMockRecorder) GetControllerInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerInfo", reflect.TypeOf((*MockControllerQuerier)(nil).GetControllerInfo), arg0, arg1)
}

// QueryNetworkPolicies mocks base method
func (m *MockControllerQuerier) QueryNetworkPolicies(arg0, arg1 string) ([]types.NetworkPolicy, []types.NetworkPolicy, []types.NetworkPolicy) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryNetworkPolicies", arg0, arg1)
	ret0, _ := ret[0].([]types.NetworkPolicy)
	ret1, _ := ret[1].([]types.NetworkPolicy)
	ret2, _ := ret[2].([]types.NetworkPolicy)
	return ret0, ret1, ret2
}

// QueryNetworkPolicies indicates an expected call of QueryNetworkPolicies
func (mr *MockControllerQuerierMockRecorder) QueryNetworkPolicies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNetworkPolicies", reflect.TypeOf((*MockControllerQuerier)(nil).QueryNetworkPolicies), arg0, arg1)
}
