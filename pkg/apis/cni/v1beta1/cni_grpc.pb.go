// Copyright 2019 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: pkg/apis/cni/v1beta1/cni.proto

package v1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cni_CmdAdd_FullMethodName   = "/antrea_io.antrea.pkg.apis.cni.v1beta1.Cni/CmdAdd"
	Cni_CmdCheck_FullMethodName = "/antrea_io.antrea.pkg.apis.cni.v1beta1.Cni/CmdCheck"
	Cni_CmdDel_FullMethodName   = "/antrea_io.antrea.pkg.apis.cni.v1beta1.Cni/CmdDel"
)

// CniClient is the client API for Cni service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CniClient interface {
	CmdAdd(ctx context.Context, in *CniCmdRequest, opts ...grpc.CallOption) (*CniCmdResponse, error)
	CmdCheck(ctx context.Context, in *CniCmdRequest, opts ...grpc.CallOption) (*CniCmdResponse, error)
	CmdDel(ctx context.Context, in *CniCmdRequest, opts ...grpc.CallOption) (*CniCmdResponse, error)
}

type cniClient struct {
	cc grpc.ClientConnInterface
}

func NewCniClient(cc grpc.ClientConnInterface) CniClient {
	return &cniClient{cc}
}

func (c *cniClient) CmdAdd(ctx context.Context, in *CniCmdRequest, opts ...grpc.CallOption) (*CniCmdResponse, error) {
	out := new(CniCmdResponse)
	err := c.cc.Invoke(ctx, Cni_CmdAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cniClient) CmdCheck(ctx context.Context, in *CniCmdRequest, opts ...grpc.CallOption) (*CniCmdResponse, error) {
	out := new(CniCmdResponse)
	err := c.cc.Invoke(ctx, Cni_CmdCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cniClient) CmdDel(ctx context.Context, in *CniCmdRequest, opts ...grpc.CallOption) (*CniCmdResponse, error) {
	out := new(CniCmdResponse)
	err := c.cc.Invoke(ctx, Cni_CmdDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CniServer is the server API for Cni service.
// All implementations must embed UnimplementedCniServer
// for forward compatibility
type CniServer interface {
	CmdAdd(context.Context, *CniCmdRequest) (*CniCmdResponse, error)
	CmdCheck(context.Context, *CniCmdRequest) (*CniCmdResponse, error)
	CmdDel(context.Context, *CniCmdRequest) (*CniCmdResponse, error)
	mustEmbedUnimplementedCniServer()
}

// UnimplementedCniServer must be embedded to have forward compatible implementations.
type UnimplementedCniServer struct {
}

func (UnimplementedCniServer) CmdAdd(context.Context, *CniCmdRequest) (*CniCmdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdAdd not implemented")
}
func (UnimplementedCniServer) CmdCheck(context.Context, *CniCmdRequest) (*CniCmdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdCheck not implemented")
}
func (UnimplementedCniServer) CmdDel(context.Context, *CniCmdRequest) (*CniCmdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdDel not implemented")
}
func (UnimplementedCniServer) mustEmbedUnimplementedCniServer() {}

// UnsafeCniServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CniServer will
// result in compilation errors.
type UnsafeCniServer interface {
	mustEmbedUnimplementedCniServer()
}

func RegisterCniServer(s grpc.ServiceRegistrar, srv CniServer) {
	s.RegisterService(&Cni_ServiceDesc, srv)
}

func _Cni_CmdAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CniCmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CniServer).CmdAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cni_CmdAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CniServer).CmdAdd(ctx, req.(*CniCmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cni_CmdCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CniCmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CniServer).CmdCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cni_CmdCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CniServer).CmdCheck(ctx, req.(*CniCmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cni_CmdDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CniCmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CniServer).CmdDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cni_CmdDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CniServer).CmdDel(ctx, req.(*CniCmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cni_ServiceDesc is the grpc.ServiceDesc for Cni service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cni_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "antrea_io.antrea.pkg.apis.cni.v1beta1.Cni",
	HandlerType: (*CniServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CmdAdd",
			Handler:    _Cni_CmdAdd_Handler,
		},
		{
			MethodName: "CmdCheck",
			Handler:    _Cni_CmdCheck_Handler,
		},
		{
			MethodName: "CmdDel",
			Handler:    _Cni_CmdDel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/cni/v1beta1/cni.proto",
}
