// Copyright 2024 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package antrea_io.antrea.pkg.apis.stats.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "antrea.io/antrea/pkg/apis/stats/v1alpha1";

// AntreaClusterNetworkPolicyStats is the statistics of a Antrea ClusterNetworkPolicy.
message AntreaClusterNetworkPolicyStats {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // The traffic stats of the Antrea ClusterNetworkPolicy.
  optional TrafficStats trafficStats = 2;

  // The traffic stats of the Antrea ClusterNetworkPolicy, from rule perspective.
  repeated RuleTrafficStats ruleTrafficStats = 3;
}

// AntreaClusterNetworkPolicyStatsList is a list of AntreaClusterNetworkPolicyStats.
message AntreaClusterNetworkPolicyStatsList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of AntreaClusterNetworkPolicyStats.
  repeated AntreaClusterNetworkPolicyStats items = 2;
}

// AntreaNetworkPolicyStats is the statistics of a Antrea NetworkPolicy.
message AntreaNetworkPolicyStats {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // The traffic stats of the Antrea NetworkPolicy.
  optional TrafficStats trafficStats = 2;

  // The traffic stats of the Antrea NetworkPolicy, from rule perspective.
  repeated RuleTrafficStats ruleTrafficStats = 3;
}

// AntreaNetworkPolicyStatsList is a list of AntreaNetworkPolicyStats.
message AntreaNetworkPolicyStatsList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of AntreaNetworkPolicyStats.
  repeated AntreaNetworkPolicyStats items = 2;
}

// MulticastGroup contains the mapping between multicast group and Pods.
message MulticastGroup {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Group is the IP of the multicast group.
  optional string group = 2;

  // Pods is the list of Pods that have joined the multicast group.
  repeated PodReference pods = 3;
}

// MulticastGroupList is a list of MulticastGroup.
message MulticastGroupList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of MulticastGroup.
  repeated MulticastGroup items = 2;
}

// NetworkPolicyStats is the statistics of a K8s NetworkPolicy.
message NetworkPolicyStats {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // The traffic stats of the K8s NetworkPolicy.
  optional TrafficStats trafficStats = 2;
}

// NetworkPolicyStatsList is a list of NetworkPolicyStats.
message NetworkPolicyStatsList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of NetworkPolicyStats.
  repeated NetworkPolicyStats items = 2;
}

// NodeLatencyStats contains all the latency measurements collected by the Agent from a specific Node.
message NodeLatencyStats {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // The list of PeerNodeLatencyStats.
  repeated PeerNodeLatencyStats peerNodeLatencyStats = 2;
}

// NodeLatencyStatsList is a list of NodeLatencyStats objects.
message NodeLatencyStatsList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // The list of NodeLatencyStats.
  repeated NodeLatencyStats items = 2;
}

// PeerNodeLatencyStats contains the latency stats of a Peer Node.
message PeerNodeLatencyStats {
  // The Node's name.
  optional string nodeName = 1;

  // The list of target IP latency stats.
  repeated TargetIPLatencyStats targetIPLatencyStats = 2;
}

// PodReference represents a Pod Reference.
message PodReference {
  // The name of this Pod.
  optional string name = 1;

  // The namespace of this Pod.
  optional string namespace = 2;
}

// RuleTrafficStats contains TrafficStats of single rule inside a NetworkPolicy.
message RuleTrafficStats {
  optional string name = 1;

  optional TrafficStats trafficStats = 2;
}

// TargetIPLatencyStats contains the latency stats of a target IP.
message TargetIPLatencyStats {
  // The target IP address.
  optional string targetIP = 1;

  // The timestamp of the last sent packet.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastSendTime = 2;

  // The timestamp of the last received packet.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastRecvTime = 3;

  // The last measured RTT for this target IP, in nanoseconds.
  optional int64 lastMeasuredRTTNanoseconds = 4;
}

// TrafficStats contains the traffic stats of a NetworkPolicy.
message TrafficStats {
  // Packets is the packets count hit by the NetworkPolicy.
  optional int64 packets = 1;

  // Bytes is the bytes count hit by the NetworkPolicy.
  optional int64 bytes = 2;

  // Sessions is the sessions count hit by the NetworkPolicy.
  optional int64 sessions = 3;
}

