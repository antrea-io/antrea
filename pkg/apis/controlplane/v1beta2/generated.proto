// Copyright 2024 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package antrea_io.antrea.pkg.apis.controlplane.v1beta2;

import "antrea.io/antrea/pkg/apis/stats/v1alpha1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "antrea.io/antrea/pkg/apis/controlplane/v1beta2";

// AddressGroup is the message format of antrea/pkg/controller/types.AddressGroup in an API response.
message AddressGroup {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  repeated GroupMember groupMembers = 2;
}

// AddressGroupList is a list of AddressGroup objects.
message AddressGroupList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated AddressGroup items = 2;
}

// AddressGroupPatch describes the incremental update of an AddressGroup.
message AddressGroupPatch {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  repeated GroupMember addedGroupMembers = 2;

  repeated GroupMember removedGroupMembers = 3;
}

// AppliedToGroup is the message format of antrea/pkg/controller/types.AppliedToGroup in an API response.
message AppliedToGroup {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // GroupMembers is list of resources selected by this group.
  repeated GroupMember groupMembers = 2;
}

// AppliedToGroupList is a list of AppliedToGroup objects.
message AppliedToGroupList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated AppliedToGroup items = 2;
}

// AppliedToGroupPatch describes the incremental update of an AppliedToGroup.
message AppliedToGroupPatch {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  repeated GroupMember addedGroupMembers = 2;

  repeated GroupMember removedGroupMembers = 3;
}

message BasicAuthentication {
  optional string username = 1;

  optional string password = 2;
}

message BundleFileServer {
  optional string url = 1;
}

message BundleServerAuthConfiguration {
  optional string bearerToken = 1;

  optional string apiKey = 2;

  optional BasicAuthentication basicAuthentication = 3;
}

// ClusterGroupMembers is a list of GroupMember objects or IPBlocks that are currently selected by a ClusterGroup.
message ClusterGroupMembers {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  repeated GroupMember effectiveMembers = 2;

  repeated IPNet effectiveIPBlocks = 3;

  optional int64 totalMembers = 4;

  optional int64 totalPages = 5;

  optional int64 currentPage = 6;
}

message EgressGroup {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // GroupMembers is list of resources selected by this group.
  repeated GroupMember groupMembers = 2;
}

// EgressGroupList is a list of EgressGroup objects.
message EgressGroupList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated EgressGroup items = 2;
}

// EgressGroupPatch describes the incremental update of an EgressGroup.
message EgressGroupPatch {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta objectMeta = 1;

  repeated GroupMember addedGroupMembers = 2;

  repeated GroupMember removedGroupMembers = 3;
}

// Entity contains Namespace and Pod name as a request parameter.
message Entity {
  optional PodReference pod = 1;
}

// ExternalEntityReference represents a ExternalEntity Reference.
message ExternalEntityReference {
  // The name of this ExternalEntity.
  optional string name = 1;

  // The Namespace of this ExternalEntity.
  optional string namespace = 2;
}

// GroupAssociation is the message format in an API response for groupassociation queries.
message GroupAssociation {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // AssociatedGroups is a list of GroupReferences that is associated with the
  // Pod/ExternalEntity being queried.
  repeated GroupReference associatedGroups = 2;
}

// GroupMember represents resource member to be populated in Groups.
message GroupMember {
  // Pod maintains the reference to the Pod.
  optional PodReference pod = 1;

  // ExternalEntity maintains the reference to the ExternalEntity.
  optional ExternalEntityReference externalEntity = 2;

  // IP is the IP address of the Endpoints associated with the GroupMember.
  repeated bytes ips = 3;

  // Ports is the list NamedPort of the GroupMember.
  repeated NamedPort ports = 4;

  // Node maintains the reference to the Node.
  optional NodeReference node = 5;

  // Service is the reference to the Service. It can only be used in an AppliedTo
  // Group and only a NodePort type Service can be referred by this field.
  optional ServiceReference service = 6;
}

// GroupMembers is a list of GroupMember objects or IPBlocks that are currently selected by a Group.
message GroupMembers {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  repeated GroupMember effectiveMembers = 2;

  repeated IPNet effectiveIPBlocks = 3;

  optional int64 totalMembers = 4;

  optional int64 totalPages = 5;

  optional int64 currentPage = 6;
}

message GroupReference {
  // Namespace of the Group. Empty for ClusterGroup.
  optional string namespace = 1;

  // Name of the Group.
  optional string name = 2;

  // UID of the Group.
  optional string uid = 3;
}

// HTTPProtocol matches HTTP requests with specific host, method, and path. All fields could be used alone or together.
// If all fields are not provided, it matches all HTTP requests.
message HTTPProtocol {
  // Host represents the hostname present in the URI or the HTTP Host header to match.
  // It does not contain the port associated with the host.
  optional string host = 1;

  // Method represents the HTTP method to match.
  // It could be GET, POST, PUT, HEAD, DELETE, TRACE, OPTIONS, CONNECT and PATCH.
  optional string method = 2;

  // Path represents the URI path to match (Ex. "/index.html", "/admin").
  optional string path = 3;
}

// IPBlock describes a particular CIDR (Ex. "192.168.1.1/24"). The except entry describes CIDRs that should
// not be included within this rule.
message IPBlock {
  // CIDR is an IPNet represents the IP Block.
  optional IPNet cidr = 1;

  // Except is a slice of IPNets that should not be included within an IP Block.
  // Except values will be rejected if they are outside the CIDR range.
  // +optional
  repeated IPNet except = 2;
}

message IPGroupAssociation {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // AssociatedGroups is a list of GroupReferences that is associated with the
  // IP address being queried.
  repeated GroupReference associatedGroups = 2;
}

// IPNet describes an IP network.
message IPNet {
  optional bytes ip = 1;

  optional int32 prefixLength = 2;
}

// L7Protocol defines application layer protocol to match.
message L7Protocol {
  optional HTTPProtocol http = 1;

  optional TLSProtocol tls = 2;
}

// MulticastGroupInfo contains the list of Pods that have joined a multicast group, for a given Node.
message MulticastGroupInfo {
  // Group is the IP of the multicast group.
  optional string group = 1;

  // Pods is the list of Pods that have joined the multicast group.
  repeated PodReference pods = 2;
}

// NamedPort represents a Port with a name on Pod.
message NamedPort {
  // Port represents the Port number.
  optional int32 port = 1;

  // Name represents the associated name with this Port number.
  optional string name = 2;

  // Protocol for port. Must be UDP, TCP, or SCTP.
  optional string protocol = 3;
}

// NetworkPolicy is the message format of antrea/pkg/controller/types.NetworkPolicy in an API response.
message NetworkPolicy {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Rules is a list of rules to be applied to the selected GroupMembers.
  repeated NetworkPolicyRule rules = 2;

  // AppliedToGroups is a list of names of AppliedToGroups to which this policy applies.
  // Cannot be set in conjunction with any NetworkPolicyRule.AppliedToGroups in Rules.
  repeated string appliedToGroups = 3;

  // Priority represents the relative priority of this Network Policy as compared to
  // other Network Policies. Priority will be unset (nil) for K8s NetworkPolicy.
  optional double priority = 4;

  // TierPriority represents the priority of the Tier associated with this Network
  // Policy. The TierPriority will remain nil for K8s NetworkPolicy.
  optional int32 tierPriority = 5;

  // Reference to the original NetworkPolicy that the internal NetworkPolicy is created for.
  optional NetworkPolicyReference sourceRef = 6;
}

// NetworkPolicyEvaluation contains the request and response for a NetworkPolicy evaluation.
message NetworkPolicyEvaluation {
  optional NetworkPolicyEvaluationRequest request = 1;

  optional NetworkPolicyEvaluationResponse response = 2;
}

// NetworkPolicyEvaluationRequest is the request body of NetworkPolicy evaluation.
message NetworkPolicyEvaluationRequest {
  optional Entity source = 1;

  optional Entity destination = 2;
}

// NetworkPolicyEvaluationResponse is the response of NetworkPolicy evaluation.
message NetworkPolicyEvaluationResponse {
  // The reference of the effective NetworkPolicy.
  optional NetworkPolicyReference networkPolicy = 1;

  optional int32 ruleIndex = 2;

  // The content of the effective rule.
  optional RuleRef rule = 3;
}

// NetworkPolicyList is a list of NetworkPolicy objects.
message NetworkPolicyList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated NetworkPolicy items = 2;
}

// NetworkPolicyNodeStatus is the status of a NetworkPolicy on a Node.
message NetworkPolicyNodeStatus {
  // The name of the Node that produces the status.
  optional string nodeName = 1;

  // The generation realized by the Node.
  optional int64 generation = 2;

  // The flag to mark the NetworkPolicy realization is failed on the Node or not.
  optional bool realizationFailure = 3;

  // The error message to describe why the NetworkPolicy realization is failed on the Node.
  optional string message = 4;
}

// NetworkPolicyPeer describes a peer of NetworkPolicyRules.
// It could be a list of names of AddressGroups and/or a list of IPBlock.
message NetworkPolicyPeer {
  // A list of names of AddressGroups.
  repeated string addressGroups = 1;

  // A list of IPBlock.
  repeated IPBlock ipBlocks = 2;

  // A list of exact FQDN names or FQDN wildcard expressions.
  // This field can only be possibly set for NetworkPolicyPeer of egress rules.
  repeated string fqdns = 3;

  // A list of ServiceReference.
  // This field can only be possibly set for NetworkPolicyPeer of egress rules.
  repeated ServiceReference toServices = 4;

  // A list of labelIdentities selected as ingress peers for stretched policy.
  // This field can only be possibly set for NetworkPolicyPeer of ingress rules.
  repeated uint32 labelIdentities = 5;
}

message NetworkPolicyReference {
  // Type of the NetworkPolicy.
  optional string type = 1;

  // Namespace of the NetworkPolicy. It's empty for Antrea ClusterNetworkPolicy.
  optional string namespace = 2;

  // Name of the NetworkPolicy.
  optional string name = 3;

  // UID of the NetworkPolicy.
  optional string uid = 4;
}

// NetworkPolicyRule describes a particular set of traffic that is allowed.
message NetworkPolicyRule {
  // The direction of this rule.
  // If it's set to In, From must be set and To must not be set.
  // If it's set to Out, To must be set and From must not be set.
  optional string direction = 1;

  // From represents sources which should be able to access the GroupMembers selected by the policy.
  optional NetworkPolicyPeer from = 2;

  // To represents destinations which should be able to be accessed by the GroupMembers selected by the policy.
  optional NetworkPolicyPeer to = 3;

  // Services is a list of services which should be matched.
  repeated Service services = 4;

  // Priority defines the priority of the Rule as compared to other rules in the
  // NetworkPolicy.
  optional int32 priority = 5;

  // Action specifies the action to be applied on the rule. i.e. Allow/Drop. An empty
  // action “nil” defaults to Allow action, which would be the case for rules created for
  // K8s Network Policy.
  optional string action = 6;

  // EnableLogging indicates whether or not to generate logs when rules are matched. Default to false.
  optional bool enableLogging = 7;

  // AppliedToGroups is a list of names of AppliedToGroups to which this rule applies.
  // Cannot be set in conjunction with NetworkPolicy.AppliedToGroups of the NetworkPolicy
  // that this Rule is referred to.
  repeated string appliedToGroups = 8;

  // Name describes the intention of this rule.
  // Name should be unique within the policy.
  optional string name = 9;

  // L7Protocols is a list of application layer protocols which should be matched.
  repeated L7Protocol l7Protocols = 10;

  // LogLabel is a user-defined arbitrary string which will be printed in the NetworkPolicy logs.
  optional string logLabel = 11;
}

// NetworkPolicyStats contains the information and traffic stats of a NetworkPolicy.
message NetworkPolicyStats {
  // The reference of the NetworkPolicy.
  optional NetworkPolicyReference networkPolicy = 1;

  // The stats of the NetworkPolicy.
  optional antrea_io.antrea.pkg.apis.stats.v1alpha1.TrafficStats trafficStats = 2;

  // The stats of the NetworkPolicy rules. It's empty for K8s NetworkPolicies as they don't have rule name to identify a rule.
  repeated antrea_io.antrea.pkg.apis.stats.v1alpha1.RuleTrafficStats ruleTrafficStats = 3;
}

// NetworkPolicyStatus is the status of a NetworkPolicy.
message NetworkPolicyStatus {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Nodes contains statuses produced on a list of Nodes.
  repeated NetworkPolicyNodeStatus nodes = 2;
}

// NodeReference represents a Node Reference.
message NodeReference {
  // The name of this Node.
  optional string name = 1;
}

// NodeStatsSummary contains stats produced on a Node. It's used by the antrea-agents to report stats to the antrea-controller.
message NodeStatsSummary {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // The TrafficStats of K8s NetworkPolicies collected from the Node.
  repeated NetworkPolicyStats networkPolicies = 2;

  // The TrafficStats of Antrea ClusterNetworkPolicies collected from the Node.
  repeated NetworkPolicyStats antreaClusterNetworkPolicies = 3;

  // The TrafficStats of Antrea NetworkPolicies collected from the Node.
  repeated NetworkPolicyStats antreaNetworkPolicies = 4;

  // Multicast group information collected from the Node.
  repeated MulticastGroupInfo multicast = 5;
}

message PaginationGetOptions {
  optional int64 page = 1;

  optional int64 limit = 2;
}

// PodReference represents a Pod Reference.
message PodReference {
  // The name of this Pod.
  optional string name = 1;

  // The Namespace of this Pod.
  optional string namespace = 2;
}

// RuleRef contains basic information for the rule.
message RuleRef {
  optional string direction = 1;

  optional string name = 2;

  optional string action = 3;
}

// Service describes a port to allow traffic on.
message Service {
  // The protocol (TCP, UDP, SCTP, or ICMP) which traffic must match. If not specified, this
  // field defaults to TCP.
  // +optional
  optional string protocol = 1;

  // Port and EndPort can only be specified, when the Protocol is TCP, UDP, or SCTP.
  // Port defines the port name or number on the given protocol. If not specified
  // and the Protocol is TCP, UDP, or SCTP, this matches all port numbers.
  // +optional
  optional k8s.io.apimachinery.pkg.util.intstr.IntOrString port = 2;

  // EndPort defines the end of the port range, being the end included within the range.
  // It can only be specified when a numerical `port` is specified.
  // +optional
  optional int32 endPort = 3;

  // ICMPType and ICMPCode can only be specified, when the Protocol is ICMP. If they
  // both are not specified and the Protocol is ICMP, this matches all ICMP traffic.
  // +optional
  optional int32 icmpType = 4;

  optional int32 icmpCode = 5;

  // IGMPType and GroupAddress can only be specified when the Protocol is IGMP.
  // +optional
  optional int32 igmpType = 6;

  optional string groupAddress = 7;

  // SrcPort and SrcEndPort can only be specified, when the Protocol is TCP, UDP, or SCTP.
  // It restricts the source port of the traffic.
  // +optional
  optional int32 srcPort = 8;

  optional int32 srcEndPort = 9;
}

// ServiceReference represents reference to a v1.Service.
message ServiceReference {
  // The name of this Service.
  optional string name = 1;

  // The Namespace of this Service.
  optional string namespace = 2;
}

// SupportBundleCollection is the message format of antrea/pkg/controller/types.SupportBundleCollection in an API response.
message SupportBundleCollection {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time expiredAt = 2;

  optional string sinceTime = 3;

  optional BundleFileServer fileServer = 4;

  optional BundleServerAuthConfiguration authentication = 5;
}

// SupportBundleCollectionList is a list of SupportBundleCollection objects.
message SupportBundleCollectionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated SupportBundleCollection items = 2;
}

// SupportBundleCollectionNodeStatus is the status of a SupportBundleCollection on a Node.
message SupportBundleCollectionNodeStatus {
  // The name of the Node that produces the status.
  optional string nodeName = 1;

  // The namespace of the Node that produces the status. It is set only when NodeType is ExternalNode.
  optional string nodeNamespace = 2;

  // The type of the Node that produces the status. The values include Node and ExternalNode.
  optional string nodeType = 3;

  // The phase in which a SupportBundleCollection is on the Node.
  optional bool completed = 4;

  optional string error = 5;
}

// SupportBundleCollectionStatus is the status of a SupportBundleCollection.
message SupportBundleCollectionStatus {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Nodes contains statuses produced on a list of Nodes.
  repeated SupportBundleCollectionNodeStatus nodes = 2;
}

// TLSProtocol matches TLS handshake packets with specific SNI. If the field is not provided, this
// matches all TLS handshake packets.
message TLSProtocol {
  // SNI (Server Name Indication) indicates the server domain name in the TLS/SSL hello message.
  optional string sni = 1;
}

