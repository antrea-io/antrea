// +build !ignore_autogenerated

// Copyright 2020 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by conversion-gen. DO NOT EDIT.

package v1beta1

import (
	unsafe "unsafe"

	controlplane "github.com/vmware-tanzu/antrea/pkg/apis/controlplane"
	v1alpha1 "github.com/vmware-tanzu/antrea/pkg/apis/security/v1alpha1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	types "k8s.io/apimachinery/pkg/types"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*AddressGroupList)(nil), (*controlplane.AddressGroupList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_AddressGroupList_To_controlplane_AddressGroupList(a.(*AddressGroupList), b.(*controlplane.AddressGroupList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*controlplane.AddressGroupList)(nil), (*AddressGroupList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_AddressGroupList_To_v1beta1_AddressGroupList(a.(*controlplane.AddressGroupList), b.(*AddressGroupList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*AppliedToGroupList)(nil), (*controlplane.AppliedToGroupList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_AppliedToGroupList_To_controlplane_AppliedToGroupList(a.(*AppliedToGroupList), b.(*controlplane.AppliedToGroupList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*controlplane.AppliedToGroupList)(nil), (*AppliedToGroupList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_AppliedToGroupList_To_v1beta1_AppliedToGroupList(a.(*controlplane.AppliedToGroupList), b.(*AppliedToGroupList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ExternalEntityReference)(nil), (*controlplane.ExternalEntityReference)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_ExternalEntityReference_To_controlplane_ExternalEntityReference(a.(*ExternalEntityReference), b.(*controlplane.ExternalEntityReference), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*controlplane.ExternalEntityReference)(nil), (*ExternalEntityReference)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_ExternalEntityReference_To_v1beta1_ExternalEntityReference(a.(*controlplane.ExternalEntityReference), b.(*ExternalEntityReference), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*IPBlock)(nil), (*controlplane.IPBlock)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_IPBlock_To_controlplane_IPBlock(a.(*IPBlock), b.(*controlplane.IPBlock), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*controlplane.IPBlock)(nil), (*IPBlock)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_IPBlock_To_v1beta1_IPBlock(a.(*controlplane.IPBlock), b.(*IPBlock), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*IPNet)(nil), (*controlplane.IPNet)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_IPNet_To_controlplane_IPNet(a.(*IPNet), b.(*controlplane.IPNet), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*controlplane.IPNet)(nil), (*IPNet)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_IPNet_To_v1beta1_IPNet(a.(*controlplane.IPNet), b.(*IPNet), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*NamedPort)(nil), (*controlplane.NamedPort)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_NamedPort_To_controlplane_NamedPort(a.(*NamedPort), b.(*controlplane.NamedPort), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*controlplane.NamedPort)(nil), (*NamedPort)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_NamedPort_To_v1beta1_NamedPort(a.(*controlplane.NamedPort), b.(*NamedPort), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*NetworkPolicy)(nil), (*controlplane.NetworkPolicy)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_NetworkPolicy_To_controlplane_NetworkPolicy(a.(*NetworkPolicy), b.(*controlplane.NetworkPolicy), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*NetworkPolicyList)(nil), (*controlplane.NetworkPolicyList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_NetworkPolicyList_To_controlplane_NetworkPolicyList(a.(*NetworkPolicyList), b.(*controlplane.NetworkPolicyList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*controlplane.NetworkPolicyList)(nil), (*NetworkPolicyList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_NetworkPolicyList_To_v1beta1_NetworkPolicyList(a.(*controlplane.NetworkPolicyList), b.(*NetworkPolicyList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*NetworkPolicyPeer)(nil), (*controlplane.NetworkPolicyPeer)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_NetworkPolicyPeer_To_controlplane_NetworkPolicyPeer(a.(*NetworkPolicyPeer), b.(*controlplane.NetworkPolicyPeer), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*controlplane.NetworkPolicyPeer)(nil), (*NetworkPolicyPeer)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_NetworkPolicyPeer_To_v1beta1_NetworkPolicyPeer(a.(*controlplane.NetworkPolicyPeer), b.(*NetworkPolicyPeer), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*NetworkPolicyReference)(nil), (*controlplane.NetworkPolicyReference)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_NetworkPolicyReference_To_controlplane_NetworkPolicyReference(a.(*NetworkPolicyReference), b.(*controlplane.NetworkPolicyReference), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*controlplane.NetworkPolicyReference)(nil), (*NetworkPolicyReference)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_NetworkPolicyReference_To_v1beta1_NetworkPolicyReference(a.(*controlplane.NetworkPolicyReference), b.(*NetworkPolicyReference), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*NetworkPolicyRule)(nil), (*controlplane.NetworkPolicyRule)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_NetworkPolicyRule_To_controlplane_NetworkPolicyRule(a.(*NetworkPolicyRule), b.(*controlplane.NetworkPolicyRule), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*NetworkPolicyStats)(nil), (*controlplane.NetworkPolicyStats)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_NetworkPolicyStats_To_controlplane_NetworkPolicyStats(a.(*NetworkPolicyStats), b.(*controlplane.NetworkPolicyStats), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*controlplane.NetworkPolicyStats)(nil), (*NetworkPolicyStats)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_NetworkPolicyStats_To_v1beta1_NetworkPolicyStats(a.(*controlplane.NetworkPolicyStats), b.(*NetworkPolicyStats), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*NodeStatsSummary)(nil), (*controlplane.NodeStatsSummary)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_NodeStatsSummary_To_controlplane_NodeStatsSummary(a.(*NodeStatsSummary), b.(*controlplane.NodeStatsSummary), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*controlplane.NodeStatsSummary)(nil), (*NodeStatsSummary)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_NodeStatsSummary_To_v1beta1_NodeStatsSummary(a.(*controlplane.NodeStatsSummary), b.(*NodeStatsSummary), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*PodReference)(nil), (*controlplane.PodReference)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_PodReference_To_controlplane_PodReference(a.(*PodReference), b.(*controlplane.PodReference), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*controlplane.PodReference)(nil), (*PodReference)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_PodReference_To_v1beta1_PodReference(a.(*controlplane.PodReference), b.(*PodReference), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*controlplane.AddressGroupPatch)(nil), (*AddressGroupPatch)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_AddressGroupPatch_To_v1beta1_AddressGroupPatch(a.(*controlplane.AddressGroupPatch), b.(*AddressGroupPatch), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*controlplane.AddressGroup)(nil), (*AddressGroup)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_AddressGroup_To_v1beta1_AddressGroup(a.(*controlplane.AddressGroup), b.(*AddressGroup), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*controlplane.AppliedToGroupPatch)(nil), (*AppliedToGroupPatch)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_AppliedToGroupPatch_To_v1beta1_AppliedToGroupPatch(a.(*controlplane.AppliedToGroupPatch), b.(*AppliedToGroupPatch), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*controlplane.AppliedToGroup)(nil), (*AppliedToGroup)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_AppliedToGroup_To_v1beta1_AppliedToGroup(a.(*controlplane.AppliedToGroup), b.(*AppliedToGroup), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*controlplane.GroupMember)(nil), (*GroupMember)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_GroupMember_To_v1beta1_GroupMember(a.(*controlplane.GroupMember), b.(*GroupMember), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*controlplane.NetworkPolicyRule)(nil), (*NetworkPolicyRule)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_NetworkPolicyRule_To_v1beta1_NetworkPolicyRule(a.(*controlplane.NetworkPolicyRule), b.(*NetworkPolicyRule), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*controlplane.NetworkPolicy)(nil), (*NetworkPolicy)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_NetworkPolicy_To_v1beta1_NetworkPolicy(a.(*controlplane.NetworkPolicy), b.(*NetworkPolicy), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*controlplane.Service)(nil), (*Service)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_controlplane_Service_To_v1beta1_Service(a.(*controlplane.Service), b.(*Service), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*AddressGroupPatch)(nil), (*controlplane.AddressGroupPatch)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_AddressGroupPatch_To_controlplane_AddressGroupPatch(a.(*AddressGroupPatch), b.(*controlplane.AddressGroupPatch), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*AddressGroup)(nil), (*controlplane.AddressGroup)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_AddressGroup_To_controlplane_AddressGroup(a.(*AddressGroup), b.(*controlplane.AddressGroup), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*AppliedToGroupPatch)(nil), (*controlplane.AppliedToGroupPatch)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_AppliedToGroupPatch_To_controlplane_AppliedToGroupPatch(a.(*AppliedToGroupPatch), b.(*controlplane.AppliedToGroupPatch), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*AppliedToGroup)(nil), (*controlplane.AppliedToGroup)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_AppliedToGroup_To_controlplane_AppliedToGroup(a.(*AppliedToGroup), b.(*controlplane.AppliedToGroup), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*GroupMemberPod)(nil), (*controlplane.GroupMember)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_GroupMemberPod_To_controlplane_GroupMember(a.(*GroupMemberPod), b.(*controlplane.GroupMember), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*GroupMember)(nil), (*controlplane.GroupMember)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_GroupMember_To_controlplane_GroupMember(a.(*GroupMember), b.(*controlplane.GroupMember), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*Service)(nil), (*controlplane.Service)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_Service_To_controlplane_Service(a.(*Service), b.(*controlplane.Service), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1beta1_AddressGroup_To_controlplane_AddressGroup(in *AddressGroup, out *controlplane.AddressGroup, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	// WARNING: in.Pods requires manual conversion: does not exist in peer-type
	if in.GroupMembers != nil {
		in, out := &in.GroupMembers, &out.GroupMembers
		*out = make([]controlplane.GroupMember, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_GroupMember_To_controlplane_GroupMember(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.GroupMembers = nil
	}
	return nil
}

func autoConvert_controlplane_AddressGroup_To_v1beta1_AddressGroup(in *controlplane.AddressGroup, out *AddressGroup, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if in.GroupMembers != nil {
		in, out := &in.GroupMembers, &out.GroupMembers
		*out = make([]GroupMember, len(*in))
		for i := range *in {
			if err := Convert_controlplane_GroupMember_To_v1beta1_GroupMember(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.GroupMembers = nil
	}
	return nil
}

func autoConvert_v1beta1_AddressGroupList_To_controlplane_AddressGroupList(in *AddressGroupList, out *controlplane.AddressGroupList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]controlplane.AddressGroup, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_AddressGroup_To_controlplane_AddressGroup(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1beta1_AddressGroupList_To_controlplane_AddressGroupList is an autogenerated conversion function.
func Convert_v1beta1_AddressGroupList_To_controlplane_AddressGroupList(in *AddressGroupList, out *controlplane.AddressGroupList, s conversion.Scope) error {
	return autoConvert_v1beta1_AddressGroupList_To_controlplane_AddressGroupList(in, out, s)
}

func autoConvert_controlplane_AddressGroupList_To_v1beta1_AddressGroupList(in *controlplane.AddressGroupList, out *AddressGroupList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]AddressGroup, len(*in))
		for i := range *in {
			if err := Convert_controlplane_AddressGroup_To_v1beta1_AddressGroup(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_controlplane_AddressGroupList_To_v1beta1_AddressGroupList is an autogenerated conversion function.
func Convert_controlplane_AddressGroupList_To_v1beta1_AddressGroupList(in *controlplane.AddressGroupList, out *AddressGroupList, s conversion.Scope) error {
	return autoConvert_controlplane_AddressGroupList_To_v1beta1_AddressGroupList(in, out, s)
}

func autoConvert_v1beta1_AddressGroupPatch_To_controlplane_AddressGroupPatch(in *AddressGroupPatch, out *controlplane.AddressGroupPatch, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	// WARNING: in.AddedPods requires manual conversion: does not exist in peer-type
	// WARNING: in.RemovedPods requires manual conversion: does not exist in peer-type
	if in.AddedGroupMembers != nil {
		in, out := &in.AddedGroupMembers, &out.AddedGroupMembers
		*out = make([]controlplane.GroupMember, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_GroupMember_To_controlplane_GroupMember(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.AddedGroupMembers = nil
	}
	if in.RemovedGroupMembers != nil {
		in, out := &in.RemovedGroupMembers, &out.RemovedGroupMembers
		*out = make([]controlplane.GroupMember, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_GroupMember_To_controlplane_GroupMember(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.RemovedGroupMembers = nil
	}
	return nil
}

func autoConvert_controlplane_AddressGroupPatch_To_v1beta1_AddressGroupPatch(in *controlplane.AddressGroupPatch, out *AddressGroupPatch, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if in.AddedGroupMembers != nil {
		in, out := &in.AddedGroupMembers, &out.AddedGroupMembers
		*out = make([]GroupMember, len(*in))
		for i := range *in {
			if err := Convert_controlplane_GroupMember_To_v1beta1_GroupMember(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.AddedGroupMembers = nil
	}
	if in.RemovedGroupMembers != nil {
		in, out := &in.RemovedGroupMembers, &out.RemovedGroupMembers
		*out = make([]GroupMember, len(*in))
		for i := range *in {
			if err := Convert_controlplane_GroupMember_To_v1beta1_GroupMember(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.RemovedGroupMembers = nil
	}
	return nil
}

func autoConvert_v1beta1_AppliedToGroup_To_controlplane_AppliedToGroup(in *AppliedToGroup, out *controlplane.AppliedToGroup, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	// WARNING: in.Pods requires manual conversion: does not exist in peer-type
	if in.GroupMembers != nil {
		in, out := &in.GroupMembers, &out.GroupMembers
		*out = make([]controlplane.GroupMember, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_GroupMember_To_controlplane_GroupMember(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.GroupMembers = nil
	}
	return nil
}

func autoConvert_controlplane_AppliedToGroup_To_v1beta1_AppliedToGroup(in *controlplane.AppliedToGroup, out *AppliedToGroup, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if in.GroupMembers != nil {
		in, out := &in.GroupMembers, &out.GroupMembers
		*out = make([]GroupMember, len(*in))
		for i := range *in {
			if err := Convert_controlplane_GroupMember_To_v1beta1_GroupMember(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.GroupMembers = nil
	}
	return nil
}

func autoConvert_v1beta1_AppliedToGroupList_To_controlplane_AppliedToGroupList(in *AppliedToGroupList, out *controlplane.AppliedToGroupList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]controlplane.AppliedToGroup, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_AppliedToGroup_To_controlplane_AppliedToGroup(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1beta1_AppliedToGroupList_To_controlplane_AppliedToGroupList is an autogenerated conversion function.
func Convert_v1beta1_AppliedToGroupList_To_controlplane_AppliedToGroupList(in *AppliedToGroupList, out *controlplane.AppliedToGroupList, s conversion.Scope) error {
	return autoConvert_v1beta1_AppliedToGroupList_To_controlplane_AppliedToGroupList(in, out, s)
}

func autoConvert_controlplane_AppliedToGroupList_To_v1beta1_AppliedToGroupList(in *controlplane.AppliedToGroupList, out *AppliedToGroupList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]AppliedToGroup, len(*in))
		for i := range *in {
			if err := Convert_controlplane_AppliedToGroup_To_v1beta1_AppliedToGroup(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_controlplane_AppliedToGroupList_To_v1beta1_AppliedToGroupList is an autogenerated conversion function.
func Convert_controlplane_AppliedToGroupList_To_v1beta1_AppliedToGroupList(in *controlplane.AppliedToGroupList, out *AppliedToGroupList, s conversion.Scope) error {
	return autoConvert_controlplane_AppliedToGroupList_To_v1beta1_AppliedToGroupList(in, out, s)
}

func autoConvert_v1beta1_AppliedToGroupPatch_To_controlplane_AppliedToGroupPatch(in *AppliedToGroupPatch, out *controlplane.AppliedToGroupPatch, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	// WARNING: in.AddedPods requires manual conversion: does not exist in peer-type
	// WARNING: in.RemovedPods requires manual conversion: does not exist in peer-type
	if in.AddedGroupMembers != nil {
		in, out := &in.AddedGroupMembers, &out.AddedGroupMembers
		*out = make([]controlplane.GroupMember, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_GroupMember_To_controlplane_GroupMember(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.AddedGroupMembers = nil
	}
	if in.RemovedGroupMembers != nil {
		in, out := &in.RemovedGroupMembers, &out.RemovedGroupMembers
		*out = make([]controlplane.GroupMember, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_GroupMember_To_controlplane_GroupMember(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.RemovedGroupMembers = nil
	}
	return nil
}

func autoConvert_controlplane_AppliedToGroupPatch_To_v1beta1_AppliedToGroupPatch(in *controlplane.AppliedToGroupPatch, out *AppliedToGroupPatch, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if in.AddedGroupMembers != nil {
		in, out := &in.AddedGroupMembers, &out.AddedGroupMembers
		*out = make([]GroupMember, len(*in))
		for i := range *in {
			if err := Convert_controlplane_GroupMember_To_v1beta1_GroupMember(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.AddedGroupMembers = nil
	}
	if in.RemovedGroupMembers != nil {
		in, out := &in.RemovedGroupMembers, &out.RemovedGroupMembers
		*out = make([]GroupMember, len(*in))
		for i := range *in {
			if err := Convert_controlplane_GroupMember_To_v1beta1_GroupMember(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.RemovedGroupMembers = nil
	}
	return nil
}

func autoConvert_v1beta1_ExternalEntityReference_To_controlplane_ExternalEntityReference(in *ExternalEntityReference, out *controlplane.ExternalEntityReference, s conversion.Scope) error {
	out.Name = in.Name
	out.Namespace = in.Namespace
	return nil
}

// Convert_v1beta1_ExternalEntityReference_To_controlplane_ExternalEntityReference is an autogenerated conversion function.
func Convert_v1beta1_ExternalEntityReference_To_controlplane_ExternalEntityReference(in *ExternalEntityReference, out *controlplane.ExternalEntityReference, s conversion.Scope) error {
	return autoConvert_v1beta1_ExternalEntityReference_To_controlplane_ExternalEntityReference(in, out, s)
}

func autoConvert_controlplane_ExternalEntityReference_To_v1beta1_ExternalEntityReference(in *controlplane.ExternalEntityReference, out *ExternalEntityReference, s conversion.Scope) error {
	out.Name = in.Name
	out.Namespace = in.Namespace
	return nil
}

// Convert_controlplane_ExternalEntityReference_To_v1beta1_ExternalEntityReference is an autogenerated conversion function.
func Convert_controlplane_ExternalEntityReference_To_v1beta1_ExternalEntityReference(in *controlplane.ExternalEntityReference, out *ExternalEntityReference, s conversion.Scope) error {
	return autoConvert_controlplane_ExternalEntityReference_To_v1beta1_ExternalEntityReference(in, out, s)
}

func autoConvert_v1beta1_GroupMember_To_controlplane_GroupMember(in *GroupMember, out *controlplane.GroupMember, s conversion.Scope) error {
	out.Pod = (*controlplane.PodReference)(unsafe.Pointer(in.Pod))
	out.ExternalEntity = (*controlplane.ExternalEntityReference)(unsafe.Pointer(in.ExternalEntity))
	// WARNING: in.Endpoints requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_controlplane_GroupMember_To_v1beta1_GroupMember(in *controlplane.GroupMember, out *GroupMember, s conversion.Scope) error {
	out.Pod = (*PodReference)(unsafe.Pointer(in.Pod))
	out.ExternalEntity = (*ExternalEntityReference)(unsafe.Pointer(in.ExternalEntity))
	// WARNING: in.IPs requires manual conversion: does not exist in peer-type
	// WARNING: in.Ports requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1beta1_IPBlock_To_controlplane_IPBlock(in *IPBlock, out *controlplane.IPBlock, s conversion.Scope) error {
	if err := Convert_v1beta1_IPNet_To_controlplane_IPNet(&in.CIDR, &out.CIDR, s); err != nil {
		return err
	}
	out.Except = *(*[]controlplane.IPNet)(unsafe.Pointer(&in.Except))
	return nil
}

// Convert_v1beta1_IPBlock_To_controlplane_IPBlock is an autogenerated conversion function.
func Convert_v1beta1_IPBlock_To_controlplane_IPBlock(in *IPBlock, out *controlplane.IPBlock, s conversion.Scope) error {
	return autoConvert_v1beta1_IPBlock_To_controlplane_IPBlock(in, out, s)
}

func autoConvert_controlplane_IPBlock_To_v1beta1_IPBlock(in *controlplane.IPBlock, out *IPBlock, s conversion.Scope) error {
	if err := Convert_controlplane_IPNet_To_v1beta1_IPNet(&in.CIDR, &out.CIDR, s); err != nil {
		return err
	}
	out.Except = *(*[]IPNet)(unsafe.Pointer(&in.Except))
	return nil
}

// Convert_controlplane_IPBlock_To_v1beta1_IPBlock is an autogenerated conversion function.
func Convert_controlplane_IPBlock_To_v1beta1_IPBlock(in *controlplane.IPBlock, out *IPBlock, s conversion.Scope) error {
	return autoConvert_controlplane_IPBlock_To_v1beta1_IPBlock(in, out, s)
}

func autoConvert_v1beta1_IPNet_To_controlplane_IPNet(in *IPNet, out *controlplane.IPNet, s conversion.Scope) error {
	out.IP = *(*controlplane.IPAddress)(unsafe.Pointer(&in.IP))
	out.PrefixLength = in.PrefixLength
	return nil
}

// Convert_v1beta1_IPNet_To_controlplane_IPNet is an autogenerated conversion function.
func Convert_v1beta1_IPNet_To_controlplane_IPNet(in *IPNet, out *controlplane.IPNet, s conversion.Scope) error {
	return autoConvert_v1beta1_IPNet_To_controlplane_IPNet(in, out, s)
}

func autoConvert_controlplane_IPNet_To_v1beta1_IPNet(in *controlplane.IPNet, out *IPNet, s conversion.Scope) error {
	out.IP = *(*IPAddress)(unsafe.Pointer(&in.IP))
	out.PrefixLength = in.PrefixLength
	return nil
}

// Convert_controlplane_IPNet_To_v1beta1_IPNet is an autogenerated conversion function.
func Convert_controlplane_IPNet_To_v1beta1_IPNet(in *controlplane.IPNet, out *IPNet, s conversion.Scope) error {
	return autoConvert_controlplane_IPNet_To_v1beta1_IPNet(in, out, s)
}

func autoConvert_v1beta1_NamedPort_To_controlplane_NamedPort(in *NamedPort, out *controlplane.NamedPort, s conversion.Scope) error {
	out.Port = in.Port
	out.Name = in.Name
	out.Protocol = controlplane.Protocol(in.Protocol)
	return nil
}

// Convert_v1beta1_NamedPort_To_controlplane_NamedPort is an autogenerated conversion function.
func Convert_v1beta1_NamedPort_To_controlplane_NamedPort(in *NamedPort, out *controlplane.NamedPort, s conversion.Scope) error {
	return autoConvert_v1beta1_NamedPort_To_controlplane_NamedPort(in, out, s)
}

func autoConvert_controlplane_NamedPort_To_v1beta1_NamedPort(in *controlplane.NamedPort, out *NamedPort, s conversion.Scope) error {
	out.Port = in.Port
	out.Name = in.Name
	out.Protocol = Protocol(in.Protocol)
	return nil
}

// Convert_controlplane_NamedPort_To_v1beta1_NamedPort is an autogenerated conversion function.
func Convert_controlplane_NamedPort_To_v1beta1_NamedPort(in *controlplane.NamedPort, out *NamedPort, s conversion.Scope) error {
	return autoConvert_controlplane_NamedPort_To_v1beta1_NamedPort(in, out, s)
}

func autoConvert_v1beta1_NetworkPolicy_To_controlplane_NetworkPolicy(in *NetworkPolicy, out *controlplane.NetworkPolicy, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if in.Rules != nil {
		in, out := &in.Rules, &out.Rules
		*out = make([]controlplane.NetworkPolicyRule, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_NetworkPolicyRule_To_controlplane_NetworkPolicyRule(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Rules = nil
	}
	out.AppliedToGroups = *(*[]string)(unsafe.Pointer(&in.AppliedToGroups))
	out.Priority = (*float64)(unsafe.Pointer(in.Priority))
	out.TierPriority = (*int32)(unsafe.Pointer(in.TierPriority))
	out.SourceRef = (*controlplane.NetworkPolicyReference)(unsafe.Pointer(in.SourceRef))
	return nil
}

// Convert_v1beta1_NetworkPolicy_To_controlplane_NetworkPolicy is an autogenerated conversion function.
func Convert_v1beta1_NetworkPolicy_To_controlplane_NetworkPolicy(in *NetworkPolicy, out *controlplane.NetworkPolicy, s conversion.Scope) error {
	return autoConvert_v1beta1_NetworkPolicy_To_controlplane_NetworkPolicy(in, out, s)
}

func autoConvert_controlplane_NetworkPolicy_To_v1beta1_NetworkPolicy(in *controlplane.NetworkPolicy, out *NetworkPolicy, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if in.Rules != nil {
		in, out := &in.Rules, &out.Rules
		*out = make([]NetworkPolicyRule, len(*in))
		for i := range *in {
			if err := Convert_controlplane_NetworkPolicyRule_To_v1beta1_NetworkPolicyRule(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Rules = nil
	}
	out.AppliedToGroups = *(*[]string)(unsafe.Pointer(&in.AppliedToGroups))
	out.Priority = (*float64)(unsafe.Pointer(in.Priority))
	out.TierPriority = (*int32)(unsafe.Pointer(in.TierPriority))
	out.SourceRef = (*NetworkPolicyReference)(unsafe.Pointer(in.SourceRef))
	return nil
}

func autoConvert_v1beta1_NetworkPolicyList_To_controlplane_NetworkPolicyList(in *NetworkPolicyList, out *controlplane.NetworkPolicyList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]controlplane.NetworkPolicy, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_NetworkPolicy_To_controlplane_NetworkPolicy(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1beta1_NetworkPolicyList_To_controlplane_NetworkPolicyList is an autogenerated conversion function.
func Convert_v1beta1_NetworkPolicyList_To_controlplane_NetworkPolicyList(in *NetworkPolicyList, out *controlplane.NetworkPolicyList, s conversion.Scope) error {
	return autoConvert_v1beta1_NetworkPolicyList_To_controlplane_NetworkPolicyList(in, out, s)
}

func autoConvert_controlplane_NetworkPolicyList_To_v1beta1_NetworkPolicyList(in *controlplane.NetworkPolicyList, out *NetworkPolicyList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]NetworkPolicy, len(*in))
		for i := range *in {
			if err := Convert_controlplane_NetworkPolicy_To_v1beta1_NetworkPolicy(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_controlplane_NetworkPolicyList_To_v1beta1_NetworkPolicyList is an autogenerated conversion function.
func Convert_controlplane_NetworkPolicyList_To_v1beta1_NetworkPolicyList(in *controlplane.NetworkPolicyList, out *NetworkPolicyList, s conversion.Scope) error {
	return autoConvert_controlplane_NetworkPolicyList_To_v1beta1_NetworkPolicyList(in, out, s)
}

func autoConvert_v1beta1_NetworkPolicyPeer_To_controlplane_NetworkPolicyPeer(in *NetworkPolicyPeer, out *controlplane.NetworkPolicyPeer, s conversion.Scope) error {
	out.AddressGroups = *(*[]string)(unsafe.Pointer(&in.AddressGroups))
	out.IPBlocks = *(*[]controlplane.IPBlock)(unsafe.Pointer(&in.IPBlocks))
	return nil
}

// Convert_v1beta1_NetworkPolicyPeer_To_controlplane_NetworkPolicyPeer is an autogenerated conversion function.
func Convert_v1beta1_NetworkPolicyPeer_To_controlplane_NetworkPolicyPeer(in *NetworkPolicyPeer, out *controlplane.NetworkPolicyPeer, s conversion.Scope) error {
	return autoConvert_v1beta1_NetworkPolicyPeer_To_controlplane_NetworkPolicyPeer(in, out, s)
}

func autoConvert_controlplane_NetworkPolicyPeer_To_v1beta1_NetworkPolicyPeer(in *controlplane.NetworkPolicyPeer, out *NetworkPolicyPeer, s conversion.Scope) error {
	out.AddressGroups = *(*[]string)(unsafe.Pointer(&in.AddressGroups))
	out.IPBlocks = *(*[]IPBlock)(unsafe.Pointer(&in.IPBlocks))
	return nil
}

// Convert_controlplane_NetworkPolicyPeer_To_v1beta1_NetworkPolicyPeer is an autogenerated conversion function.
func Convert_controlplane_NetworkPolicyPeer_To_v1beta1_NetworkPolicyPeer(in *controlplane.NetworkPolicyPeer, out *NetworkPolicyPeer, s conversion.Scope) error {
	return autoConvert_controlplane_NetworkPolicyPeer_To_v1beta1_NetworkPolicyPeer(in, out, s)
}

func autoConvert_v1beta1_NetworkPolicyReference_To_controlplane_NetworkPolicyReference(in *NetworkPolicyReference, out *controlplane.NetworkPolicyReference, s conversion.Scope) error {
	out.Type = controlplane.NetworkPolicyType(in.Type)
	out.Namespace = in.Namespace
	out.Name = in.Name
	out.UID = types.UID(in.UID)
	return nil
}

// Convert_v1beta1_NetworkPolicyReference_To_controlplane_NetworkPolicyReference is an autogenerated conversion function.
func Convert_v1beta1_NetworkPolicyReference_To_controlplane_NetworkPolicyReference(in *NetworkPolicyReference, out *controlplane.NetworkPolicyReference, s conversion.Scope) error {
	return autoConvert_v1beta1_NetworkPolicyReference_To_controlplane_NetworkPolicyReference(in, out, s)
}

func autoConvert_controlplane_NetworkPolicyReference_To_v1beta1_NetworkPolicyReference(in *controlplane.NetworkPolicyReference, out *NetworkPolicyReference, s conversion.Scope) error {
	out.Type = NetworkPolicyType(in.Type)
	out.Namespace = in.Namespace
	out.Name = in.Name
	out.UID = types.UID(in.UID)
	return nil
}

// Convert_controlplane_NetworkPolicyReference_To_v1beta1_NetworkPolicyReference is an autogenerated conversion function.
func Convert_controlplane_NetworkPolicyReference_To_v1beta1_NetworkPolicyReference(in *controlplane.NetworkPolicyReference, out *NetworkPolicyReference, s conversion.Scope) error {
	return autoConvert_controlplane_NetworkPolicyReference_To_v1beta1_NetworkPolicyReference(in, out, s)
}

func autoConvert_v1beta1_NetworkPolicyRule_To_controlplane_NetworkPolicyRule(in *NetworkPolicyRule, out *controlplane.NetworkPolicyRule, s conversion.Scope) error {
	out.Direction = controlplane.Direction(in.Direction)
	if err := Convert_v1beta1_NetworkPolicyPeer_To_controlplane_NetworkPolicyPeer(&in.From, &out.From, s); err != nil {
		return err
	}
	if err := Convert_v1beta1_NetworkPolicyPeer_To_controlplane_NetworkPolicyPeer(&in.To, &out.To, s); err != nil {
		return err
	}
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make([]controlplane.Service, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_Service_To_controlplane_Service(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Services = nil
	}
	out.Priority = in.Priority
	out.Action = (*v1alpha1.RuleAction)(unsafe.Pointer(in.Action))
	out.EnableLogging = in.EnableLogging
	return nil
}

// Convert_v1beta1_NetworkPolicyRule_To_controlplane_NetworkPolicyRule is an autogenerated conversion function.
func Convert_v1beta1_NetworkPolicyRule_To_controlplane_NetworkPolicyRule(in *NetworkPolicyRule, out *controlplane.NetworkPolicyRule, s conversion.Scope) error {
	return autoConvert_v1beta1_NetworkPolicyRule_To_controlplane_NetworkPolicyRule(in, out, s)
}

func autoConvert_controlplane_NetworkPolicyRule_To_v1beta1_NetworkPolicyRule(in *controlplane.NetworkPolicyRule, out *NetworkPolicyRule, s conversion.Scope) error {
	out.Direction = Direction(in.Direction)
	if err := Convert_controlplane_NetworkPolicyPeer_To_v1beta1_NetworkPolicyPeer(&in.From, &out.From, s); err != nil {
		return err
	}
	if err := Convert_controlplane_NetworkPolicyPeer_To_v1beta1_NetworkPolicyPeer(&in.To, &out.To, s); err != nil {
		return err
	}
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make([]Service, len(*in))
		for i := range *in {
			if err := Convert_controlplane_Service_To_v1beta1_Service(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Services = nil
	}
	out.Priority = in.Priority
	out.Action = (*v1alpha1.RuleAction)(unsafe.Pointer(in.Action))
	out.EnableLogging = in.EnableLogging
	// WARNING: in.AppliedToGroups requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1beta1_NetworkPolicyStats_To_controlplane_NetworkPolicyStats(in *NetworkPolicyStats, out *controlplane.NetworkPolicyStats, s conversion.Scope) error {
	if err := Convert_v1beta1_NetworkPolicyReference_To_controlplane_NetworkPolicyReference(&in.NetworkPolicy, &out.NetworkPolicy, s); err != nil {
		return err
	}
	out.TrafficStats = in.TrafficStats
	return nil
}

// Convert_v1beta1_NetworkPolicyStats_To_controlplane_NetworkPolicyStats is an autogenerated conversion function.
func Convert_v1beta1_NetworkPolicyStats_To_controlplane_NetworkPolicyStats(in *NetworkPolicyStats, out *controlplane.NetworkPolicyStats, s conversion.Scope) error {
	return autoConvert_v1beta1_NetworkPolicyStats_To_controlplane_NetworkPolicyStats(in, out, s)
}

func autoConvert_controlplane_NetworkPolicyStats_To_v1beta1_NetworkPolicyStats(in *controlplane.NetworkPolicyStats, out *NetworkPolicyStats, s conversion.Scope) error {
	if err := Convert_controlplane_NetworkPolicyReference_To_v1beta1_NetworkPolicyReference(&in.NetworkPolicy, &out.NetworkPolicy, s); err != nil {
		return err
	}
	out.TrafficStats = in.TrafficStats
	return nil
}

// Convert_controlplane_NetworkPolicyStats_To_v1beta1_NetworkPolicyStats is an autogenerated conversion function.
func Convert_controlplane_NetworkPolicyStats_To_v1beta1_NetworkPolicyStats(in *controlplane.NetworkPolicyStats, out *NetworkPolicyStats, s conversion.Scope) error {
	return autoConvert_controlplane_NetworkPolicyStats_To_v1beta1_NetworkPolicyStats(in, out, s)
}

func autoConvert_v1beta1_NodeStatsSummary_To_controlplane_NodeStatsSummary(in *NodeStatsSummary, out *controlplane.NodeStatsSummary, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	out.NetworkPolicies = *(*[]controlplane.NetworkPolicyStats)(unsafe.Pointer(&in.NetworkPolicies))
	out.AntreaClusterNetworkPolicies = *(*[]controlplane.NetworkPolicyStats)(unsafe.Pointer(&in.AntreaClusterNetworkPolicies))
	out.AntreaNetworkPolicies = *(*[]controlplane.NetworkPolicyStats)(unsafe.Pointer(&in.AntreaNetworkPolicies))
	return nil
}

// Convert_v1beta1_NodeStatsSummary_To_controlplane_NodeStatsSummary is an autogenerated conversion function.
func Convert_v1beta1_NodeStatsSummary_To_controlplane_NodeStatsSummary(in *NodeStatsSummary, out *controlplane.NodeStatsSummary, s conversion.Scope) error {
	return autoConvert_v1beta1_NodeStatsSummary_To_controlplane_NodeStatsSummary(in, out, s)
}

func autoConvert_controlplane_NodeStatsSummary_To_v1beta1_NodeStatsSummary(in *controlplane.NodeStatsSummary, out *NodeStatsSummary, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	out.NetworkPolicies = *(*[]NetworkPolicyStats)(unsafe.Pointer(&in.NetworkPolicies))
	out.AntreaClusterNetworkPolicies = *(*[]NetworkPolicyStats)(unsafe.Pointer(&in.AntreaClusterNetworkPolicies))
	out.AntreaNetworkPolicies = *(*[]NetworkPolicyStats)(unsafe.Pointer(&in.AntreaNetworkPolicies))
	return nil
}

// Convert_controlplane_NodeStatsSummary_To_v1beta1_NodeStatsSummary is an autogenerated conversion function.
func Convert_controlplane_NodeStatsSummary_To_v1beta1_NodeStatsSummary(in *controlplane.NodeStatsSummary, out *NodeStatsSummary, s conversion.Scope) error {
	return autoConvert_controlplane_NodeStatsSummary_To_v1beta1_NodeStatsSummary(in, out, s)
}

func autoConvert_v1beta1_PodReference_To_controlplane_PodReference(in *PodReference, out *controlplane.PodReference, s conversion.Scope) error {
	out.Name = in.Name
	out.Namespace = in.Namespace
	return nil
}

// Convert_v1beta1_PodReference_To_controlplane_PodReference is an autogenerated conversion function.
func Convert_v1beta1_PodReference_To_controlplane_PodReference(in *PodReference, out *controlplane.PodReference, s conversion.Scope) error {
	return autoConvert_v1beta1_PodReference_To_controlplane_PodReference(in, out, s)
}

func autoConvert_controlplane_PodReference_To_v1beta1_PodReference(in *controlplane.PodReference, out *PodReference, s conversion.Scope) error {
	out.Name = in.Name
	out.Namespace = in.Namespace
	return nil
}

// Convert_controlplane_PodReference_To_v1beta1_PodReference is an autogenerated conversion function.
func Convert_controlplane_PodReference_To_v1beta1_PodReference(in *controlplane.PodReference, out *PodReference, s conversion.Scope) error {
	return autoConvert_controlplane_PodReference_To_v1beta1_PodReference(in, out, s)
}

func autoConvert_v1beta1_Service_To_controlplane_Service(in *Service, out *controlplane.Service, s conversion.Scope) error {
	out.Protocol = (*controlplane.Protocol)(unsafe.Pointer(in.Protocol))
	out.Port = (*intstr.IntOrString)(unsafe.Pointer(in.Port))
	return nil
}

func autoConvert_controlplane_Service_To_v1beta1_Service(in *controlplane.Service, out *Service, s conversion.Scope) error {
	out.Protocol = (*Protocol)(unsafe.Pointer(in.Protocol))
	out.Port = (*intstr.IntOrString)(unsafe.Pointer(in.Port))
	// WARNING: in.EndPort requires manual conversion: does not exist in peer-type
	return nil
}
