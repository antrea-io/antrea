// Copyright 2020 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	traceflowv1 "github.com/vmware-tanzu/antrea/plugins/pkg/apis/traceflow/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeTraceflows implements TraceflowInterface
type FakeTraceflows struct {
	Fake *FakeAntreaV1
}

var traceflowsResource = schema.GroupVersionResource{Group: "antrea.tanzu.vmware.com", Version: "v1", Resource: "traceflows"}

var traceflowsKind = schema.GroupVersionKind{Group: "antrea.tanzu.vmware.com", Version: "v1", Kind: "Traceflow"}

// Get takes name of the traceflow, and returns the corresponding traceflow object, and an error if there is any.
func (c *FakeTraceflows) Get(name string, options v1.GetOptions) (result *traceflowv1.Traceflow, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(traceflowsResource, name), &traceflowv1.Traceflow{})
	if obj == nil {
		return nil, err
	}
	return obj.(*traceflowv1.Traceflow), err
}

// List takes label and field selectors, and returns the list of Traceflows that match those selectors.
func (c *FakeTraceflows) List(opts v1.ListOptions) (result *traceflowv1.TraceflowList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(traceflowsResource, traceflowsKind, opts), &traceflowv1.TraceflowList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &traceflowv1.TraceflowList{ListMeta: obj.(*traceflowv1.TraceflowList).ListMeta}
	for _, item := range obj.(*traceflowv1.TraceflowList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested traceflows.
func (c *FakeTraceflows) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(traceflowsResource, opts))
}

// Create takes the representation of a traceflow and creates it.  Returns the server's representation of the traceflow, and an error, if there is any.
func (c *FakeTraceflows) Create(traceflow *traceflowv1.Traceflow) (result *traceflowv1.Traceflow, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(traceflowsResource, traceflow), &traceflowv1.Traceflow{})
	if obj == nil {
		return nil, err
	}
	return obj.(*traceflowv1.Traceflow), err
}

// Update takes the representation of a traceflow and updates it. Returns the server's representation of the traceflow, and an error, if there is any.
func (c *FakeTraceflows) Update(traceflow *traceflowv1.Traceflow) (result *traceflowv1.Traceflow, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(traceflowsResource, traceflow), &traceflowv1.Traceflow{})
	if obj == nil {
		return nil, err
	}
	return obj.(*traceflowv1.Traceflow), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeTraceflows) UpdateStatus(traceflow *traceflowv1.Traceflow) (*traceflowv1.Traceflow, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(traceflowsResource, "status", traceflow), &traceflowv1.Traceflow{})
	if obj == nil {
		return nil, err
	}
	return obj.(*traceflowv1.Traceflow), err
}

// Delete takes name of the traceflow and deletes it. Returns an error if one occurs.
func (c *FakeTraceflows) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(traceflowsResource, name), &traceflowv1.Traceflow{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeTraceflows) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(traceflowsResource, listOptions)

	_, err := c.Fake.Invokes(action, &traceflowv1.TraceflowList{})
	return err
}

// Patch applies the patch and returns the patched traceflow.
func (c *FakeTraceflows) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *traceflowv1.Traceflow, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(traceflowsResource, name, pt, data, subresources...), &traceflowv1.Traceflow{})
	if obj == nil {
		return nil, err
	}
	return obj.(*traceflowv1.Traceflow), err
}
