// Copyright 2022 Antrea Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/multicluster/member_clusterset_controller.go

// Package multicluster is a generated GoMock package.
package multicluster

import (
	reflect "reflect"

	v1alpha1 "antrea.io/antrea/multicluster/apis/multicluster/v1alpha1"
	common "antrea.io/antrea/multicluster/controllers/multicluster/common"
	commonarea "antrea.io/antrea/multicluster/controllers/multicluster/commonarea"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	rest "k8s.io/client-go/rest"
	client "sigs.k8s.io/controller-runtime/pkg/client"
	manager "sigs.k8s.io/controller-runtime/pkg/manager"
)

// MockRemoteCommonAreaGetter is a mock of RemoteCommonAreaGetter interface.
type MockRemoteCommonAreaGetter struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteCommonAreaGetterMockRecorder
}

// MockRemoteCommonAreaGetterMockRecorder is the mock recorder for MockRemoteCommonAreaGetter.
type MockRemoteCommonAreaGetterMockRecorder struct {
	mock *MockRemoteCommonAreaGetter
}

// NewMockRemoteCommonAreaGetter creates a new mock instance.
func NewMockRemoteCommonAreaGetter(ctrl *gomock.Controller) *MockRemoteCommonAreaGetter {
	mock := &MockRemoteCommonAreaGetter{ctrl: ctrl}
	mock.recorder = &MockRemoteCommonAreaGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteCommonAreaGetter) EXPECT() *MockRemoteCommonAreaGetterMockRecorder {
	return m.recorder
}

// GetRemoteCommonAreaAndLocalID mocks base method.
func (m *MockRemoteCommonAreaGetter) GetRemoteCommonAreaAndLocalID() (commonarea.RemoteCommonArea, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteCommonAreaAndLocalID")
	ret0, _ := ret[0].(commonarea.RemoteCommonArea)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRemoteCommonAreaAndLocalID indicates an expected call of GetRemoteCommonAreaAndLocalID.
func (mr *MockRemoteCommonAreaGetterMockRecorder) GetRemoteCommonAreaAndLocalID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteCommonAreaAndLocalID", reflect.TypeOf((*MockRemoteCommonAreaGetter)(nil).GetRemoteCommonAreaAndLocalID))
}

// GetRemoteCommonAreaPre mocks base method.
func (m *MockRemoteCommonAreaGetter) GetRemoteCommonAreaPre(secretObj *v1.Secret, url string, clusterID common.ClusterID, clusterSet *v1alpha1.ClusterSet) (*rest.Config, manager.Manager, client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteCommonAreaPre", secretObj, url, clusterID, clusterSet)
	ret0, _ := ret[0].(*rest.Config)
	ret1, _ := ret[1].(manager.Manager)
	ret2, _ := ret[2].(client.Client)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetRemoteCommonAreaPre indicates an expected call of GetRemoteCommonAreaPre.
func (mr *MockRemoteCommonAreaGetterMockRecorder) GetRemoteCommonAreaPre(secretObj, url, clusterID, clusterSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteCommonAreaPre", reflect.TypeOf((*MockRemoteCommonAreaGetter)(nil).GetRemoteCommonAreaPre), secretObj, url, clusterID, clusterSet)
}
