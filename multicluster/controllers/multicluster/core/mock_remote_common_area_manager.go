// Copyright 2021 Antrea Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/multicluster/core/remote_common_area_manager.go

// Package core is a generated GoMock package.
package core

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	v1alpha1 "antrea.io/antrea/multicluster/apis/multicluster/v1alpha1"
	common "antrea.io/antrea/multicluster/controllers/multicluster/common"
)

// MockRemoteCommonAreaManager is a mock of RemoteCommonAreaManager interface.
type MockRemoteCommonAreaManager struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteCommonAreaManagerMockRecorder
}

// MockRemoteCommonAreaManagerMockRecorder is the mock recorder for MockRemoteCommonAreaManager.
type MockRemoteCommonAreaManagerMockRecorder struct {
	mock *MockRemoteCommonAreaManager
}

// NewMockRemoteCommonAreaManager creates a new mock instance.
func NewMockRemoteCommonAreaManager(ctrl *gomock.Controller) *MockRemoteCommonAreaManager {
	mock := &MockRemoteCommonAreaManager{ctrl: ctrl}
	mock.recorder = &MockRemoteCommonAreaManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteCommonAreaManager) EXPECT() *MockRemoteCommonAreaManagerMockRecorder {
	return m.recorder
}

// AddRemoteCommonArea mocks base method.
func (m *MockRemoteCommonAreaManager) AddRemoteCommonArea(remoteCommonArea RemoteCommonArea) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRemoteCommonArea", remoteCommonArea)
}

// AddRemoteCommonArea indicates an expected call of AddRemoteCommonArea.
func (mr *MockRemoteCommonAreaManagerMockRecorder) AddRemoteCommonArea(remoteCommonArea interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteCommonArea", reflect.TypeOf((*MockRemoteCommonAreaManager)(nil).AddRemoteCommonArea), remoteCommonArea)
}

// GetElectedLeaderClusterID mocks base method.
func (m *MockRemoteCommonAreaManager) GetElectedLeaderClusterID() common.ClusterID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetElectedLeaderClusterID")
	ret0, _ := ret[0].(common.ClusterID)
	return ret0
}

// GetElectedLeaderClusterID indicates an expected call of GetElectedLeaderClusterID.
func (mr *MockRemoteCommonAreaManagerMockRecorder) GetElectedLeaderClusterID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElectedLeaderClusterID", reflect.TypeOf((*MockRemoteCommonAreaManager)(nil).GetElectedLeaderClusterID))
}

// GetLocalClusterID mocks base method.
func (m *MockRemoteCommonAreaManager) GetLocalClusterID() common.ClusterID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalClusterID")
	ret0, _ := ret[0].(common.ClusterID)
	return ret0
}

// GetLocalClusterID indicates an expected call of GetLocalClusterID.
func (mr *MockRemoteCommonAreaManagerMockRecorder) GetLocalClusterID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalClusterID", reflect.TypeOf((*MockRemoteCommonAreaManager)(nil).GetLocalClusterID))
}

// GetMemberClusterStatues mocks base method.
func (m *MockRemoteCommonAreaManager) GetMemberClusterStatues() []v1alpha1.ClusterStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberClusterStatues")
	ret0, _ := ret[0].([]v1alpha1.ClusterStatus)
	return ret0
}

// GetMemberClusterStatues indicates an expected call of GetMemberClusterStatues.
func (mr *MockRemoteCommonAreaManagerMockRecorder) GetMemberClusterStatues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberClusterStatues", reflect.TypeOf((*MockRemoteCommonAreaManager)(nil).GetMemberClusterStatues))
}

// GetRemoteCommonAreas mocks base method.
func (m *MockRemoteCommonAreaManager) GetRemoteCommonAreas() map[common.ClusterID]RemoteCommonArea {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteCommonAreas")
	ret0, _ := ret[0].(map[common.ClusterID]RemoteCommonArea)
	return ret0
}

// GetRemoteCommonAreas indicates an expected call of GetRemoteCommonAreas.
func (mr *MockRemoteCommonAreaManagerMockRecorder) GetRemoteCommonAreas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteCommonAreas", reflect.TypeOf((*MockRemoteCommonAreaManager)(nil).GetRemoteCommonAreas))
}

// RemoveRemoteCommonArea mocks base method.
func (m *MockRemoteCommonAreaManager) RemoveRemoteCommonArea(remoteCluster RemoteCommonArea) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveRemoteCommonArea", remoteCluster)
}

// RemoveRemoteCommonArea indicates an expected call of RemoveRemoteCommonArea.
func (mr *MockRemoteCommonAreaManagerMockRecorder) RemoveRemoteCommonArea(remoteCluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRemoteCommonArea", reflect.TypeOf((*MockRemoteCommonAreaManager)(nil).RemoveRemoteCommonArea), remoteCluster)
}

// Start mocks base method.
func (m *MockRemoteCommonAreaManager) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRemoteCommonAreaManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRemoteCommonAreaManager)(nil).Start))
}

// Stop mocks base method.
func (m *MockRemoteCommonAreaManager) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockRemoteCommonAreaManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRemoteCommonAreaManager)(nil).Stop))
}
