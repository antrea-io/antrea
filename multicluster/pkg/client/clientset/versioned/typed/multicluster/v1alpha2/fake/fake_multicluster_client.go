<<<<<<< HEAD
// Copyright 2023 Antrea Authors
=======
<<<<<<<< HEAD:pkg/client/clientset/versioned/typed/system/v1beta1/fake/fake_system_client.go
// Copyright 2021 Antrea Authors
========
// Copyright 2023 Antrea Authors
>>>>>>>> origin/main:multicluster/pkg/client/clientset/versioned/typed/multicluster/v1alpha2/fake/fake_multicluster_client.go
>>>>>>> origin/main
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
<<<<<<< HEAD
	v1alpha2 "antrea.io/antrea/v2/multicluster/pkg/client/clientset/versioned/typed/multicluster/v1alpha2"
=======
<<<<<<<< HEAD:pkg/client/clientset/versioned/typed/system/v1beta1/fake/fake_system_client.go
	v1beta1 "antrea.io/antrea/v2/pkg/client/clientset/versioned/typed/system/v1beta1"
========
	v1alpha2 "antrea.io/antrea/multicluster/pkg/client/clientset/versioned/typed/multicluster/v1alpha2"
>>>>>>>> origin/main:multicluster/pkg/client/clientset/versioned/typed/multicluster/v1alpha2/fake/fake_multicluster_client.go
>>>>>>> origin/main
	rest "k8s.io/client-go/rest"
	testing "k8s.io/client-go/testing"
)

<<<<<<< HEAD
=======
<<<<<<<< HEAD:pkg/client/clientset/versioned/typed/system/v1beta1/fake/fake_system_client.go
type FakeSystemV1beta1 struct {
	*testing.Fake
}

func (c *FakeSystemV1beta1) SupportBundles() v1beta1.SupportBundleInterface {
	return &FakeSupportBundles{c}
========
>>>>>>> origin/main
type FakeMulticlusterV1alpha2 struct {
	*testing.Fake
}

func (c *FakeMulticlusterV1alpha2) ClusterClaims(namespace string) v1alpha2.ClusterClaimInterface {
	return &FakeClusterClaims{c, namespace}
}

func (c *FakeMulticlusterV1alpha2) ClusterSets(namespace string) v1alpha2.ClusterSetInterface {
	return &FakeClusterSets{c, namespace}
<<<<<<< HEAD
=======
>>>>>>>> origin/main:multicluster/pkg/client/clientset/versioned/typed/multicluster/v1alpha2/fake/fake_multicluster_client.go
>>>>>>> origin/main
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
<<<<<<< HEAD
func (c *FakeMulticlusterV1alpha2) RESTClient() rest.Interface {
=======
<<<<<<<< HEAD:pkg/client/clientset/versioned/typed/system/v1beta1/fake/fake_system_client.go
func (c *FakeSystemV1beta1) RESTClient() rest.Interface {
========
func (c *FakeMulticlusterV1alpha2) RESTClient() rest.Interface {
>>>>>>>> origin/main:multicluster/pkg/client/clientset/versioned/typed/multicluster/v1alpha2/fake/fake_multicluster_client.go
>>>>>>> origin/main
	var ret *rest.RESTClient
	return ret
}
