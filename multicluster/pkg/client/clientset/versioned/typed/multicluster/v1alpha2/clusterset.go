// Copyright 2024 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha2

import (
	"context"

	v1alpha2 "antrea.io/antrea/multicluster/apis/multicluster/v1alpha2"
	scheme "antrea.io/antrea/multicluster/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ClusterSetsGetter has a method to return a ClusterSetInterface.
// A group's client should implement this interface.
type ClusterSetsGetter interface {
	ClusterSets(namespace string) ClusterSetInterface
}

// ClusterSetInterface has methods to work with ClusterSet resources.
type ClusterSetInterface interface {
	Create(ctx context.Context, clusterSet *v1alpha2.ClusterSet, opts v1.CreateOptions) (*v1alpha2.ClusterSet, error)
	Update(ctx context.Context, clusterSet *v1alpha2.ClusterSet, opts v1.UpdateOptions) (*v1alpha2.ClusterSet, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, clusterSet *v1alpha2.ClusterSet, opts v1.UpdateOptions) (*v1alpha2.ClusterSet, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha2.ClusterSet, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha2.ClusterSetList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha2.ClusterSet, err error)
	ClusterSetExpansion
}

// clusterSets implements ClusterSetInterface
type clusterSets struct {
	*gentype.ClientWithList[*v1alpha2.ClusterSet, *v1alpha2.ClusterSetList]
}

// newClusterSets returns a ClusterSets
func newClusterSets(c *MulticlusterV1alpha2Client, namespace string) *clusterSets {
	return &clusterSets{
		gentype.NewClientWithList[*v1alpha2.ClusterSet, *v1alpha2.ClusterSetList](
			"clustersets",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1alpha2.ClusterSet { return &v1alpha2.ClusterSet{} },
			func() *v1alpha2.ClusterSetList { return &v1alpha2.ClusterSetList{} }),
	}
}
