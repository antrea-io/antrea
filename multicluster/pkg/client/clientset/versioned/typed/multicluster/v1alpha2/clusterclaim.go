// Copyright 2025 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha2

import (
	context "context"

	multiclusterv1alpha2 "antrea.io/antrea/multicluster/apis/multicluster/v1alpha2"
	scheme "antrea.io/antrea/multicluster/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ClusterClaimsGetter has a method to return a ClusterClaimInterface.
// A group's client should implement this interface.
type ClusterClaimsGetter interface {
	ClusterClaims(namespace string) ClusterClaimInterface
}

// ClusterClaimInterface has methods to work with ClusterClaim resources.
type ClusterClaimInterface interface {
	Create(ctx context.Context, clusterClaim *multiclusterv1alpha2.ClusterClaim, opts v1.CreateOptions) (*multiclusterv1alpha2.ClusterClaim, error)
	Update(ctx context.Context, clusterClaim *multiclusterv1alpha2.ClusterClaim, opts v1.UpdateOptions) (*multiclusterv1alpha2.ClusterClaim, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*multiclusterv1alpha2.ClusterClaim, error)
	List(ctx context.Context, opts v1.ListOptions) (*multiclusterv1alpha2.ClusterClaimList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *multiclusterv1alpha2.ClusterClaim, err error)
	ClusterClaimExpansion
}

// clusterClaims implements ClusterClaimInterface
type clusterClaims struct {
	*gentype.ClientWithList[*multiclusterv1alpha2.ClusterClaim, *multiclusterv1alpha2.ClusterClaimList]
}

// newClusterClaims returns a ClusterClaims
func newClusterClaims(c *MulticlusterV1alpha2Client, namespace string) *clusterClaims {
	return &clusterClaims{
		gentype.NewClientWithList[*multiclusterv1alpha2.ClusterClaim, *multiclusterv1alpha2.ClusterClaimList](
			"clusterclaims",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *multiclusterv1alpha2.ClusterClaim { return &multiclusterv1alpha2.ClusterClaim{} },
			func() *multiclusterv1alpha2.ClusterClaimList { return &multiclusterv1alpha2.ClusterClaimList{} },
		),
	}
}
