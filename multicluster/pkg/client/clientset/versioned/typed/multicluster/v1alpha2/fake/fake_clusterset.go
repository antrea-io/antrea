// Copyright 2025 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha2 "antrea.io/antrea/multicluster/apis/multicluster/v1alpha2"
	multiclusterv1alpha2 "antrea.io/antrea/multicluster/pkg/client/clientset/versioned/typed/multicluster/v1alpha2"
	gentype "k8s.io/client-go/gentype"
)

// fakeClusterSets implements ClusterSetInterface
type fakeClusterSets struct {
	*gentype.FakeClientWithList[*v1alpha2.ClusterSet, *v1alpha2.ClusterSetList]
	Fake *FakeMulticlusterV1alpha2
}

func newFakeClusterSets(fake *FakeMulticlusterV1alpha2, namespace string) multiclusterv1alpha2.ClusterSetInterface {
	return &fakeClusterSets{
		gentype.NewFakeClientWithList[*v1alpha2.ClusterSet, *v1alpha2.ClusterSetList](
			fake.Fake,
			namespace,
			v1alpha2.SchemeGroupVersion.WithResource("clustersets"),
			v1alpha2.SchemeGroupVersion.WithKind("ClusterSet"),
			func() *v1alpha2.ClusterSet { return &v1alpha2.ClusterSet{} },
			func() *v1alpha2.ClusterSetList { return &v1alpha2.ClusterSetList{} },
			func(dst, src *v1alpha2.ClusterSetList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha2.ClusterSetList) []*v1alpha2.ClusterSet { return gentype.ToPointerSlice(list.Items) },
			func(list *v1alpha2.ClusterSetList, items []*v1alpha2.ClusterSet) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
