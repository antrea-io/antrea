name: Go
on:
  pull_request:
    branches:
    - main
    - release-*
  push:
    branches:
    - main
    - release-*

env:
  go-cache-name: go

jobs:

  changedfiles:
    runs-on: [ubuntu-latest]
    outputs:
      docs: ${{ steps.changes.outputs.docs }}
      all: ${{ steps.changefiles.outputs.all }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Get changed files
      id: changes
      run: |
        echo "::set-output name=docs::$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }} | xargs)"
    - name: echo output
      id: changefiles
      run: |
        docs_changes=false
        for file in ${{ steps.changes.outputs.docs }}; do

             echo "changed files are $file"
            if [[ ("$changed_file" != *.md) || ("$changed_file" != .md_links_config.json) ]]; then
                  docs_changes=true
                  break
            fi
        done
        if $docs_changes; then
          echo "Setting 'docs_changes' to 'yes'"
          echo "::set-output name=docs_changes::yes"
        else
          echo "Setting 'docs_changes' to 'no'"
          echo "::set-output name=docs_changes::no"
        fi

  test-unit:
    needs: changedfiles
    if: ${{ needs.changedfiles.outputs.all == 'yes' }}
    name: Unit test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2019]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Set up Go 1.17
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
    - name: Check-out code
      uses: actions/checkout@v3
    - uses: actions/cache@v2
      with:
        # In order:
        # * Module download cache
        # * Build cache (Linux)
        # * Build cache (Mac)
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          %LocalAppData%\go-build
        key: ${{ runner.os }}-${{ env.go-cache-name }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.go-cache-name }}-
    - name: Run unit tests
      run: make test-unit
    - name: Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: .coverage/coverage-unit.txt
        flags: unit-tests
        name: codecov-unit-test

  golangci-lint:
    needs: changedfiles
    if: ${{ needs.changedfiles.outputs.all == 'yes' }}
    name: Golangci-lint
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Set up Go 1.17
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
    - name: Check-out code
      uses: actions/checkout@v3
    - uses: actions/cache@v2
      with:
        # In order:
        # * Module download cache
        # * Build cache (Linux)
        # * Build cache (Mac)
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          %LocalAppData%\go-build
        key: ${{ runner.os }}-${{ env.go-cache-name }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.go-cache-name }}-
    - name: Run golangci-lint
      run: make golangci
    - name: Run golangci-lint for netpol
      working-directory: hack/netpol
      run: make golangci

  bin:
    needs: changedfiles
    if: ${{ needs.changedfiles.outputs.all == 'yes' }}
    name: Build Antrea and antctl binaries
    runs-on: [ubuntu-latest]
    steps:
    - name: Set up Go 1.17
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
    - name: Check-out code
      uses: actions/checkout@v3
    - uses: actions/cache@v2
      with:
        # In order:
        # * Module download cache
        # * Build cache (Linux)
        # * Build cache (Mac)
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          %LocalAppData%\go-build
        key: ${{ runner.os }}-${{ env.go-cache-name }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.go-cache-name }}-
    - name: Build Antrea binaries for amd64
      run: GOARCH=amd64 make bin
    - name: Build Antrea binaries for arm64
      run: GOARCH=arm64 make bin
    - name: Build Antrea binaries for arm
      run: GOARCH=arm make bin
    - name: Build antctl binaries
      run: make antctl
    - name: Build Multi-cluster binaries
      run: |
        cd multicluster
        make build

  windows-bin:
    needs: changedfiles
    if: ${{ needs.changedfiles.outputs.all == 'yes' }}
    name: Build Antrea Windows binaries
    runs-on: [ubuntu-latest]
    steps:
    - name: Set up Go 1.17
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
    - name: Check-out code
      uses: actions/checkout@v3
    - uses: actions/cache@v2
      with:
        # In order:
        # * Module download cache
        # * Build cache (Linux)
        # * Build cache (Mac)
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          %LocalAppData%\go-build
        key: ${{ runner.os }}-${{ env.go-cache-name }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.go-cache-name }}-
    - name: Build Antrea windows binaries
      run: make windows-bin

  tidy-codegen-manifest:
    needs: changedfiles
    if: ${{ needs.changedfiles.outputs.all == 'yes' }}
    name: Check tidy, code generation and manifest
    runs-on: [ubuntu-latest]
    steps:
    - name: Set up Go 1.17
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
    - name: Check-out code
      uses: actions/checkout@v3
    # tidy check need to be run before code generation which will regenerate codes.
    - name: Check tidy
      run: make test-tidy
    - name: Check code generation
      run: ./ci/check-codegen.sh
    - name: Check manifest
      run: ./ci/check-manifest.sh
    - name: Check copyright
      run: ./ci/check-copyright.sh

  verify:
    name: Verify docs and spelling
    runs-on: [ubuntu-latest]
    steps:
    - name: Set up Go 1.17
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
    - name: Check-out code
      uses: actions/checkout@v3
    - name: Run verify scripts
      run: make verify
    - name: Checking for broken Markdown links
      uses: antoninbas/github-action-markdown-link-check@1.0.9-pre
      with:
        folder-path: './docs'
        file-path: './README.md, ./CHANGELOG.md, ./CONTRIBUTING.md, ./GOVERNANCE.md, ./MAINTAINERS.md, ./ROADMAP.md, ./SECURITY.md'
        config-file: 'hack/.md_links_config.json'
    - name: Markdownlint
      run: |
        sudo npm install -g markdownlint-cli@0.31.1
        make markdownlint

  benchmark:
    needs: changedfiles
    if: ${{ needs.changedfiles.outputs.all == 'yes' }}
    name: Go benchmark test
    runs-on: [ubuntu-latest]
    steps:
      - name: Set up Go 1.17
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Check-out code
        uses: actions/checkout@v3
      - name: Run Go benchmark test
        run: go test -run '^$' -bench . -benchtime 1x -timeout 10m -cpu 4 -v -benchmem ./pkg/...
