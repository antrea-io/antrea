apiVersion: cluster.x-k8s.io/v1alpha3
kind: Cluster
metadata:
  name: CLUSTERNAME
  namespace: CLUSTERNAMESPACE
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 100.96.0.0/11
    serviceDomain: cluster.local
    services:
      cidrBlocks:
      - 100.64.0.0/13
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
    kind: KubeadmControlPlane
    name: CLUSTERNAME
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: VSphereCluster
    name: CLUSTERNAME
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: HAProxyLoadBalancer
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: CLUSTERNAME
  name: CLUSTERNAME
  namespace: CLUSTERNAMESPACE
spec:
  user:
    authorizedKeys:
    - SSHAUTHORIZEDKEYS
    name: capvs
  virtualMachineConfiguration:
    cloneMode: linkedClone
    datacenter: DATACENTERNAME
    datastore: WorkloadDatastore
    diskGiB: 25
    folder: antrea
    memoryMiB: 8192
    network:
      devices:
      - dhcp4: true
        networkName: NETWORKNAME
    numCPUs: 3
    resourcePool: RESOURCEPOOLPATH
    server: VCENTERNAME
    template: capv-haproxy-v0.6.3
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: VSphereCluster
metadata:
  name: CLUSTERNAME
  namespace: CLUSTERNAMESPACE
spec:
  cloudProviderConfiguration:
    global:
      insecure: true
      secretName: cloud-provider-vsphere-credentials
      secretNamespace: kube-system
    network:
      name: NETWORKNAME
    providerConfig:
      cloud:
        controllerImage: gcr.io/cloud-provider-vsphere/cpi/release/manager:v1.0.0
      storage:
        attacherImage: quay.io/k8scsi/csi-attacher:v2.0.0
        controllerImage: gcr.io/cloud-provider-vsphere/csi/release/driver:v2.0.0
        livenessProbeImage: quay.io/k8scsi/livenessprobe:v1.1.0
        metadataSyncerImage: gcr.io/cloud-provider-vsphere/csi/release/syncer:v2.0.0
        nodeDriverImage: gcr.io/cloud-provider-vsphere/csi/release/driver:v2.0.0
        provisionerImage: quay.io/k8scsi/csi-provisioner:v1.4.0
        registrarImage: quay.io/k8scsi/csi-node-driver-registrar:v1.2.0
    virtualCenter:
      VCENTERNAME:
        datacenters: DATACENTERNAME
    workspace:
      datacenter: DATACENTERNAME
      datastore: WorkloadDatastore
      folder: antrea
      resourcePool: RESOURCEPOOLPATH
      server: VCENTERNAME
  loadBalancerRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: HAProxyLoadBalancer
    name: CLUSTERNAME
  server: VCENTERNAME
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: VSphereMachineTemplate
metadata:
  name: CLUSTERNAME
  namespace: CLUSTERNAMESPACE
spec:
  template:
    spec:
      cloneMode: linkedClone
      datacenter: DATACENTERNAME
      datastore: WorkloadDatastore
      diskGiB: 25
      folder: antrea
      memoryMiB: 8192
      network:
        devices:
        - dhcp4: true
          networkName: NETWORKNAME
      numCPUs: 3
      resourcePool: RESOURCEPOOLPATH
      server: VCENTERNAME
      template: OVATEMPLATENAME
---
apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
kind: KubeadmControlPlane
metadata:
  name: CLUSTERNAME
  namespace: CLUSTERNAMESPACE
spec:
  infrastructureTemplate:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: VSphereMachineTemplate
    name: CLUSTERNAME
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-provider: external
          feature-gates: SCTPSupport=true
      controllerManager:
        extraArgs:
          cloud-provider: external
    initConfiguration:
      nodeRegistration:
        criSocket: /var/run/containerd/containerd.sock
        kubeletExtraArgs:
          cloud-provider: external
        name: '{{ ds.meta_data.hostname }}'
    joinConfiguration:
      nodeRegistration:
        criSocket: /var/run/containerd/containerd.sock
        kubeletExtraArgs:
          cloud-provider: external
        name: '{{ ds.meta_data.hostname }}'
    preKubeadmCommands:
    - hostname "{{ ds.meta_data.hostname }}"
    - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
    - echo "127.0.0.1   localhost" >>/etc/hosts
    - echo "127.0.0.1   {{ ds.meta_data.hostname }}" >>/etc/hosts
    - echo "{{ ds.meta_data.hostname }}" >/etc/hostname
    users:
    - name: capv
      sshAuthorizedKeys:
      - SSHAUTHORIZEDKEYS
      sudo: ALL=(ALL) NOPASSWD:ALL
  replicas: 1
  version: K8SVERSION
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
kind: KubeadmConfigTemplate
metadata:
  name: CLUSTERNAME-md-0
  namespace: CLUSTERNAMESPACE
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          kubeletExtraArgs:
            cloud-provider: external
          name: '{{ ds.meta_data.hostname }}'
      preKubeadmCommands:
      - hostname "{{ ds.meta_data.hostname }}"
      - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
      - echo "127.0.0.1   localhost" >>/etc/hosts
      - echo "127.0.0.1   {{ ds.meta_data.hostname }}" >>/etc/hosts
      - echo "{{ ds.meta_data.hostname }}" >/etc/hostname
      useExperimentalRetryJoin: true
      users:
      - name: capv
        sshAuthorizedKeys:
        - SSHAUTHORIZEDKEYS
        sudo: ALL=(ALL) NOPASSWD:ALL
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineDeployment
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: CLUSTERNAME
  name: CLUSTERNAME-md-0
  namespace: CLUSTERNAMESPACE
spec:
  clusterName: CLUSTERNAME
  replicas: 2
  selector:
    matchLabels: {}
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: CLUSTERNAME
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
          kind: KubeadmConfigTemplate
          name: CLUSTERNAME-md-0
      clusterName: CLUSTERNAME
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: VSphereMachineTemplate
        name: CLUSTERNAME
      version: K8SVERSION
