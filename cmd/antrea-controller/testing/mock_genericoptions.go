// Code generated by MockGen. DO NOT EDIT.
// Source: ./cmd/antrea-controller/controller.go

// Package testing is a generated GoMock package.
package testing

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	server "k8s.io/apiserver/pkg/server"
	common "k8s.io/kube-openapi/pkg/common"
)

// MockAuthentication is a mock of Authentication interface.
type MockAuthentication struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationMockRecorder
}

// MockAuthenticationMockRecorder is the mock recorder for MockAuthentication.
type MockAuthenticationMockRecorder struct {
	mock *MockAuthentication
}

// NewMockAuthentication creates a new mock instance.
func NewMockAuthentication(ctrl *gomock.Controller) *MockAuthentication {
	mock := &MockAuthentication{ctrl: ctrl}
	mock.recorder = &MockAuthenticationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthentication) EXPECT() *MockAuthenticationMockRecorder {
	return m.recorder
}

// ApplyTo mocks base method.
func (m *MockAuthentication) ApplyTo(authenticationInfo *server.AuthenticationInfo, servingInfo *server.SecureServingInfo, openAPIConfig *common.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyTo", authenticationInfo, servingInfo, openAPIConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyTo indicates an expected call of ApplyTo.
func (mr *MockAuthenticationMockRecorder) ApplyTo(authenticationInfo, servingInfo, openAPIConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyTo", reflect.TypeOf((*MockAuthentication)(nil).ApplyTo), authenticationInfo, servingInfo, openAPIConfig)
}

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// ApplyTo mocks base method.
func (m *MockAuthorization) ApplyTo(authorizationInfo *server.AuthorizationInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyTo", authorizationInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyTo indicates an expected call of ApplyTo.
func (mr *MockAuthorizationMockRecorder) ApplyTo(authorizationInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyTo", reflect.TypeOf((*MockAuthorization)(nil).ApplyTo), authorizationInfo)
}
