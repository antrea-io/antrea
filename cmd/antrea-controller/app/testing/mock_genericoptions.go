// Copyright 2023 Antrea Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: antrea.io/antrea/cmd/antrea-controller/app (interfaces: Authorization,Authentication)

// Package testing is a generated GoMock package.
package testing

import (
	gomock "github.com/golang/mock/gomock"
	server "k8s.io/apiserver/pkg/server"
	common "k8s.io/kube-openapi/pkg/common"
	reflect "reflect"
)

// MockAuthorization is a mock of Authorization interface
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// ApplyTo mocks base method
func (m *MockAuthorization) ApplyTo(arg0 *server.AuthorizationInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyTo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyTo indicates an expected call of ApplyTo
func (mr *MockAuthorizationMockRecorder) ApplyTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyTo", reflect.TypeOf((*MockAuthorization)(nil).ApplyTo), arg0)
}

// MockAuthentication is a mock of Authentication interface
type MockAuthentication struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationMockRecorder
}

// MockAuthenticationMockRecorder is the mock recorder for MockAuthentication
type MockAuthenticationMockRecorder struct {
	mock *MockAuthentication
}

// NewMockAuthentication creates a new mock instance
func NewMockAuthentication(ctrl *gomock.Controller) *MockAuthentication {
	mock := &MockAuthentication{ctrl: ctrl}
	mock.recorder = &MockAuthenticationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthentication) EXPECT() *MockAuthenticationMockRecorder {
	return m.recorder
}

// ApplyTo mocks base method
func (m *MockAuthentication) ApplyTo(arg0 *server.AuthenticationInfo, arg1 *server.SecureServingInfo, arg2 *common.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyTo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyTo indicates an expected call of ApplyTo
func (mr *MockAuthenticationMockRecorder) ApplyTo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyTo", reflect.TypeOf((*MockAuthentication)(nil).ApplyTo), arg0, arg1, arg2)
}
